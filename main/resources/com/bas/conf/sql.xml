<?xml version="1.0" encoding="UTF-8"?>
<sql>
    <sprav>
        <cm>
            <canvas_prpt>
                <![CDATA[
               with params as (select cast(? as text) as form_code)
                SELECT
                  o.id,
                  o.description,
                  lower(trim(o.style)) as pagestyle,
                  c.id as c_id,
                  c.title1,
                  c.mainheight,
                  c.prev1height,
                  c.leftsidewidth,
                  c.layout_type,
                  trim(c.style) as style,
                  lower(trim(g.sqlpath)) as sqlpath,
                  lower(trim(g.data_url)) as data_url,
                  g.grid_num,
                  g.id as g_id,
                  g.header,
                  g.showheader,
                  g.f_onclick,
                  g.f_contextmenu_click,
                  g.lang_filter,
                  g.user_filter,
                  g.showfilter,
                  g.showtoolbar,
                  g.toolbarrighttext,
                  g.f_toolbar_click,
                  g.f_onrender
                  ,(
                   WITH RECURSIVE q (id, code, t_objects_id , level) AS
                    (
                    SELECT o1.id, o1.code, o1.t_objects_id, 1 as level
                    FROM  cm.t_objects o1
                    WHERE o1.code = params.form_code
                    UNION ALL
                    SELECT o2.id, o2.code, o2.t_objects_id, (q.level+1) as level
                    FROM cm.t_objects o2
                    JOIN q ON q.t_objects_id = o2.id
                    )
                   SELECT
                   q.code
                   FROM q
                   WHERE LEVEL=(select max(level) from q)
                   ) as top_menu
                FROM
                 cm.t_objects o,
                 cm.t_obj_canvas c
                     LEFT OUTER JOIN cm.t_canvas_grids g
                     ON (c.id = g.t_canvas_id),
                 params
                WHERE o.code = params.form_code
                and o.status=1
                and c.t_objects_id = o.id
                order by g.grid_num;
            ]]>
            </canvas_prpt>
            <side_menu>
                <![CDATA[
               WITH RECURSIVE q (id, code, description, t_objects_id , path, level, disabled,  expanded, f_onclick, icon) AS (
                SELECT
                  o1.id
                 ,o1.code
                 ,o1.description
                 ,o1.t_objects_id
                 ,(ltrim(to_char(o1.id,'FM999999999999'))) as path
                 ,0 as level
                 ,o1.disabled
                 ,o1.expanded
                 ,o1.f_onclick
                 ,o1.icon
                FROM  cm.t_objects o1
                WHERE lower(trim(o1.code)) = lower(trim(?))
                 and o1.status=1
              UNION ALL
                SELECT
                 o2.id
                 ,o2.code
                 ,o2.description
                 ,o2.t_objects_id
                 , q.path||'-'||(ltrim(to_char(o2.id,'FM999999999999'))) as path
                 ,(q.level+1) as level
                 ,o2.disabled
                 ,o2.expanded
                 ,o2.f_onclick
                 ,o2.icon
                FROM cm.t_objects o2
                JOIN q ON q.id=o2.t_objects_id
                WHERE o2.status=1
            )
            SELECT
              trim(q.code) as code
              ,lpad(' ', (q.level-1)*1, ' ')||q.description as description
              ,q.level
              ,q.disabled
              ,q.expanded
              ,q.f_onclick
              ,q.icon
             FROM q
            ORDER BY q.path;
            ]]>
            </side_menu>
            <grid_prpt>
                <![CDATA[
               with params as (select cast(? as int) as id)
                SELECT
                  c.id as recid,
                  c.id as c_id,
                  c.name,
                  c.caption,
                  c.size,
                  g.grid_num,
                  g.id,
                  trim(c.render) as render
                FROM
                  cm.t_canvas_grids g,
                  cm.t_grid_columns c,
                  params
                WHERE g.t_canvas_id = params.id
                and c.t_grids_id = g.id
                order by g.grid_num, c.cnumber;
            ]]>
            </grid_prpt>
            <grid_menu_prpt>
                <![CDATA[
               with params as (select cast(? as int) as id)
                SELECT
                  g.id,
                  g.grid_num,
                  m.menu_id,
                  m.menu_text,
                  m.icon,
                  m.disabled,
                  m.tooltip,
                  m.istoolbar,
                  lower(trim(m.toolbartype)) as toolbartype,
                  lower(trim(m.action_type)) as action_type
                FROM
                  cm.t_canvas_grids g,
                  cm.t_grid_menu m,
                  params
                WHERE g.t_canvas_id = params.id
                  and m.t_grids_id = g.id
                  order by g.id, g.grid_num, m.menu_id;
            ]]>
            </grid_menu_prpt>
            <form_prpt>
                <![CDATA[
               with params as (select cast(? as int) as id)
                SELECT
                  fc.id as fc_id,
                  fc.name,
                  fc.type,
                  fc.required,
                  fc.caption,
                  fc.attr,
                  fc.format,
                  lower(trim(fc.items_dataurl)) as items_dataurl,
                  lower(trim(fc.items_sqlpath)) as items_sqlpath,
                  (select
                     case trim(fc.match)
                     when '' then 'contains'
                     else coalesce(trim(fc.match),'contains')
                  end) as match,
                  fc.text,
                  fc.cnumber,
                  trim(fc.defval) as defval,
                  trim(fc.if_null) as if_null,
                  f.id as f_id,
                  trim(f.form_url) as form_url,
                  f.act_caption,
                  f.act_class,
                  f.act_fclick,
                  f.clear_caption,
                  f.clear_class,
                  f.clear_fclick,
                  f.f_onchange,
                  f.f_onrender,
                  f.t_canvas_id,
                  (select
                    case lower(trim(f.form_type))
                    when '' then 'cmform'||f.id::text
                    else lower(trim(coalesce(f.form_type,'cmform'||f.id::text)))
                  end) as form_type,
                  fc.field_mask,
                  lower(trim(fc.data_type)) as data_type,
                  lower(trim(f.data_url)) as data_url,
                  lower(trim(f.sql_path)) as sql_path,
                  f.title,
                  lower(trim(fc.parent_item)) as parent_item,
                  trim(f.tabs) as tabs,
                  COALESCE(fc.page,0) as page,
                  COALESCE(fc.column,0) as column
                FROM
                  params,
                  cm.t_canvas_forms f
                     LEFT OUTER JOIN cm.t_form_columns fc
                     ON (f.id = fc.t_form_id)
                WHERE f.t_grids_id = params.id
                order by f.form_type, fc.cnumber;
            ]]>
            </form_prpt>
            <objects>
                <![CDATA[
                 WITH RECURSIVE q (
                 recid, master_recid, code, description, t_objects_id , path
                 ,level, disabled,  expanded, f_onclick,status
                )
                 AS (
                    SELECT
                      o1.id as recid
                     ,o1.id as master_recid
                     ,o1.code
                     ,o1.description
                     ,o1.t_objects_id
                     ,(ltrim(to_char(o1.id,'FM999999999999'))) as path
                     ,0 as level
                     ,o1.disabled
                     ,o1.expanded
                     ,o1.f_onclick
                     ,o1.status
                    FROM  cm.t_objects o1
                   WHERE o1.t_objects_id is null
                  UNION ALL
                    SELECT
                     o2.id as recid
                     ,o2.id as master_recid
                     ,o2.code
                     ,o2.description
                     ,o2.t_objects_id
                     , q.path||'-'||(ltrim(to_char(o2.id,'FM999999999999'))) as path
                     ,(q.level+1) as level
                     ,o2.disabled
                     ,o2.expanded
                     ,o2.f_onclick
                     ,o2.status
                    FROM cm.t_objects o2
                    JOIN q ON q.recid=o2.t_objects_id
                )
                SELECT
                   q.recid
                  ,q.master_recid
                  ,q.code
                  ,repeat('&nbsp;', level*5)||q.description as p_description
                  ,q.level
                  ,''||q.disabled as p_disabled
                  ,''||q.expanded as expanded
                  ,q.f_onclick
                  ,q.status
                  ,q.t_objects_id
                 FROM q
                 WHERE q.code not in ('MCLOUD','MCOBJECTS','MCGRIDS','MCFORMS','MCGMENU')
                ORDER BY q.path;
            ]]>
            </objects>
            <obj_canvas>
                <![CDATA[
               SELECT
                  c.id as recid,
                  c.title1,
                  c.mainheight,
                  c.prev1height,
                  c.layout_type,
                  c.t_objects_id,
                  c.leftsidewidth
                FROM
                  cm.t_obj_canvas c
                WHERE c.t_objects_id = ?;
            ]]>
            </obj_canvas>
            <obj_list>
                <![CDATA[
              WITH RECURSIVE q (id, text, t_objects_id , path ,level, code) AS (
               with params as (select cast(? as int) as lang, cast(? as int) as id, cast(? as int) as grid_id)
               SELECT
                  o1.id as id
                 ,o1.description as text
                 ,o1.t_objects_id
                 ,(ltrim(to_char(o1.id,'FM999999999999'))) as path
                 ,0 as level
                 ,o1.code
               FROM  cm.t_objects o1, params
               WHERE o1.t_objects_id is null
               and params.lang is not null
               and ((o1.id = params.id) or (params.id is null))
              UNION ALL
                SELECT
                 o2.id as id
                 ,o2.description
                 ,o2.t_objects_id
                 , q.path||'-'||(ltrim(to_char(o2.id,'FM999999999999'))) as path
                 ,(q.level+1) as level
                 ,o2.code
                FROM cm.t_objects o2
                JOIN q ON q.id=o2.t_objects_id
            )
            SELECT
               q.id
              ,repeat('&nbsp;', level)||q.text as text
             FROM q
             WHERE q.code not in ('MCLOUD','MCOBJECTS','MCGRIDS','MCFORMS','MCGMENU')
            ORDER BY q.path;
            ]]>
            </obj_list>
            <grids>
                <![CDATA[
               with params as (select cast(? as int) as o_id)
                SELECT
                  o.description as p_descr,
                  g.t_canvas_id as t_canvas_id,
                  c.title1 as canv_title,
                  g.id as recid,
                  g.id as master_recid,
                  g.grid_num,
                  g.header,
                  g.showheader,
                  g.lang_filter,
                  g.user_filter,
                  g.showfilter,
                  g.showtoolbar,
                  g.toolbarrighttext,
                  g.f_onrender,
                  g.f_onclick,
                  g.f_contextmenu_click,
                  g.f_toolbar_click,
                  g.data_url as p_data_url,
                  g.sqlpath as p_sqlpath
                FROM
                  cm.t_objects o,
                  cm.t_obj_canvas c,
                  cm.t_canvas_grids g,
                  params
                WHERE 1=1
                and ((c.id = params.o_id) or (params.o_id is null))
                and o.status=1
                and c.t_objects_id = o.id
                and g.t_canvas_id = c.id
                and o.code not in ('MCLOUD','MCOBJECTS','MCGRIDS','MCFORMS','MCGMENU')
                order by g.t_canvas_id, g.grid_num;
            ]]>
            </grids>
            <grids_columns>
                <![CDATA[
               with params as (select cast(? as int) as id)
                SELECT
                  c.id as recid,
                  c.t_grids_id,
                  c.name,
                  c.caption,
                  c.size,
                  c.cnumber,
                  c.render
                FROM
                  cm.t_grid_columns c,
                  params
                WHERE c.t_grids_id = params.id
                order by c.cnumber;
            ]]>
            </grids_columns>
            <canvas_list>
                <![CDATA[
                with params as (select cast(? as int) as lang, cast(? as int) as id, cast(? as int) as grid_id)
               SELECT
                  c.id,
                  c.title1||' ('||o.description||')' as text
                FROM
                  params,
                  cm.t_objects o,
                  cm.t_obj_canvas c
                WHERE o.status=1
                and params.lang is not null
                and c.t_objects_id = o.id
                and ((o.id = params.id) or (params.id is null))
                and o.code not in ('MCLOUD','MCOBJECTS','MCGRIDS','MCFORMS','MCGMENU')
                order by c.t_objects_id, c.id;
            ]]>
            </canvas_list>
            <grid_list>
                <![CDATA[
                with params as (select cast(? as int) as lang, cast(? as int) as id, cast(? as int) as grid_id)
                SELECT
                  g.id as id,
                  to_char(g.grid_num,'99')||' '|| g.header||' ('|| o.description||')' as text
                FROM
                  params,
                  cm.t_objects o,
                  cm.t_obj_canvas c,
                  cm.t_canvas_grids g
                WHERE o.status=1
                and params.lang is not null
                and c.t_objects_id = o.id
                and g.t_canvas_id = c.id
                and ((c.id = params.id) or (params.id is null))
                and o.code not in ('MCLOUD','MCOBJECTS','MCGRIDS','MCFORMS','MCGMENU')
                order by g.t_canvas_id, g.grid_num;
            ]]>
            </grid_list>
            <forms>
                <![CDATA[
               with params as (select cast(? as int) as id)
                SELECT
                  f.id as recid,
                  f.id as master_recid,
                  f.form_url,
                  f.act_caption,
                  f.act_class,
                  f.act_fclick,
                  f.clear_caption,
                  f.clear_class,
                  f.clear_fclick,
                  f.f_onchange,
                  f.f_onrender,
                  f.form_type,
                  f.title,
                  f.data_url as p_data_url,
                  f.sql_path as p_sql_path,
                  f.t_canvas_id,
                  f.t_grids_id,
                  trim(f.tabs) as tabs,
                  c.title1 as p_canvas,
                  g.header as p_grid
                FROM
                  params,
                  cm.t_canvas_forms f,
                  cm.t_obj_canvas c,
                  cm.t_canvas_grids g
                WHERE ((f.t_grids_id = params.id) or (params.id is null))
                  and f.t_grids_id = g.id
                  and g.t_canvas_id = c.id
                  and c.t_objects_id not in (select id from cm.t_objects where code in ('MCLOUD','MCOBJECTS','MCGRIDS','MCFORMS','MCGMENU'))
                order by c.title1, g.header, f.form_type;
            ]]>
            </forms>
            <form_columns>
                <![CDATA[
               with params as (select cast(? as int) as id)
                SELECT
                  fc.id as recid,
                  fc.name,
                  fc.type,
                  fc.required,
                  fc.caption,
                  fc.attr,
                  fc.format,
                  fc.items_dataurl,
                  fc.match,
                  fc.text,
                  fc.cnumber,
                  fc.defval as p_defval,
                  fc.if_null,
                  fc.items_sqlpath,
                  fc.field_mask,
                  fc.data_type as p_data_type,
                  fc.t_form_id,
                  fc.parent_item,
                  COALESCE(fc.page,0) as page,
                  COALESCE(fc.column,0) as column
                FROM
                  cm.t_form_columns fc,
                  params
                WHERE fc.t_form_id = params.id
                  order by fc.cnumber;
            ]]>
            </form_columns>
            <grid_menu>
                <![CDATA[
              with params as (select cast(? as int) as id)
                SELECT
                  m.id as recid,
                  c.title1,
                  g.header,
                  m.menu_id,
                  m.menu_text,
                  m.icon,
                  m.disabled as p_disabled,
                  m.tooltip as p_tooltip,
                  m.istoolbar,
                  lower(trim(m.toolbartype)) as toolbartype,
                  lower(trim(m.action_type)) as action_type,
                  m.t_grids_id
                FROM
                  params,
                  cm.t_obj_canvas c,
                  cm.t_canvas_grids g,
                  cm.t_grid_menu m
                WHERE ((g.id = params.id) or (params.id is null))
                  and g.t_canvas_id = c.id
                  and m.t_grids_id = g.id
                  and c.t_objects_id not in (select id from cm.t_objects where code in ('MCLOUD','MCOBJECTS','MCGRIDS','MCFORMS','MCGMENU'))
                  order by c.id, g.id, g.grid_num, m.menu_id;
            ]]>
            </grid_menu>
            <menu_actions_list>
                <![CDATA[
                with params as (select cast(? as int) as lang, cast(? as int) as id, cast(? as int) as grid_id)
                select null as id, '&nbsp;' as text
                UNION ALL
                (SELECT
                  'cmform'||f.id::text as id,
                  '('||coalesce(f.form_type,' ')||') '||f.id::text||' '|| f.title as text
                FROM
                  cm.t_canvas_forms f,
                  params
                WHERE f.t_grids_id = params.grid_id
                ORDER BY f.id);
            ]]>
            </menu_actions_list>
        </cm>
        <tophr>
            <tmp_mixed_all>
                <![CDATA[
                select mxd.id, coalesce(mxd.parentid,0) as parentid, mxd.name, coalesce(mxd.title,' ') as title,
                       coalesce(mxd.phone,' ') as phone, coalesce(mxd.mail,' ') as mail, coalesce(mxd.ADDRESS,' ') as ADDRESS,
                       coalesce(mxd.IMAGE,' ') as IMAGE,
                       mxd.id as recid
                  from topcore.tmp_mixed mxd
                 WHERE status!=0
                 order by 1
                ]]>
            </tmp_mixed_all>
            <tmp_staff_all>
                <![CDATA[
                    select * from topcore.tmp_org_v1
                    union all
                    select * from topcore.tmp_org_v2
                    order by 1;
                ]]>
            </tmp_staff_all>
            <tmp_division_all>
                <![CDATA[
                select div.id as recid, div.*
                  from topcore.tmp_division div
                 order by 1
                ]]>
            </tmp_division_all>
            <tmp_position_all>
                <![CDATA[
                select pos.id as recid, pos.*
                  from topcore.tmp_position pos
                 order by 1
                ]]>
            </tmp_position_all>
            <tmp_div>
                <![CDATA[
               WITH RECURSIVE q (id, parent_id, description ,status,  level, path) AS
                 (
                 with params as (select cast(? as int) as id)
                   SELECT d1.id,
  					d1.parent_id,
   					d1.description,
   					d1.status,
   					1 as level
                    ,(ltrim(to_char(d1.id,'FM999999999999'))) as path
                   FROM  topcore.tmp_division d1, params
                   WHERE
                   ((params.id is null and d1.parent_id is null) or (d1.id = params.id))
                   UNION ALL
                   SELECT d2.id,
  					d2.parent_id,
  					d2.description,
  					d2.status,
   					(q.level+1) as level
                    ,q.path||'-'||(ltrim(to_char(d2.id,'FM999999999999'))) as path
                    FROM topcore.tmp_division d2
                    JOIN q ON d2.parent_id = q.id
                 )
                  SELECT
                    q.id as recid,
                    q.parent_id,
                    repeat('&nbsp;', level*5)||q.description as p_description,
  					q.status
                  FROM q
                  ORDER BY path
            ]]>
            </tmp_div>
            <div_list>
                <![CDATA[
                with params as (select cast(? as int) as lang, cast(? as int) as id, cast(? as int) as grid_id)
                SELECT
                d.id as id,
                d.description as text
                FROM
                topcore.tmp_division d;
                 ]]>
            </div_list>
            <tmp_position>
                <![CDATA[
               SELECT
              p.id as recid,
              p.description,
              p.status
            FROM
              topcore.tmp_position p;
            ]]>
            </tmp_position>
            <position_list>
                <![CDATA[
                with params as (select cast(? as int) as lang, cast(? as int) as id, cast(? as int) as grid_id)
                SELECT
                  p.id as id,
                  p.description as text
                FROM
                  topcore.tmp_position p;
                 ]]>
            </position_list>
            <tmp_staff>
                <![CDATA[
                SELECT
                  s.id as recid,
                  s.lname,
                  s.fname,
                  s.mname,
                  s.phone,
                  s.position_id,
                  s.mail,
                  s.address,
                  s.image,
                  s.division_id as p_div_id
                FROM
                  topcore.tmp_staff s;
                ]]>
            </tmp_staff>
        </tophr>
        <tmp_street_sel>
            <![CDATA[
              with params as (select
		 cast(lower('%'||trim(?)||'%') as varchar) as n1
		,cast(lower('%'||trim(?)||'%') as varchar) as n2
		,cast(lower('%'||trim(?)||'%') as varchar) as tstr
        ,cast( ? as int) as status
         )
        SELECT
          ts.id as recid,
          ts.name1,
          ts.name2,
          ts.tstr,
          ts.status
        FROM
          ch_ksk.tmp_street ts
          ,params
        WHERE
             lower(ts.name1) like params.n1
         and lower(ts.name2) like params.n2
         and lower(ts.tstr) like params.tstr
         and ts.status = params.status;
        ]]>
        </tmp_street_sel>
        <regions_list>
            <![CDATA[
                SELECT t1.code as id, t1.description as text
                  FROM ch_ksk.t_regions t1
                 WHERE t_city_id=?
                   AND status=?
                 ORDER BY 2
            ]]>
        </regions_list>
        <ksk_doc_value>
            <![CDATA[
                SELECT tdc.*
                  FROM ch_ksk.t_ksk_doc_value tdc, ch_ksk.t_ksk_doc_type tp
                 WHERE tdc.kdt_id=tp.id
                   AND tdc.t_ksk_id=?
                   AND tp.code=?
                   AND tdc.status=?
                 ORDER BY 1
            ]]>
        </ksk_doc_value>
        <position_type_byKSK>
            <![CDATA[
                SELECT distinct pt.id, lng.lang_text as text
                  FROM ch_ksk.t_position_types pt, ch_ksk.t_any_lang_text lng, ch_ksk.t_position tpos
                 WHERE pt.status=1
                   AND pt.code<>'ds'
                   AND pt.id=lng.table_id
                   AND lng.table_name='t_position_types'
                   AND lng.t_language_id=?
                   AND tpos.t_position_types_id=pt.id
                   AND tpos.t_ksk_id=?
                 ORDER BY 1
            ]]>
        </position_type_byKSK>
        <reqs_by_executor>
            <![CDATA[
                WITH lang AS (
                SELECT id
                  FROM ch_ksk.t_language
                 WHERE id=?),
                 pars as (select ? as req_stat, cast(? as bigint) as user_id, cast(? as date) as dat_beg, cast(? as timestamp) as dat_end, cast(? as bigint) as req_id)
                select req.id as recid,
                       req.dat_reg,
                       ch_ksk.f_get_lang_text('t_services', req.t_services_id, lang.id) req_type,
                       ch_ksk.f_get_lang_text('t_req_status', req.t_req_status_id, lang.id) req_status,
                       req.t_req_status_id,
                       his.id hist_id,
                       his.t_position_id as tpos,
                       tksk.id as ksk_id
                 from ch_ksk.t_request req, ch_ksk.t_oper_history his, lang, pars, ch_ksk.t_flats tfl, ch_ksk.t_building tbl, ch_ksk.t_building_ksk tbl_k, ch_ksk.t_ksk tksk
                where req.id=his.t_request_id
                  and not exists (select 1 from ch_ksk.t_oper_history his1 where his1.t_request_id=req.id and his1.sid=his.id)
                  and req.t_req_status_id=ANY(pars.req_stat ::int[])
                  and his.t_position_id in (select id from ch_ksk.t_position where date_end is null and t_user_id=pars.user_id)
                  and req.dat_reg >= coalesce(pars.dat_beg, req.dat_reg)
                  and req.dat_reg <= coalesce(pars.dat_end, req.dat_reg)
                  and req.id = coalesce(pars.req_id, req.id)
                  and req.t_flats_id=tfl.id
                  and tfl.t_building_id=tbl.id
                  and tbl_k.t_building_id=tbl.id
                  and tbl_k.t_ksk_id=tksk.id
                union
                select req.id as recid,
                       req.dat_reg,
                       ch_ksk.f_get_lang_text('t_services', req.t_services_id, lang.id) req_type,
                       ch_ksk.f_get_lang_text('t_req_status', req.t_req_status_id, lang.id) req_status,
                       req.t_req_status_id,
                       0 hist_id,
                       0 as tpos,
                       tksk.id as ksk_id
                 from ch_ksk.t_request req, lang, pars, ch_ksk.t_flats tfl, ch_ksk.t_building tbl, ch_ksk.t_building_ksk tbl_k, ch_ksk.t_ksk tksk
                where req.t_flats_id=tfl.id
                  and tfl.t_building_id=tbl.id
                  and tbl_k.t_building_id=tbl.id
                  and tbl_k.t_ksk_id=tksk.id
                  and req.t_req_status_id=ANY(pars.req_stat ::int[])
                  and tksk.id in (select t_ksk_id
                                    from ch_ksk.t_position tpos, ch_ksk.t_position_types tpost
                           where tpos.t_position_types_id=tpost.id
                          and tpos.t_user_id=pars.user_id
                          and tpos.date_end is null
                          and tpost.code in ('ds','pr','up'))
                  and req.dat_reg >= coalesce(pars.dat_beg, req.dat_reg)
                  and req.dat_reg <= coalesce(pars.dat_end, req.dat_reg)
                  and req.id = coalesce(pars.req_id, req.id)
                  and req.t_req_status_id!=3
                order by 1
            ]]>
        </reqs_by_executor>
        <cit_vote_res_rep>
            <![CDATA[
               with param as (
  select
    cast(? as int) as lang
   ,cast(? as int) as user_id
   ,cast(? as int) as vote_id
 )
SELECT
   t1.lang_text question
  ,t1.table_id question_id
  ,t2.lang_text  answer
  ,count(t2.lang_text) ans_count
FROM
  ch_ksk.t_vote v
  ,ch_ksk.t_any_lang_text t0
  ,ch_ksk.t_vote_send vs
  ,ch_ksk.t_vote_ques vq
  ,ch_ksk.t_vote_answ va
  ,ch_ksk.t_any_lang_text t1
  ,ch_ksk.t_vote_res vr
  ,ch_ksk.t_any_lang_text t2
  ,param
WHERE vs.t_vote_id = v.id
and vq.t_vote_id = v.id
and va.t_vote_ques_id = vq.id
and vr.t_vote_send_id = vs.id
and vr.t_vote_answ_id = va.id
and t0.t_language_id=param.lang
and t0.table_id=v.id
and t0.table_name='t_vote'
and t1.t_language_id=param.lang
and t1.table_id=vq.id
and t1.table_name='t_vote_ques'
and t2.t_language_id=param.lang
and t2.table_id=va.id
and t2.table_name='t_vote_answ'
and vs.t_relation_id in (select r.id from ch_ksk.t_relation r where r.t_user_id=param.user_id)
and v.id = param.vote_id
and vs.status=2
group by t1.lang_text
  ,t1.table_id
  ,t2.lang_text
order by t1.table_id;
            ]]>
        </cit_vote_res_rep>
        <vote_res_rep>
            <![CDATA[
               with param as (
  select
    cast(? as int) as lang
   ,cast(? as int) as ksk_id
   ,cast(? as int) as vote_id
 )
SELECT
   t1.lang_text question
  ,t1.table_id question_id
  ,t2.lang_text  answer
  ,count(t2.lang_text) ans_count
FROM
  ch_ksk.t_vote v
  ,ch_ksk.t_any_lang_text t0
  ,ch_ksk.t_vote_send vs
  ,ch_ksk.t_vote_ques vq
  ,ch_ksk.t_vote_answ va
  ,ch_ksk.t_any_lang_text t1
  ,ch_ksk.t_vote_res vr
  ,ch_ksk.t_any_lang_text t2
  ,param
WHERE vs.t_vote_id = v.id
and vq.t_vote_id = v.id
and va.t_vote_ques_id = vq.id
and vr.t_vote_send_id = vs.id
and vr.t_vote_answ_id = va.id
and t0.t_language_id=param.lang
and t0.table_id=v.id
and t0.table_name='t_vote'
and t1.t_language_id=param.lang
and t1.table_id=vq.id
and t1.table_name='t_vote_ques'
and t2.t_language_id=param.lang
and t2.table_id=va.id
and t2.table_name='t_vote_answ'
and v.t_ksk_id=param.ksk_id
and v.id = param.vote_id
and vs.status=2
group by t1.lang_text
  ,t1.table_id
  ,t2.lang_text
order by t1.table_id;
            ]]>
        </vote_res_rep>
        <vote_res_particular_question>
            with param as (
            select
            cast(? as int) as lang
            ,cast(? as int) as ques_id
            )
            select u.lastname||' '||u.firstname||' '||coalesce(u.middlename,'') respondent
            , t1.lang_text answer, va.id answ_id
            , vq.id ques_id, rel.t_flats_id, rel.t_user_id
            from param, ch_ksk.t_vote_res vr
            ,ch_ksk.t_vote_send vs
            ,ch_ksk.t_vote_answ va
            ,ch_ksk.t_vote_ques vq
            ,ch_ksk.t_relation rel
            ,ch_ksk.t_user u
            ,ch_ksk.t_any_lang_text t1
            where vr.t_vote_send_id=vs.id
            and vr.t_vote_answ_id=va.id
            and vs.t_vote_id=vq.t_vote_id
            and va.t_vote_ques_id=vq.id
            and vq.id=param.ques_id
            and rel.id=vs.t_relation_id
            and rel.t_user_id=u.id
            and t1.table_id=va.id
            and t1.table_name='t_vote_answ'
            and t1.t_language_id=param.lang
            order by answ_id
        </vote_res_particular_question>
        <vote_send_rel>
            <![CDATA[
               select id, t_user_id
                 from ch_ksk.t_relation
                where status=1
                  and t_flats_id=ANY(? ::int[])
                  and t_relation_type_id=2
            ]]>
        </vote_send_rel>
        <vote_send_rel_2>
            with params as (select /*'{237,276,96}'*/?::int[] as flats_array),
            all_owners as (select id, t_user_id, t_flats_id
            from ch_ksk.t_relation r, params p
            where r.status=1
            and r.t_flats_id=ANY(p.flats_array)
            and r.t_relation_type_id=2),
            one_liver as (select min(r.id) as id
            , r.t_flats_id as t_flats_id
            from ch_ksk.t_relation r, params p
            where r.status=1
            and r.t_flats_id=ANY(p.flats_array)
            and t_flats_id not IN(select t_flats_id from all_owners)
            and r.t_relation_type_id=1
            group by r.t_flats_id )
            select r.id as id, r.t_user_id as t_user_id, r.t_flats_id as t_flats_id
            from all_owners ao, ch_ksk.t_relation r
            where r.id in (select ao.id)
            union all
            select r.id as id, r.t_user_id as t_user_id, r.t_flats_id as t_flats_id
            from one_liver ol, ch_ksk.t_relation r
            where r.id in (select ol.id)
        </vote_send_rel_2>
        <vote_status>
            <![CDATA[
                select 0 as id, '...' as text
                union all
                select table_id as id, lang_text as text
                  from ch_ksk.t_any_lang_text
                 where table_name='t_vote_status'
                   and t_language_id=?
                 order by 1
            ]]>
        </vote_status>
        <vote_list>
            <![CDATA[
                with lang as (select cast(? as bigint) as id)
                select t1.id recid, ch_ksk.f_get_lang_text('t_vote', t1.id, lang.id) as descr,
                       ch_ksk.f_get_lang_text('t_vote', t1.id, 1) as descr_ru,
                       ch_ksk.f_get_lang_text('t_vote', t1.id, 2) as descr_kz,
                       t_user_id, date_start, date_end, status,
                       ch_ksk.f_get_lang_text('t_vote_status', t1.status, lang.id) as status_text
                  from ch_ksk.t_vote t1, lang
                 where coalesce(t1.t_ksk_id,1)=coalesce(cast(? as bigint), t1.t_ksk_id,1)
                   and coalesce(t1.t_org_id,1)=coalesce(cast(? as bigint), t1.t_org_id,1)
                   and coalesce(t1.date_start,'1111-01-01')>=coalesce(cast(? as date), t1.date_start,'1111-01-01')
                   and coalesce(t1.date_start,'1111-01-01')<=coalesce(cast(? as date), t1.date_start,'1111-01-01')
                   and coalesce(t1.status,1)=coalesce(cast(? as bigint), t1.status, 1)

            ]]>
        </vote_list>
        <vote_ques_list>
            <![CDATA[
                select t1.id recid,
                       ch_ksk.f_get_lang_text('t_vote_ques', t1.id, 1) as descr_ru,
                       ch_ksk.f_get_lang_text('t_vote_ques', t1.id, 2) as descr_kz,
                       n_radio
                  from ch_ksk.t_vote_ques t1
                 where t_vote_id=cast(? as bigint)
                order by 1
            ]]>
        </vote_ques_list>
        <vote_ques_answ>
            <![CDATA[
                select t1.id recid,
                       ch_ksk.f_get_lang_text('t_vote_answ', t1.id, 1) as descr_ru,
                       ch_ksk.f_get_lang_text('t_vote_answ', t1.id, 2) as descr_kz,
                       n_order
                  from ch_ksk.t_vote_answ t1
                 where t_vote_ques_id=cast(? as bigint)
                order by n_order
            ]]>
        </vote_ques_answ>
        <vote_send_relation>
            select vs.id, vs.t_relation_id, u.lastname||' '||u.firstname||' '||coalesce(u.middlename,'')s as name
            from ch_ksk.t_vote_send vs, ch_ksk.t_relation rel, ch_ksk.t_user u
            where vs.t_vote_id=?
            and rel.id=vs.t_relation_id
            and rel.t_user_id=u.id
            and vs.status=2
        </vote_send_relation>
        <vote_res_answ>
            select t_vote_answ_id
            from ch_ksk.t_vote_res
            where t_vote_send_id=?
        </vote_res_answ>
        <ksk_monitor_rep01>
            <![CDATA[
    with param as
  (select
      cast(? as int) as lang
      ,to_date(?, 'YYYY-MM-DD HH24:MI:SS') as date_begin
      ,to_date(?, 'YYYY-MM-DD HH24:MI:SS') as date_end
      ,cast(? as int) as ksk_id
    )
SELECT
   st.lang_text
   ,st.id
   ,count(*) rec_count
   ,'#76a7fa' as st_color  --blue
FROM
  ch_ksk.t_request r
  ,ch_ksk.t_flats f
  ,ch_ksk.t_building b
  ,ch_ksk.t_any_lang_text st
  ,param
WHERE
  r.t_flats_id = f.id
  and f.t_building_id = b.id
  and st.table_id = 1
  and st.table_name = 't_req_status'
  and st.t_language_id = param.lang
  and exists (select bk.id from ch_ksk.t_building_ksk bk where bk.t_building_id = b.id and bk.t_ksk_id = param.ksk_id)
  and r.dat_reg >= param.date_begin
  and r.dat_reg <= param.date_end
  group by st.lang_text,st.id
UNION ALL
SELECT
   st.lang_text
   ,st.id
   ,count(*) rec_count
   ,(case h.t_req_status_id when 4 then '#109618' when 8 then '#dc3912' end) as st_color
FROM
  ch_ksk.t_request r
  ,ch_ksk.t_oper_history h
  ,ch_ksk.t_flats f
  ,ch_ksk.t_building b
  ,ch_ksk.t_any_lang_text st
  ,param
WHERE
  r.t_flats_id = f.id
  and r.id = h.t_request_id
  and f.t_building_id = b.id
  and st.table_id = h.t_req_status_id
  and st.table_name = 't_req_status'
  and st.t_language_id = param.lang
  and h.t_req_status_id in (4,8)
  and not exists (select h2.id from ch_ksk.t_oper_history h2 where h2.t_request_id=r.id and h2.t_req_status_id=7 and h2.id>h.id)
  and exists (select bk.id from ch_ksk.t_building_ksk bk where bk.t_building_id = b.id and bk.t_ksk_id = param.ksk_id)
  and h.d_history >= param.date_begin
  and h.d_history <= param.date_end
 group by st.lang_text,st.id, h.t_req_status_id
UNION ALL
SELECT
   st.lang_text
   ,st.id
   ,count(*) rec_count
   ,'grey' as st_color
FROM
  ch_ksk.t_request r
  ,ch_ksk.t_oper_history h
  ,ch_ksk.t_flats f
  ,ch_ksk.t_building b
  ,ch_ksk.t_any_lang_text st
  ,param
WHERE
  r.t_flats_id = f.id
  and r.id = h.t_request_id
  and f.t_building_id = b.id
  and st.table_id = h.t_req_status_id
  and st.table_name = 't_req_status'
  and st.t_language_id = param.lang
  and h.t_req_status_id in (3)
  and not exists (select h2.id from ch_ksk.t_oper_history h2 where h2.t_request_id=r.id and h2.t_req_status_id=7 and h2.id>h.id)
  and exists (select bk.id from ch_ksk.t_building_ksk bk where bk.t_building_id = b.id and bk.t_ksk_id = param.ksk_id)
  and h.d_history >= param.date_begin
  and h.d_history <= param.date_end
 group by st.lang_text,st.id
ORDER BY 2
            ]]>
        </ksk_monitor_rep01>
        <ksk_monitor_rep02>
            <![CDATA[
    with param as
  (select
      cast(? as int) as lang
      ,to_date(?, 'YYYY-MM-DD HH24:MI:SS') as date_begin
      ,to_date(?, 'YYYY-MM-DD HH24:MI:SS') as date_end
      ,cast(? as int) as ksk_id
    )
SELECT
   st.lang_text
   ,st.id
   ,count(*) rec_count
   ,'#76a7fa' as st_color  --blue
FROM
  ch_ksk.t_request r
  ,ch_ksk.t_flats f
  ,ch_ksk.t_building b
  ,ch_ksk.t_any_lang_text st
  ,param
WHERE
  r.t_flats_id = f.id
  and f.t_building_id = b.id
  and st.table_id = 1
  and st.table_name = 't_req_status'
  and st.t_language_id = param.lang
  and exists (select bk.id from ch_ksk.t_building_ksk bk where bk.t_building_id = b.id and bk.t_ksk_id = param.ksk_id)
  and r.dat_reg >= param.date_begin
  and r.dat_reg <= param.date_end
  group by st.lang_text,st.id
UNION ALL
SELECT
   st.lang_text
   ,st.id
   ,count(*) rec_count
   ,(case h.t_req_status_id when 4 then '#109618' when 8 then '#dc3912' end) as st_color
FROM
  ch_ksk.t_request r
  ,ch_ksk.t_oper_history h
  ,ch_ksk.t_flats f
  ,ch_ksk.t_building b
  ,ch_ksk.t_any_lang_text st
  ,param
WHERE
  r.t_flats_id = f.id
  and r.id = h.t_request_id
  and f.t_building_id = b.id
  and st.table_id = h.t_req_status_id
  and st.table_name = 't_req_status'
  and st.t_language_id = param.lang
  and h.t_req_status_id in (4,8)
  and not exists (select h2.id from ch_ksk.t_oper_history h2 where h2.t_request_id=r.id and h2.t_req_status_id=7 and h2.id>h.id)
  and exists (select bk.id from ch_ksk.t_building_ksk bk where bk.t_building_id = b.id and bk.t_ksk_id = param.ksk_id)
  and h.d_history >= param.date_begin
  and h.d_history <= param.date_end
 group by st.lang_text,st.id, h.t_req_status_id
UNION ALL
SELECT
   st.lang_text
   ,st.id
   ,count(*) rec_count
   ,'grey' as st_color
FROM
  ch_ksk.t_request r
  ,ch_ksk.t_oper_history h
  ,ch_ksk.t_flats f
  ,ch_ksk.t_building b
  ,ch_ksk.t_any_lang_text st
  ,param
WHERE
  r.t_flats_id = f.id
  and r.id = h.t_request_id
  and f.t_building_id = b.id
  and st.table_id = h.t_req_status_id
  and st.table_name = 't_req_status'
  and st.t_language_id = param.lang
  and h.t_req_status_id in (3)
  and not exists (select h2.id from ch_ksk.t_oper_history h2 where h2.t_request_id=r.id and h2.t_req_status_id=7 and h2.id>h.id)
  and exists (select bk.id from ch_ksk.t_building_ksk bk where bk.t_building_id = b.id and bk.t_ksk_id = param.ksk_id)
  and h.d_history >= param.date_begin
  and h.d_history <= param.date_end
 group by st.lang_text,st.id
ORDER BY 2
            ]]>
        </ksk_monitor_rep02>
    <get_ksk_counter_val>
        <![CDATA[
with date_f as (select to_date(?, 'yyyy-mm-dd') as date_f)
    select distinct	tdv.doc_value as dev_addr,
             (ch_ksk.f_street( cast (ts.id as int),cast (tls.t_language_id as int))
        ||' '|| tb.building_num
        ||(select  coalesce( '/'||coalesce(tb.build_subunit,null),'' ) )
        ||(select ', '||tlt.lang_text||' ' from ch_ksk.t_any_lang_text tlt where tlt.table_id=1 and tlt.table_name='t_flat_type' and tlt.t_language_id=cast (tls.t_language_id as int))||' '|| tf.flat_num
        ||(select  coalesce( '/'||coalesce(tf.flat_subunit,null),'' ) )) as addressname,
    (select (cast(tfd1.doc_value as bigint) * cast(tfd2.doc_value as bigint)) from ch_ksk.t_flat_doc_value tfd1,  ch_ksk.t_flat_doc_type tft1, ch_ksk.t_flat_doc_value tfd2,  ch_ksk.t_flat_doc_type tft2
    where tfd1.dev_addr = tdv.dev_addr
     and tfd1.cur_date=df.date_f
     and tfd1.status=1
     and tfd1.fdt_id=tft1.id
     and tft1.code='VALUE'
     and tfd1.tfd_id=(select tfd.tfd_id from ch_ksk.t_flat_doc_value tfd,  ch_ksk.t_flat_doc_type tft
     where tfd.dev_addr=tdv.dev_addr
     and tr.t_flats_id=tfd.t_flat_id
     and tfd.cur_date=df.date_f
     and tfd.status=1
     and tfd.fdt_id=tft.id
     and tft.code='WTR_TYPE'
     and tfd.doc_value='1')
     and tfd2.dev_addr = tdv.dev_addr
     and tfd2.cur_date=df.date_f
     and tfd2.status=1
     and tfd2.fdt_id=tft2.id
     and tft2.code='COEFICIENT'
     and tfd1.tfd_id=tfd2.tfd_id
     ) as h_wtr,
      (select (cast(tfd1.doc_value as bigint) * cast(tfd2.doc_value as bigint)) from ch_ksk.t_flat_doc_value tfd1,  ch_ksk.t_flat_doc_type tft1, ch_ksk.t_flat_doc_value tfd2,  ch_ksk.t_flat_doc_type tft2
    where tfd1.dev_addr = tdv.dev_addr
     and tfd1.cur_date=df.date_f
     and tfd1.status=1
     and tfd1.fdt_id=tft1.id
     and tft1.code='VALUE'
     and tfd1.tfd_id=(select tfd.tfd_id from ch_ksk.t_flat_doc_value tfd,  ch_ksk.t_flat_doc_type tft
     where tfd.dev_addr=tdv.dev_addr
     and tr.t_flats_id=tfd.t_flat_id
     and tfd.cur_date=df.date_f
     and tfd.status=1
     and tfd.fdt_id=tft.id
     and tft.code='WTR_TYPE'
     and tfd.doc_value='0')
     and tfd2.dev_addr = tdv.dev_addr
     and tfd2.cur_date=df.date_f
     and tfd2.status=1
     and tfd2.fdt_id=tft2.id
     and tft2.code='COEFICIENT'
     and tfd1.tfd_id=tfd2.tfd_id
     ) as c_wtr,
      (select (cast(tfd1.doc_value as bigint) * cast(tfd2.doc_value as bigint)) from ch_ksk.t_flat_doc_value tfd1,  ch_ksk.t_flat_doc_type tft1, ch_ksk.t_flat_doc_value tfd2,  ch_ksk.t_flat_doc_type tft2
    where tfd1.dev_addr = tdv.dev_addr
     and tfd1.cur_date=df.date_f
     and tfd1.status=1
     and tfd1.fdt_id=tft1.id
     and tft1.code='VALUE'
     and tfd1.tfd_id=(select tfd.tfd_id from ch_ksk.t_flat_doc_value tfd,  ch_ksk.t_flat_doc_type tft
     where tfd.dev_addr=tdv.dev_addr
     and tr.t_flats_id=tfd.t_flat_id
     and tfd.cur_date=df.date_f
     and tfd.status=1
     and tfd.fdt_id=tft.id
     and tft.code='TYPE'
     and tfd.doc_value='0')
     and tfd2.dev_addr = tdv.dev_addr
     and tfd2.cur_date=df.date_f
     and tfd2.status=1
     and tfd2.fdt_id=tft2.id
     and tft2.code='COEFICIENT'
     and tfd1.tfd_id=tfd2.tfd_id
     ) as elec,
     (select tfd.doc_value from ch_ksk.t_flat_doc_value tfd,  ch_ksk.t_flat_doc_type tft
    where tfd.dev_addr=tdv.dev_addr
     and tfd.status=1
     and tfd.cur_date=df.date_f
     and tfd.fdt_id=tft.id
     and tft.code='TOTAE1'
     and tr.t_flats_id=tfd.t_flat_id  ) as tot1,
     (select tfd.doc_value from ch_ksk.t_flat_doc_value tfd,  ch_ksk.t_flat_doc_type tft
    where tfd.dev_addr=tdv.dev_addr
     and tfd.status=1
     and tfd.cur_date=df.date_f
     and tfd.fdt_id=tft.id
     and tft.code='TOTAE2'
     and tr.t_flats_id=tfd.t_flat_id  ) as tot2,
      (select tfd.doc_value from ch_ksk.t_flat_doc_value tfd,  ch_ksk.t_flat_doc_type tft
    where tfd.dev_addr=tdv.dev_addr
     and tfd.status=1
     and tfd.cur_date=df.date_f
     and tfd.fdt_id=tft.id
     and tft.code='TOTAE3'
     and tr.t_flats_id=tfd.t_flat_id  ) as tot3
from 	date_f df,
    ch_ksk.t_relation tr,
    ch_ksk.t_flat_doc_value tdv,
    ch_ksk.t_flat_doc_type tdt,
    ch_ksk.t_flats tf,
    ch_ksk.t_building tb,
    ch_ksk.t_street ts,
    ch_ksk.t_city tc,
    ch_ksk.t_lang_street tls,
    ch_ksk.t_street_type tst
  where  tdv.t_flat_id=tf.id
    and tdv.status=1
    and tdv.cur_date=df.date_f
    and tdv.fdt_id=tdt.id
    and tdt.code='dev_addr'
    and tdt.status=1
    and tb.id=tf.t_building_id
    and tf.id=tr.t_flats_id
    and tr.date_end is null
    and tr.status=1
    and tb.t_street_id=ts.id
    and ts.id=tls.t_street_id
    and tls.t_language_id=1
    and ts.street_type_id=tst.id
    and tc.id=ts.t_city_id
    and tdv.dev_addr='019D3644'
        ]]>
    </get_ksk_counter_val>
   <get_counter_val>
            <![CDATA[
 with date_f as (select to_date(?, 'yyyy-mm-dd') as date_f, ? as user_id)
        select distinct 	tdv.doc_value as dev_addr,
                 (ch_ksk.f_street( cast (ts.id as int),cast (tls.t_language_id as int))
		    ||' '|| tb.building_num
		    ||(select  coalesce( '/'||coalesce(tb.build_subunit,null),'' ) )
		    ||(select ', '||tlt.lang_text||' ' from ch_ksk.t_any_lang_text tlt where tlt.table_id=1 and tlt.table_name='t_flat_type' and tlt.t_language_id=cast (tls.t_language_id as int))||' '|| tf.flat_num
		    ||(select  coalesce( '/'||coalesce(tf.flat_subunit,null),'' ) )) as addressname,
		(select (cast(tfd1.doc_value as bigint) * cast(tfd2.doc_value as bigint)) from ch_ksk.t_flat_doc_value tfd1,  ch_ksk.t_flat_doc_type tft1, ch_ksk.t_flat_doc_value tfd2,  ch_ksk.t_flat_doc_type tft2
		where tfd1.dev_addr = tdv.dev_addr
		 and tfd1.cur_date=df.date_f
		 and tfd1.status=1
		 and tfd1.fdt_id=tft1.id
		 and tft1.code='VALUE'
		 and tfd1.tfd_id=(select tfd.tfd_id from ch_ksk.t_flat_doc_value tfd,  ch_ksk.t_flat_doc_type tft
		 where tfd.dev_addr=tdv.dev_addr
		 and tr.t_flats_id=tfd.t_flat_id
		 and tfd.cur_date=df.date_f
		 and tfd.status=1
		 and tfd.fdt_id=tft.id
		 and tft.code='WTR_TYPE'
		 and tfd.doc_value='1')
		 and tfd2.dev_addr = tdv.dev_addr
		 and tfd2.cur_date=df.date_f
		 and tfd2.status=1
		 and tfd2.fdt_id=tft2.id
		 and tft2.code='COEFICIENT'
		 and tfd1.tfd_id=tfd2.tfd_id
		 ) as h_wtr,
		  (select (cast(tfd1.doc_value as bigint) * cast(tfd2.doc_value as bigint)) from ch_ksk.t_flat_doc_value tfd1,  ch_ksk.t_flat_doc_type tft1, ch_ksk.t_flat_doc_value tfd2,  ch_ksk.t_flat_doc_type tft2
		where tfd1.dev_addr = tdv.dev_addr
		 and tfd1.cur_date=df.date_f
		 and tfd1.status=1
		 and tfd1.fdt_id=tft1.id
		 and tft1.code='VALUE'
		 and tfd1.tfd_id=(select tfd.tfd_id from ch_ksk.t_flat_doc_value tfd,  ch_ksk.t_flat_doc_type tft
		 where tfd.dev_addr=tdv.dev_addr
		 and tr.t_flats_id=tfd.t_flat_id
		 and tfd.cur_date=df.date_f
		 and tfd.status=1
		 and tfd.fdt_id=tft.id
		 and tft.code='WTR_TYPE'
		 and tfd.doc_value='0')
		 and tfd2.dev_addr = tdv.dev_addr
		 and tfd2.cur_date=df.date_f
		 and tfd2.status=1
		 and tfd2.fdt_id=tft2.id
		 and tft2.code='COEFICIENT'
		 and tfd1.tfd_id=tfd2.tfd_id
		 ) as c_wtr,
		  (select (cast(tfd1.doc_value as bigint) * cast(tfd2.doc_value as bigint)) from ch_ksk.t_flat_doc_value tfd1,  ch_ksk.t_flat_doc_type tft1, ch_ksk.t_flat_doc_value tfd2,  ch_ksk.t_flat_doc_type tft2
		where tfd1.dev_addr = tdv.dev_addr
		 and tfd1.cur_date=df.date_f
		 and tfd1.status=1
		 and tfd1.fdt_id=tft1.id
		 and tft1.code='VALUE'
		 and tfd1.tfd_id=(select tfd.tfd_id from ch_ksk.t_flat_doc_value tfd,  ch_ksk.t_flat_doc_type tft
		 where tfd.dev_addr=tdv.dev_addr
		 and tr.t_flats_id=tfd.t_flat_id
		 and tfd.cur_date=df.date_f
		 and tfd.status=1
		 and tfd.fdt_id=tft.id
		 and tft.code='TYPE'
		 and tfd.doc_value='0')
		 and tfd2.dev_addr = tdv.dev_addr
		 and tfd2.cur_date=df.date_f
		 and tfd2.status=1
		 and tfd2.fdt_id=tft2.id
		 and tft2.code='COEFICIENT'
		 and tfd1.tfd_id=tfd2.tfd_id
		 ) as elec,
		 (select tfd.doc_value from ch_ksk.t_flat_doc_value tfd,  ch_ksk.t_flat_doc_type tft
		where tfd.dev_addr=tdv.dev_addr
		 and tfd.status=1
		 and tfd.cur_date=df.date_f
		 and tfd.fdt_id=tft.id
		 and tft.code='TOTAE1'
		 and tr.t_flats_id=tfd.t_flat_id  ) as tot1,
		 (select tfd.doc_value from ch_ksk.t_flat_doc_value tfd,  ch_ksk.t_flat_doc_type tft
		where tfd.dev_addr=tdv.dev_addr
		 and tfd.status=1
		 and tfd.cur_date=df.date_f
		 and tfd.fdt_id=tft.id
		 and tft.code='TOTAE2'
		 and tr.t_flats_id=tfd.t_flat_id  ) as tot2,
		  (select tfd.doc_value from ch_ksk.t_flat_doc_value tfd,  ch_ksk.t_flat_doc_type tft
		where tfd.dev_addr=tdv.dev_addr
		 and tfd.status=1
		 and tfd.cur_date=df.date_f
		 and tfd.fdt_id=tft.id
		 and tft.code='TOTAE3'
		 and tr.t_flats_id=tfd.t_flat_id  ) as tot3,
		 tr.t_user_id=df.user_id as user_flag
	from 	date_f df,
		ch_ksk.t_relation tr,
		ch_ksk.t_flat_doc_value tdv,
		ch_ksk.t_flat_doc_type tdt,
		ch_ksk.t_flats tf,
		ch_ksk.t_building tb,
		ch_ksk.t_street ts,
		ch_ksk.t_city tc,
		ch_ksk.t_lang_street tls,
		ch_ksk.t_street_type tst
	  where tdv.t_flat_id=tf.id
	    and tdv.status=1
	    and tdv.cur_date=df.date_f
	    and tdv.fdt_id=tdt.id
	    and tdt.code='dev_addr'
	    and tdt.status=1
	    and tb.id=tf.t_building_id
        and tf.id=tr.t_flats_id
        and tr.date_end is null
        and tr.status=1
        and case when exists ( select tr2.id from ch_ksk.t_relation tr2
				where  tr2.t_flats_id in ( select tdv2.t_flat_id
					from ch_ksk.t_flat_doc_value tdv2 where  tdv2.status=1)
						and tr2.t_user_id=df.user_id and tr2.status=1)
						then  tr.t_user_id=df.user_id
			else tdv.dev_addr='019D3644' end
        and tb.t_street_id=ts.id
        and ts.id=tls.t_street_id
        and tls.t_language_id=1
        and ts.street_type_id=tst.id
        and tc.id=ts.t_city_id
            ]]>
        </get_counter_val>
        <get_stat_ksk>
            <![CDATA[
    select lang_text as text,
           col
      from
            (select t2.status, count(*) col
               from ch_ksk.t_ksk_doc_value t1, ch_ksk.t_ksk t2
              where t1.kdt_id=5
                and t1.doc_value=?
                and t1.t_ksk_id=t2.id
              group by t2.status) as temp1, ch_ksk.t_any_lang_text t3
     where temp1.status=t3.table_id
       and t3.table_name='t_ksk_status'
       and t3.t_language_id=1
            ]]>
        </get_stat_ksk>
        <get_stat_reqs>
            <![CDATA[
        select lang_text as text, count(stat_id) as col
        from
        (select (case t_req_status_id when 5 then 6 else t_req_status_id end) as stat_id, 1 as col
        from ch_ksk.t_request t1, ch_ksk.t_flats t2, ch_ksk.t_building_ksk t3, ch_ksk.t_ksk_doc_value t4
        where t1.t_flats_id=t2.id
        and t2.t_building_id=t3.t_building_id
        and t4.kdt_id=5
        and t4.doc_value=t4.doc_value
        and t4.t_ksk_id=t3.t_ksk_id
        ) as temp1, ch_ksk.t_any_lang_text t5
        where t5.table_name='t_req_status'
        and t5.t_language_id=1
        and t5.table_id=temp1.stat_id
        group by lang_text
            ]]>
        </get_stat_reqs>
        <get_file_list_ksk_for_org>
            <![CDATA[
SELECT tdv.id as recid, tdv.doc_value, ch_ksk.f_get_lang_text('t_ksk_doc_type',tdv.kdt_id, lang.id) as sdoc_type,
        fl.file_id, fl.file_name, fl.creation_date,
        ch_ksk.f_get_lang_text('t_ksk', tdv.t_ksk_id, lang.id) as ksk_name
  FROM ch_ksk.t_language lang, ch_ksk.t_ksk_doc_value as tdv
       LEFT JOIN auction.files fl on fl.req_id=tdv.id and fl.table_name='t_ksk_doc_value'
 WHERE lang.id=cast (? as bigint)
   AND tdv.kdt_id in (select tdt.id from ch_ksk.t_ksk_doc_type as tdt where tdt.sys_type=2)
   AND tdv.status = 2
   AND tdv.t_ksk_id in (select t_ksk_id from ch_ksk.t_ksk_doc_value
                         where kdt_id=5
                           and doc_value in (select doc_value
                                               from ch_ksk.t_org_position t1, ch_ksk.t_org_doc_value t2
                                              where t1.t_user_id=cast (? as int)
                                                and coalesce(t1.date_end, CURRENT_DATE)>= CURRENT_DATE
                                                and t2.t_org_id=t1.t_org_id)
                        )
   AND fl.creation_date>=coalesce(cast(? as date), fl.creation_date)
   AND fl.creation_date<=coalesce(cast(? as timestamp), fl.creation_date)
   AND tdv.kdt_id=coalesce(cast (? as int), tdv.kdt_id)
 order by 1
]]>
        </get_file_list_ksk_for_org>
        <kskcitizens>
            <![CDATA[
            select distinct tu.id as recid, trim(tu.lastname)||' '||trim(tu.firstname)||coalesce(' '||tu.middlename,'') as fio,
                    tu.mobile_phone||(case tu.home_phone when null then '' else ','||tu.home_phone end) as phone,
                    ch_ksk.f_street(cast (ts.id as int), cast (lng.id as int)) as street,
                    tb.building_num||coalesce('/'||tb.build_subunit, '') as building,
                    tf.flat_num||coalesce('/'||tf.flat_subunit, '') as flat,
                    ch_ksk.f_get_lang_text('t_relation_status', tr.status, lng.id) as status,
                    ch_ksk.f_get_lang_text('t_relation_type', tr.t_relation_type_id, lng.id) as relation
               from ch_ksk.t_language lng, ch_ksk.t_relation tr, ch_ksk.t_flats tf, ch_ksk.t_building tb, ch_ksk.t_street ts, ch_ksk.t_building_ksk tbk, ch_ksk.t_user tu
              where lng.id=?
                and tbk.t_ksk_id=?
                and tr.t_flats_id=tf.id
                and tf.t_building_id=tb.id
                and tb.t_street_id=ts.id
                and tbk.t_building_id=tb.id
                and tr.t_user_id=tu.id
                AND tb.t_street_id=coalesce(cast(? as float), tb.t_street_id)
                AND tb.building_num=coalesce(cast(? as float), tb.building_num)
                AND coalesce(tb.build_subunit, '')=coalesce(?, tb.build_subunit, '')
              order by 2,3
               ]]>
        </kskcitizens>
        <citmyksk>
            <![CDATA[
            select distinct tb.id as recid,
                    ch_ksk.f_street(cast (ts.id as int), cast (lng.id as int))||' '||tb.building_num||coalesce('/'||tb.build_subunit, '') as my_addr,
                    ch_ksk.f_get_lang_text('t_ksk', tbk.t_ksk_id, lng.id) as ksk_name,
                    coalesce(ch_ksk.f_get_doc_value(tbk.t_ksk_id, lng.id, 'pred'),'') as ksk_pred,
                    ch_ksk.f_get_lang_text('t_city', ts.t_city_id, lng.id)||', '||coalesce(ch_ksk.f_get_doc_value(tbk.t_ksk_id, lng.id, 'addr'),'') as ksk_addr,
                    coalesce(ch_ksk.f_get_doc_value(tbk.t_ksk_id, lng.id, 'phone'),'') as ksk_phone,
                    tbk.t_ksk_id
              from ch_ksk.t_language lng, ch_ksk.t_relation tr, ch_ksk.t_flats tf, ch_ksk.t_building tb, ch_ksk.t_street ts, ch_ksk.t_building_ksk tbk
             where lng.id=?
               and tr.t_user_id=?
               and tr.t_flats_id=tf.id
               and tf.t_building_id=tb.id
               and tb.t_street_id=ts.id
               and tbk.t_building_id=tb.id
               and tr.status=1
               and tbk.status=1
             order by 2, 3
               ]]>
        </citmyksk>
        <citmykskemps>
            <![CDATA[
                select u.lastname,u.firstname,u.middlename,
                (select tlt.lang_text from ch_ksk.t_any_lang_text tlt where tlt.table_id=pt.id and tlt.table_name='t_position_types' and tlt.t_language_id=lng.id) as position
                  from ch_ksk.t_position p,
                       ch_ksk.t_user u,
                       ch_ksk.t_position_types pt,
                       ch_ksk.t_language lng
                 where p.t_ksk_id=?
                   and p.t_user_id=u.id
                   and p.t_position_types_id=pt.id
                   and p.date_end is null
                   and pt.code not in ('su','pr','mu','up')
                   and lng.id=?
               ]]>
        </citmykskemps>
        <check_emps>
            <![CDATA[
            with param as (select cast(? as bigint) as usr)
select
  (select count(*)
    from ch_ksk.t_ksk k,
       ch_ksk.t_position p,
       ch_ksk.t_position_types pt
    where k.status=1
      and k.id=p.t_ksk_id
      and p.t_position_types_id = pt.id
      and (p.date_end is null or p.date_end >= CURRENT_DATE )
      and p.t_user_id= param.usr) as ksk_emp
 ,(select count(*)
    from ch_ksk.t_ksk tk,
       ch_ksk.t_moderators m,
       ch_ksk.t_moderator_ksk mk
    where tk.status=1
      and m.status=1
      and mk.status=1
      and tk.id = mk.t_ksk_id
      and m.id = mk.t_moderators_id
      and m.t_user_id = param.usr) as moder_emp
  ,( select count(*)
    from ch_ksk.t_company k,
       ch_ksk.t_comp_position p,
       ch_ksk.t_comp_position_type pt
    where k.status=1
      and k.id=p.comp_id
      and p.comp_pos_type_id = pt.id
      and (p.date_end is null or p.date_end >= CURRENT_DATE )
      and p.t_user_id= param.usr
  ) as company_emp
,(select count(*)
    from ch_ksk.t_org t0,
       ch_ksk.t_org_position t1
    where t0.t_org_status_id=1
      and t0.id=t1.t_org_id
      and (t1.date_end is null or t1.date_end >= CURRENT_DATE)
      and t1.t_user_id= param.usr) as org_emp
from param
            ]]>
        </check_emps>
        <ownership>
            <![CDATA[
    select tto.id, tlt.lang_text as text
    from ch_ksk.t_any_lang_text tlt,
         ch_ksk.t_ksk_type_ownership tto
    where tlt.table_name='t_ksk_type_ownership'
      and tlt.table_id=tto.id
      and tlt.t_language_id=?
            ]]>
        </ownership>
        <checkIfPswExists>
            select count(1) from ch_ksk.t_user where id=? and password is not null
        </checkIfPswExists>
        <checkUser>
            select  tu.usermail1 as email, tu.sn_pass as exst from ch_ksk.t_user tu where tu.usermail1=lower(?)
        </checkUser>
        <check_user_add>
            select count(1) as connum from ch_ksk.t_relation where id=? and t_user_id=? and  t_flats_id=? and status=2
        </check_user_add>
        <get_sysuser_posID>
            select max(id) as  id from ch_ksk.t_position where t_user_id = ?

        </get_sysuser_posID>
        <get_reg_status_id>
            select t_req_status_id as id from ch_ksk.t_request where id=?
        </get_reg_status_id>
        <checkConnection>
            select count(1) from ch_ksk.t_flats tf, ch_ksk.t_building tb, ch_ksk.t_building_ksk tbk, ch_ksk.t_ksk tk
            where tf.t_building_id = tb.id
            and tb.id=tbk.t_building_id
            and tbk.status not in (4)
            and tbk.t_ksk_id=tk.id
            and tk.status=1
            and tf.id=?
        </checkConnection>
        <rep_line_val>
            <![CDATA[
SELECT trl.code as name, 'text' as type, ch_ksk.f_get_lang_text('t_rep_line', trl.id, lang.id) as caption,
       trl.ftype, trl.required, trv.s_value, tra.n_max_len
  FROM ch_ksk.t_reports tr, ch_ksk.t_rep_line_val trv, ch_ksk.t_rep_articles tra, ch_ksk.t_rep_line trl, ch_ksk.t_language lang
 WHERE tra.t_rep_line_id=trl.id
   AND tra.t_rep_type_id=tr.t_rep_type_id
   AND tr.id=?
   AND trv.t_reports_id=tr.id
   AND trv.t_rep_line_id=tra.t_rep_line_id
   AND lang.id=?
ORDER BY n_order
            ]]>
        </rep_line_val>
        <ksk_address>
            with params as (select cast(? as text) as mail)
            SELECT
            R.id as recid,
            al.lang_text || ' ' || ls.description as street,
            b.building_num,
            b.build_subunit,
            f.flat_num
            ,u.usermail1
            ,u.lastname
            ,u.firstname
            ,u.middlename
            ,u.birthday
            ,u.mobile_phone
            ,u.home_phone
            ,u.user_activated_to as reg_date
            FROM
            ch_ksk.t_building b,
            ch_ksk.t_street s,
            ch_ksk.t_street_type st,
            ch_ksk.t_lang_street ls,
            ch_ksk.t_any_lang_text al
            ,ch_ksk.t_flats f
            ,ch_ksk.t_user u
            ,ch_ksk.t_relation r
            ,params
            WHERE
            b.t_street_id = s.id AND
            ls.t_street_id = s.id AND
            s.street_type_id = st.id AND
            al.table_id = st.id AND
            al.table_name = 't_street_type' AND
            al.t_language_id = 1 AND
            ls.t_language_id = 1
            and f.t_building_id = b.id
            and r.t_user_id = u.id
            and r.t_flats_id = f.id
            and user_activated_to between to_date(?,'DD-MM-YYYY') and to_date(?,'DD-MM-YYYY')
            and (select case  params.mail  when '1' then '1'='1' else lower(u.usermail1) like lower(params.mail) end)
            and u.id not in (4, 6, 8, 13, 14, 26, 63, 72, 300, 321, 7 ,51)
            and not exists (select 1 from ch_ksk.t_building_ksk bk where bk.t_building_id = b.id)
            ORDER BY
            u.id, ls.description ASC;
        </ksk_address>
        <ksk_request>

            with params as (select cast(? as text) as mail)
            SELECT
            r.id as numrec,
            r.id as recid,
            u.lastname,
            u.firstname,
            u.middlename,
            u.usermail1,
            u.mobile_phone,
            u.home_phone,
            l.description,
            b.building_num,
            b.build_subunit,
            f.flat_num,
            r.note,
            st.lang_text,
            r.t_req_status_id,
            r.dat_reg,
            r.dead_line,
            r.dat_close,
            r.rate_val,
            r.rate_text
            ,(select k.id ||',  '|| k.description from ch_ksk.t_building_ksk bk, ch_ksk.t_ksk k where bk.t_ksk_id = k.id and bk.t_building_id = b.id)

            FROM
            ch_ksk.t_request r,
            ch_ksk.t_flats f,
            ch_ksk.t_user u,
            ch_ksk.t_building b,
            ch_ksk.t_street s,
            ch_ksk.t_lang_street l,
            ch_ksk.t_any_lang_text st,
            params
            WHERE
            r.t_flats_id = f.id AND
            r.t_user_id = u.id AND
            f.t_building_id = b.id AND
            b.t_street_id = s.id AND
            l.t_street_id = s.id AND
            st.table_id = r.t_req_status_id AND
            l.t_language_id = 1 AND
            st.table_name = 't_req_status' AND
            st.t_language_id = 1
            and u.user_status_id = 1
            and dat_reg between to_date(?,'DD-MM-YYYY') and to_date(?,'DD-MM-YYYY')
            and (select case  params.mail  when '1' then '1'='1' else lower(u.usermail1) like lower(params.mail) end)
            and r.t_user_id not in (4, 6, 8, 13, 14, 26, 63, 72, 300, 321, 7 ,51)
            and not exists (select bk.id from ch_ksk.t_building_ksk bk where bk.t_building_id = b.id)
            ORDER BY
            r.dat_reg ASC,
            r.t_flats_id ASC;
        </ksk_request>
        <ksk_emps_by_code>
            <![CDATA[
SELECT tp.id,tu.lastname||' '||tu.firstname||' '||coalesce(tu.middlename,'') as text
FROM ch_ksk.t_position tp, ch_ksk.t_user tu, ch_ksk.t_position_types pt
WHERE tp.t_user_id=tu.id
  AND tp.t_position_types_id=pt.id
  AND pt.code=cast(? as text)
  AND tu.user_status_id=cast(? as int)
  AND tp.t_ksk_id=cast(? as int)
  and tp.date_end is null
 ORDER by 2
            ]]>
        </ksk_emps_by_code>
        <get_any_lang_text>
            <![CDATA[
SELECT ch_ksk.f_get_lang_text(cast(? as text), cast(? as int), cast(? as int)) as text
            ]]>
        </get_any_lang_text>
        <rep_arcticles>
            <![CDATA[
SELECT trl.code as name, 'text' as type, ch_ksk.f_get_lang_text('t_rep_line', trl.id, lang.id) as caption,
       trl.ftype, trl.required, trl.disab, tra.n_max_len
  FROM ch_ksk.t_rep_articles tra, ch_ksk.t_rep_line trl, ch_ksk.t_language lang
 WHERE tra.t_rep_line_id=trl.id
   AND tra.t_rep_type_id=?
   AND lang.id=?
 ORDER BY n_order
            ]]>
        </rep_arcticles>
        <reps_list>
            <![CDATA[
with params as (select ?::float as numdoc, ?::date as datbeg, ?::timestamp as datend,
	            ?::float as rep_type,?::float as lang_id, ?::bigint as ksk_id,
	            ?::date as per_beg, ?::date as per_end, ?::bigint as t_build)
SELECT trep.id as recid, trep.date_reg,trep.t_build,
ch_ksk.f_get_lang_text('t_rep_type', trep.t_rep_type_id, lang.id) as rep_type,
(select tu.lastname||' '||tu.firstname||' '||coalesce(tu.middlename,'') from ch_ksk.t_user tu where tu.id=trep.t_user_id) as creator,
ch_ksk.f_get_lang_text('t_rep_status', trep.t_rep_status_id, lang.id) as rep_stat,
(SELECT tu.lastname||' '||tu.firstname||coalesce(' '||tu.middlename,'')
  FROM ch_ksk.t_position tp, ch_ksk.t_user tu
 WHERE tp.t_user_id=tu.id
   AND tp.id=trep.t_ruk) as ruk_name,
(SELECT tu.lastname||' '||tu.firstname||coalesce(' '||tu.middlename,'')
  FROM ch_ksk.t_position tp, ch_ksk.t_user tu
 WHERE tp.t_user_id=tu.id
   AND tp.id=trep.t_buk) as buk_name,
      (select
(select tlt.lang_text from ch_ksk.t_any_lang_text tlt where tlt.table_id=tc.id and tlt.table_name='t_city' and tlt.t_language_id=tls.t_language_id)
||', '|| ch_ksk.f_street( cast (ts.id as int),cast (tls.t_language_id as int))
||' '|| tb.building_num
||(select  coalesce( '/'||coalesce(tb.build_subunit,null),'' ) )
from ch_ksk.t_street ts, ch_ksk.t_building tb, ch_ksk.t_building_ksk tbk, ch_ksk.t_lang_street tls, ch_ksk.t_ksk tk, ch_ksk.t_city tc
where tls.t_street_id=ts.id
and tb.t_street_id=ts.id
and tbk.t_building_id=tb.id
and tbk.t_ksk_id=tk.id
and tk.status=1
and tbk.status=1
and ts.t_city_id=tc.id
and tls.t_language_id=lang.id
and tb.id=trep.t_build) as build_name
   , trep.t_rep_type_id
   , trep.t_ruk
   , trep.t_buk
   , trep.t_rep_status_id
   ,(select npublish from ch_ksk.t_rep_type where id=trep.t_rep_type_id) as npublish
   , trep.date_start
   , trep.date_end
  FROM ch_ksk.t_reports trep, ch_ksk.t_language lang, params
 WHERE trep.id=coalesce(params.numdoc, trep.id)
   AND trep.date_reg>=coalesce(params.datbeg, trep.date_reg)
   AND trep.date_reg<=coalesce(params.datend, trep.date_reg)
   AND trep.t_rep_type_id=coalesce(params.rep_type, trep.t_rep_type_id)
   AND lang.id=params.lang_id
   AND trep.t_ksk_id=params.ksk_id
   AND coalesce(trep.date_start,'1111-01-01')>=coalesce(params.per_beg, trep.date_start,'1111-01-01')
   AND coalesce(trep.date_end,'1111-01-01')<=coalesce(params.per_end, trep.date_end,'1111-01-01')
   AND coalesce(trep.t_build,'111') = (coalesce(params.t_build,trep.t_build,'111'))
 ORDER BY 1 desc
            ]]>
        </reps_list>
        <reps_list2>
            <![CDATA[
SELECT trep.id as recid, trep.date_reg,trep.t_build,
ch_ksk.f_get_lang_text('t_rep_type', trep.t_rep_type_id, lang.id) as rep_type,
(select tu.lastname||' '||tu.firstname||' '||coalesce(tu.middlename,'') from ch_ksk.t_user tu where tu.id=trep.t_user_id) as creator,
ch_ksk.f_get_lang_text('t_rep_status', trep.t_rep_status_id, lang.id) as rep_stat,
(SELECT tu.lastname||' '||tu.firstname||coalesce(' '||tu.middlename,'')
  FROM ch_ksk.t_position tp, ch_ksk.t_user tu
 WHERE tp.t_user_id=tu.id
   AND tp.id=trep.t_ruk) as ruk_name,
(SELECT tu.lastname||' '||tu.firstname||coalesce(' '||tu.middlename,'')
  FROM ch_ksk.t_position tp, ch_ksk.t_user tu
 WHERE tp.t_user_id=tu.id
   AND tp.id=trep.t_buk) as buk_name,
      (select
(select tlt.lang_text from ch_ksk.t_any_lang_text tlt where tlt.table_id=tc.id and tlt.table_name='t_city' and tlt.t_language_id=tls.t_language_id)
||', '|| ch_ksk.f_street( cast (ts.id as int),cast (tls.t_language_id as int))
||' '|| tb.building_num
||(select  coalesce( '/'||coalesce(tb.build_subunit,null),'' ) )
from ch_ksk.t_street ts, ch_ksk.t_building tb, ch_ksk.t_building_ksk tbk, ch_ksk.t_lang_street tls, ch_ksk.t_ksk tk, ch_ksk.t_city tc
where tls.t_street_id=ts.id
and tb.t_street_id=ts.id
and tbk.t_building_id=tb.id
and tbk.t_ksk_id=tk.id
and tk.status=1
and tbk.status=1
and ts.t_city_id=tc.id
and tls.t_language_id=lang.id
and tb.id=trep.t_build) as build_name
   , trep.t_rep_type_id
   , trep.t_ruk
   , trep.t_buk
   , trep.t_rep_status_id
   , trep.date_start
   , trep.date_end
  FROM ch_ksk.t_reports trep, ch_ksk.t_language lang
 WHERE trep.id=coalesce(cast(? as float), trep.id)
   AND trep.date_reg>=coalesce(cast(? as date), trep.date_reg)
   AND trep.date_reg<=coalesce(?, trep.date_reg)
   AND trep.t_rep_type_id=coalesce(cast(? as float), trep.t_rep_type_id)
   AND lang.id=cast(? as float)
   AND trep.t_rep_status_id=2
   AND trep.t_ksk_id in (select tb1.t_ksk_id
                        from ch_ksk.t_relation tr1, ch_ksk.t_flats tf1, ch_ksk.t_building_ksk tb1
                        where t_user_id=cast(? as bigint)
                        and tr1.status=1
                        and tr1.t_flats_id=tf1.id
                        and tf1.t_building_id=tb1.t_building_id)
   AND trep.date_start>=coalesce(cast(? as date), trep.date_start)
   AND trep.date_end<=coalesce(cast(? as date), trep.date_end)
 ORDER BY 1 desc
            ]]>
        </reps_list2>
        <reps_list_address>
            <![CDATA[
            with params as (select ?::float as numdoc, ?::date as datbeg, ?::timestamp as datend, ?::float as rep_type,
                            ?::float as lang_id, ? as userId, ?::date as per_beg, ?::date as per_end, ?::bigint as t_build)
            SELECT trep.id as recid, trep.date_reg,trep.t_build,
            ch_ksk.f_get_lang_text('t_rep_type', trep.t_rep_type_id, lang.id) as rep_type,
            (select tu.lastname||' '||tu.firstname||' '||coalesce(tu.middlename,'') from ch_ksk.t_user tu where tu.id=trep.t_user_id) as creator,
            ch_ksk.f_get_lang_text('t_ksk', trep.t_ksk_id, lang.id) as creator_ksk,
            ch_ksk.f_get_lang_text('t_rep_status', trep.t_rep_status_id, lang.id) as rep_stat,
            (SELECT tu.lastname||' '||tu.firstname||coalesce(' '||tu.middlename,'')
            FROM ch_ksk.t_position tp, ch_ksk.t_user tu
            WHERE tp.t_user_id=tu.id
            AND tp.id=trep.t_ruk) as ruk_name,
            (SELECT tu.lastname||' '||tu.firstname||coalesce(' '||tu.middlename,'')
            FROM ch_ksk.t_position tp, ch_ksk.t_user tu
            WHERE tp.t_user_id=tu.id
            AND tp.id=trep.t_buk) as buk_name,
            (select
            (select tlt.lang_text from ch_ksk.t_any_lang_text tlt where tlt.table_id=tc.id and tlt.table_name='t_city' and tlt.t_language_id=tls.t_language_id)
            ||', '|| ch_ksk.f_street( cast (ts.id as int),cast (tls.t_language_id as int))
            ||' '|| tb.building_num
            ||(select  coalesce( '/'||coalesce(tb.build_subunit,null),'' ) )
            from ch_ksk.t_street ts, ch_ksk.t_building tb, ch_ksk.t_building_ksk tbk, ch_ksk.t_lang_street tls, ch_ksk.t_ksk tk, ch_ksk.t_city tc
            where tls.t_street_id=ts.id
            and tb.t_street_id=ts.id
            and tbk.t_building_id=tb.id
            and tbk.t_ksk_id=tk.id
            and tk.status=1
            and tbk.status=1
            and ts.t_city_id=tc.id
            and tls.t_language_id=lang.id
            and tb.id = trep.t_build) as build_name
            , trep.t_rep_type_id
            , trep.t_ruk
            , trep.t_buk
            , trep.t_rep_status_id
            , trep.date_start
            , trep.date_end
            FROM ch_ksk.t_reports trep, ch_ksk.t_language lang, params
            WHERE trep.id=coalesce(params.numdoc, trep.id)
            AND trep.date_reg>=coalesce(params.datbeg, trep.date_reg)
            AND trep.date_reg<=coalesce(params.datend, trep.date_reg)
            AND trep.t_rep_type_id=coalesce(params.rep_type, trep.t_rep_type_id)
            AND lang.id=params.lang_id
            AND trep.t_rep_status_id=2
            AND trep.t_ksk_id in (select tb1.t_ksk_id
            from ch_ksk.t_relation tr1, ch_ksk.t_flats tf1, ch_ksk.t_building_ksk tb1
            where t_user_id=cast(params.userId as bigint)
            and tr1.status=1
            and tr1.t_flats_id=tf1.id
            and tf1.t_building_id=tb1.t_building_id)
            AND trep.date_start>=coalesce(params.per_beg, trep.date_start)
            AND trep.date_end<=coalesce(params.per_end, trep.date_end)
            AND (trep.t_build in (select f.t_building_id from ch_ksk.t_relation r,ch_ksk.t_flats f
                                    where r.t_flats_id=f.id
                                    and r.t_user_id = params.userId)
                OR trep.t_build is null)
            AND coalesce(trep.t_build,'111') = (coalesce(params.t_build,trep.t_build,'111'))
            ORDER BY 1 desc
            ]]>
        </reps_list_address>
        <rep_type>
            <![CDATA[
SELECT 0 as id, '...' as text, '' as scalc WHERE 1=cast (? as int)
 UNION ALL
SELECT id, ch_ksk.f_get_lang_text('t_rep_type', id, cast (? as int)) as text, scalc
  FROM ch_ksk.t_rep_type
 WHERE status=cast (? as int)
            ]]>
        </rep_type>
        <rep_type_cit>
            <![CDATA[
SELECT 0 as id, '...' as text, '' as scalc WHERE 1=cast (? as int)
 UNION ALL
SELECT id, ch_ksk.f_get_lang_text('t_rep_type', id, cast (? as int)) as text, scalc
  FROM ch_ksk.t_rep_type
 WHERE status=cast (? as int)
   AND npublish=1
            ]]>
        </rep_type_cit>
        <get_one_time_code>
            <![CDATA[SELECT user_id, code, active_from, active_to, email, (select '1' from ch_ksk.t_comp_position tcp where tcp.t_user_id=(select tu.id from ch_ksk.t_user tu where tu.usermail1=email)) as exists_comp FROM ch_ksk.one_time_codes WHERE code = ?]]>
        </get_one_time_code>
        <get_pos_emails_ksk>
            select tlt.lang_text as nameofksk, tu.usermail1 as email  from ch_ksk.t_ksk tk,
            ch_ksk.t_position tp,
            ch_ksk.t_user tu,
            ch_ksk.t_any_lang_text tlt
            where
            tk.id=tp.t_ksk_id
            and tp.t_user_id = tu.id
            and tp.date_end is null
            and tu.mail1status=1
            and tlt.table_name='t_ksk'
            and tlt.t_language_id=?
            and tlt.table_id=tk.id
            and tk.id=?
        </get_pos_emails_ksk>
        <get_cit_emails_ksk>
            select tu.usermail1 as email,
            ch_ksk.f_street( cast (ts.id as int),cast (tls.t_language_id as int))
            ||' '|| tb.building_num
            ||(select  coalesce( '/'||coalesce(tb.build_subunit,null),'' ) )
            ||(select ', '||tlt.lang_text||' ' from ch_ksk.t_any_lang_text tlt where tlt.table_id=1 and tlt.table_name='t_flat_type' and tlt.t_language_id=cast (tls.t_language_id as int))||' '|| tf.flat_num
            ||(select  coalesce( '/'||coalesce(tf.flat_subunit,null),'' ) ) as addressname,
            tlt.lang_text as nameofksk
            from  ch_ksk.t_building_ksk tbk,
            ch_ksk.t_ksk tk,
            ch_ksk.t_building tb,
            ch_ksk.t_flats tf,
            ch_ksk.t_relation tr,
            ch_ksk.t_user tu,
            ch_ksk.t_street ts,
            ch_ksk.t_city tc,
            ch_ksk.t_street_type tst,
            ch_ksk.t_lang_street tls,
            ch_ksk.t_any_lang_text tlt
            where tk.id=tbk.t_ksk_id
            and tk.status=1
            and tbk.t_building_id=tb.id
            and tb.id=tf.t_building_id
            and tf.id=tr.t_flats_id
            and tr.date_end is null
            and tr.status=1
            and tr.t_user_id=tu.id
            and tb.t_street_id=ts.id
            and ts.id=tls.t_street_id
            and tls.t_language_id=1
            and ts.street_type_id=tst.id
            and tc.id=ts.t_city_id
            and tlt.table_name='t_ksk'
            and tlt.t_language_id=?
            and tlt.table_id=tk.id
            and tk.id=?
        </get_cit_emails_ksk>
		<get_cit_emails>
            select tu.usermail1 as email,
            ch_ksk.f_street( cast (ts.id as int),cast (tls.t_language_id as int))
            ||' '|| tb.building_num
            ||(select  coalesce( '/'||coalesce(tb.build_subunit,null),'' ) )
            ||(select ', '||tlt.lang_text||' ' from ch_ksk.t_any_lang_text tlt where tlt.table_id=1 and tlt.table_name='t_flat_type' and tlt.t_language_id=cast (tls.t_language_id as int))||' '|| tf.flat_num
            ||(select  coalesce( '/'||coalesce(tf.flat_subunit,null),'' ) ) as addressname,
            tk.description as nameofksk
            from  ch_ksk.t_building_ksk tbk,
            ch_ksk.t_ksk tk,
            ch_ksk.t_building tb,
            ch_ksk.t_flats tf,
            ch_ksk.t_relation tr,
            ch_ksk.t_user tu,
            ch_ksk.t_street ts,
            ch_ksk.t_city tc,
            ch_ksk.t_street_type tst,
            ch_ksk.t_lang_street tls
            where tk.id=tbk.t_ksk_id
            and tk.status=1
            and tbk.t_building_id=tb.id
            and tb.id=tf.t_building_id
            and tf.id=tr.t_flats_id
            and tr.date_end is null
            and tr.status=1
            and tr.t_user_id=tu.id
            and tb.t_street_id=ts.id
            and ts.id=tls.t_street_id
            and tls.t_language_id=1
            and ts.street_type_id=tst.id
            and tc.id=ts.t_city_id
            and tbk.id=?
        </get_cit_emails>
        <get_conflict_ksk>
            select tbk2.id as recid ,tk.description as desc, tk.bin as bin
            from ch_ksk.t_building_ksk tbk,
            ch_ksk.t_ksk tk,
            ch_ksk.t_building_ksk tbk2
            where tbk2.t_ksk_id=tk.id
            and tk.status=1
            and tbk2.t_building_id=tbk.t_building_id
            and tbk2.status=3
            and tbk.id=?
        </get_conflict_ksk>
        <relation_trail>
            <![CDATA[
SELECT tr.id,
       coalesce(tr.date_end,tr.date_start) as date_oper,
       tu.lastname||' '||tu.firstname||coalesce(' '||tu.middlename,'') as fio,
       tu_ds.lastname||' '||tu_ds.firstname||coalesce(' '||tu_ds.middlename,'') as fio_ds,
       ch_ksk.f_get_lang_text('t_relation_status_desc', tr.status, lang.id) as stat_desc,
       ch_ksk.f_get_lang_text('t_relation_type', tr.t_relation_type_id, lang.id) as rel_type,
       ch_ksk.f_get_lang_text('t_req_reasons', tr.t_req_reasons_id, lang.id) as note
  FROM ch_ksk.t_relation tr, ch_ksk.t_user tu, ch_ksk.t_enter_log tel, ch_ksk.t_user tu_ds, ch_ksk.t_language lang
 WHERE t_flats_id=?
   AND lang.id=?
   AND tr.status in (1,4)
   AND tr.t_user_id=tu.id
   AND tel.id=(select max(id) from ch_ksk.t_enter_log tel0 where tel0.table_name='t_relation' AND tel0.table_id=tr.id
		and tel0.t_user_id in (select distinct tp.t_user_id from ch_ksk.t_position tp, ch_ksk.t_position_types pt
					where tp.t_position_types_id=pt.id and pt.code='ds')
       )
   AND tel.t_user_id=tu_ds.id
 ORDER BY 1 DESC
            ]]>
        </relation_trail>
        <flats_list_act>
            <![CDATA[
SELECT tr.id recid,
       fl0.flat_num||(select  coalesce( '/'||coalesce(fl0.flat_subunit,null),'' )) as flat_num,
       tu.lastname||' '||tu.firstname||coalesce(' '||tu.middlename,'') as fio,
       tu.mobile_phone,
       tu.home_phone,
       ch_ksk.f_get_lang_text('t_relation_status', tr.status, lang.id) as stat,
       ch_ksk.f_get_lang_text('t_relation_type', tr.t_relation_type_id, lang.id) as rel_type,
       coalesce(tr.date_end,tr.date_start) as date_stat,
       tr.t_flats_id
  FROM ch_ksk.t_relation tr, ch_ksk.t_user tu, ch_ksk.t_flats fl0, ch_ksk.t_language lang
 WHERE tr.t_flats_id in (select id from ch_ksk.t_flats where t_building_id=cast(? as int) and flat_num=coalesce(cast(? as int),flat_num))
   AND tr.t_flats_id=fl0.id
   AND tr.status in (1,3)
   AND tr.t_user_id=tu.id
   AND lang.id=?
   AND fl0.id=coalesce(cast(? as int),fl0.id)
 ORDER by 2,1
            ]]>
        </flats_list_act>
        <get_attempts_num>
            select count(1) as count from ch_ksk.t_enter_log tel,
            ch_ksk.t_log_fields_value tlv,
            ch_ksk.t_log_fields tlf
            where tlf.id= tlv.t_log_fields_id
            and tel.id=tlv.t_enter_log_id
            and tlv.field_value=?
            and tel.entry_date between  (select now() -INTERVAL '30 minute') and  now()
            and tel.table_id=0
        </get_attempts_num>
        <view_ksk>
            select
            tk.description as description,
            tk.bin as bin,
            (select tnl.lang_text from ch_ksk.t_any_lang_text tnl where tnl.table_name= 't_city' and tnl.t_language_id=tls.t_language_id and tnl.table_id=tcb.id) as ksk_city,
            ch_ksk.f_street( cast (tsb.id as int),cast (tls.t_language_id as int)) as ksk_street,
            tkb.building_num  as ksk_building,
            tkb.build_subunit as build_subunit,
            tk.phone1 as phone1,
            tk.phone2 as phone2
            from  ch_ksk.t_relation tr, ch_ksk.t_flats tf, ch_ksk.t_building tb, ch_ksk.t_building_ksk tbk, ch_ksk.t_ksk tk, ch_ksk.t_building tkb, ch_ksk.t_street tsb, ch_ksk.t_city tcb, ch_ksk.t_lang_street tls
            where tf.t_building_id=tb.id
            and tb.id=tbk.t_building_id
            and tbk.t_ksk_id=tk.id
            and tk.status=1
            and tkb.id=tk.t_building_id
            and tkb.t_street_id=tsb.id
            and tsb.t_city_id=tcb.id
            and tls.t_street_id=tsb.id
            and tr.t_flats_id=tf.id
            and tbk.status=1
            and tr.id=?
            and tls.t_language_id=?
        </view_ksk>
        <get_moderator_ksk>
            <![CDATA[
SELECT tm.t_user_id as id
  FROM ch_ksk.t_moderator_ksk mksk, ch_ksk.t_moderators tm
 WHERE mksk.t_ksk_id=?
   AND mksk.t_moderators_id=tm.id
            ]]>
        </get_moderator_ksk>
        <get_ksk_user_by_pos>
            <![CDATA[
SELECT p.t_user_id as id
  FROM ch_ksk.t_position p, ch_ksk.t_position_types pt
 WHERE p.t_position_types_id = pt.id
   AND pt.code=?
   AND p.t_ksk_id=?
            ]]>
        </get_ksk_user_by_pos>
        <get_ksk_build>
            <![CDATA[
SELECT t_ksk_id as id
  FROM ch_ksk.t_building_ksk
 WHERE status=1
   AND t_building_id=?
            ]]>
        </get_ksk_build>
        <get_currval>
            <![CDATA[
SELECT currval(cast(? as varchar)) as id
            ]]>
        </get_currval>
		<get_template>
            select ttc.code as code, tnt.notif_text as notif_text from ch_ksk.t_notif_template_code ttc, ch_ksk.t_notification_template tnt where ttc.id=tnt.t_notif_temp_code_id and ttc.id=?
        </get_template>
        <get_template_code>
            select ttc1.id as id, ttc1.code as text from ch_ksk.t_notif_template_code ttc1, ch_ksk.t_notification_template tnt  where  ttc1.id=tnt.t_notif_temp_code_id and ttc1.code in ('Новая', 'Жаңа') and tnt.t_language_id=?
            union all
            select ttc.id as id, ttc.code as text from ch_ksk.t_notif_template_code ttc where ttc.position_id in (select tp1.id from ch_ksk.t_position tp1 where tp1.t_ksk_id in (select tk.id from ch_ksk.t_position tp, ch_ksk.t_ksk tk where tp.t_ksk_id = tk.id and tp.t_user_id=?))
        </get_template_code>
        <get_notification_ksk>
            with lang as (select ? as id,? as usr,? as not_id,cast(? as varchar) as date_filter,? as status,cast(? as varchar) as not_theme)
            select tn.id as recid, tn.id as notif_number, tn.notif_data as dat_notif, tn.notif_title as notif_theme,
            (select u.lastname||' '||u.firstname||' '||u.middlename from ch_ksk.t_ksk_message tkm, ch_ksk.t_position tp, ch_ksk.t_user u where tkm.t_position_id=tp.id and tp.t_user_id=u.id and tkm.status=1 and tkm.id=tn.t_ksk_msg_id) as notif_sender,
            (select tlt.lang_text from ch_ksk.t_any_lang_text tlt where tlt.table_name='t_notification_status' and tlt.table_id=tn.status and tlt.t_language_id=lang.id)  as notif_status,
            tn.notif_text as notif_text,
            (select case tn.target when 0 then  (select ch_ksk.f_street( cast (ts.id as int),cast (tls.t_language_id as int))
            ||' '|| tb.building_num
            ||(select  coalesce( '/'||coalesce(tb.build_subunit,null),'' ) )
            from ch_ksk.t_building tb,
            ch_ksk.t_street ts,
            ch_ksk.t_street_type tst,
            ch_ksk.t_lang_street tls,
            ch_ksk.t_city tc
            where tb.id=tn.target_id
            and tb.t_street_id=ts.id
            and ts.id=tls.t_street_id
            and tls.t_language_id = lang.id
            and ts.street_type_id = tst.id
            and tc.id = ts.t_city_id )
            when 1 then   (select  ch_ksk.f_street( cast (ts.id as int),cast (tls.t_language_id as int))
            ||' '|| tb.building_num
            ||(select  coalesce( '/'||coalesce(tb.build_subunit,null),'' ) )
            ||(select ', '||tlt.lang_text||' ' from ch_ksk.t_any_lang_text tlt where tlt.table_id=1 and tlt.table_name='t_flat_type' and tlt.t_language_id=cast (tls.t_language_id as int))||' '|| tf.flat_num
            ||(select  coalesce( '/'||coalesce(tf.flat_subunit,null),'' ) )
            from ch_ksk.t_flats tf,
            ch_ksk.t_building tb,
            ch_ksk.t_street ts,
            ch_ksk.t_street_type tst,
            ch_ksk.t_lang_street tls,
            ch_ksk.t_city tc
            where tf.id=tn.target_id
            and tf.t_building_id=tb.id
            and tb.t_street_id=ts.id
            and ts.id=tls.t_street_id
            and tls.t_language_id = lang.id
            and ts.street_type_id = tst.id
            and tc.id = ts.t_city_id)
            when 2 then (select ch_ksk.f_street( cast (ts.id as int),cast (tls.t_language_id as int))
            ||' '|| tb.building_num
            ||(select  coalesce( '/'||coalesce(tb.build_subunit,null),'' ) )
            ||(select ', '||tlt.lang_text||' ' from ch_ksk.t_any_lang_text tlt where tlt.table_id=1 and tlt.table_name='t_flat_type' and tlt.t_language_id=cast (tls.t_language_id as int))||' '|| tf.flat_num
            ||(select  coalesce( '/'||coalesce(tf.flat_subunit,null),'' ) )
            from ch_ksk.t_flats tf,
            ch_ksk.t_building tb,
            ch_ksk.t_street ts,
            ch_ksk.t_street_type tst,
            ch_ksk.t_lang_street tls,
            ch_ksk.t_city tc
            where tf.id=tn.target_id
            and tf.t_building_id=tb.id
            and tb.t_street_id=ts.id
            and ts.id=tls.t_street_id
            and tls.t_language_id = lang.id
            and ts.street_type_id = tst.id
            and tc.id = ts.t_city_id)
            end) as addressname,
            (select tu.lastname||' '||tu.firstname||coalesce(' '||tu.middlename,'') from ch_ksk.t_user tu where tu.id=tn.t_user_id ) as receivername,
            tn.t_ksk_msg_id msg_id
            from ch_ksk.t_notification  tn, ch_ksk.t_ksk_message tkm, ch_ksk.t_position tp,  lang
            where tn.t_ksk_msg_id=tkm.id
            and tp.id=tkm.t_position_id
            and tp.t_user_id=lang.usr
            and (select case lang.not_id when -1 then 1=1 else tn.id=lang.not_id end)
            and (select case lang.date_filter when '1111-11-11' then 1=1 else tn.notif_data=to_date(lang.date_filter, 'yyyy-mm-dd') end)
            and (select case lang.status when 0 then 1=1 else tn.status=lang.status end)
            and (select case lang.not_theme when '' then 1=1 else lower(tn.notif_title) like lower(lang.not_theme) end)
            union
            select tn.id as recid , tn.id as notif_number, tn.notif_data as dat_notif, tn.notif_title as notif_theme, (select u.lastname||' '||u.firstname||' '||u.middlename from ch_ksk.t_ksk_message tkm, ch_ksk.t_position tp, ch_ksk.t_user u where tkm.t_position_id=tp.id and tp.t_user_id=u.id and tkm.status=1 and tkm.id=tn.t_ksk_msg_id) as notif_sender,
            (select tlt.lang_text from ch_ksk.t_any_lang_text tlt where tlt.table_name='t_notification_status' and tlt.table_id=tn.status and tlt.t_language_id=lang.id)  as notif_status, tn.notif_text as notif_text,
            null as addressname,
            tu.lastname||' '||tu.firstname||coalesce(' '||tu.middlename,'') as receivername,
            tn.t_ksk_msg_id msg_id
            from ch_ksk.t_notification  tn,
            ch_ksk.t_user tu,
            ch_ksk.t_position tp,
            ch_ksk.t_ksk_message tkm,
            ch_ksk.t_user u,
            lang
            where tn.t_user_id=tu.id
            and tn.target_id=0
            and tkm.id=tn.t_ksk_msg_id
            and tp.id=tkm.t_position_id
            and (select case lang.not_id when -1 then 1=1 else tn.id=lang.not_id end)
            and (select case lang.date_filter when '1111-11-11' then 1=1 else tn.notif_data=to_date(lang.date_filter, 'yyyy-mm-dd') end)
            and (select case lang.status when 0 then 1=1 else tn.status=lang.status end)
            and (select case lang.not_theme when '' then 1=1 else lower(tn.notif_title) like lower(lang.not_theme) end)
            and tp.t_user_id=u.id
            and u.id=lang.usr
            order by 3 desc
        </get_notification_ksk>
		<get_notification>
            with lang as (select ? as id,? as usr,? as not_id,cast(? as varchar) as date_filter,? as status,cast(? as varchar) as not_theme)
            select tn.id as recid, tn.id as notif_number, tn.notif_data as dat_notif, tn.notif_title as notif_theme,
            (select u.lastname||' '||u.firstname||' '||u.middlename from ch_ksk.t_ksk_message tkm, ch_ksk.t_position tp, ch_ksk.t_user u where tkm.t_position_id=tp.id and tp.t_user_id=u.id and tkm.status=1 and tkm.id=tn.t_ksk_msg_id) as notif_sender,
            (select tlt.lang_text from ch_ksk.t_any_lang_text tlt where tlt.table_name='t_notification_status' and tlt.table_id=tn.status and tlt.t_language_id=lang.id)  as notif_status,
            tn.notif_text as notif_text,
            (select case tn.target when 0 then  (select ch_ksk.f_street( cast (ts.id as int),cast (tls.t_language_id as int))
            ||' '|| tb.building_num
            ||(select  coalesce( '/'||coalesce(tb.build_subunit,null),'' ) )
            from ch_ksk.t_building tb,
            ch_ksk.t_street ts,
            ch_ksk.t_street_type tst,
            ch_ksk.t_lang_street tls,
            ch_ksk.t_city tc
            where tb.id=tn.target_id
            and tb.t_street_id=ts.id
            and ts.id=tls.t_street_id
            and tls.t_language_id = lang.id
            and ts.street_type_id = tst.id
            and tc.id = ts.t_city_id )
            when 1 then   (select  ch_ksk.f_street( cast (ts.id as int),cast (tls.t_language_id as int))
            ||' '|| tb.building_num
            ||(select  coalesce( '/'||coalesce(tb.build_subunit,null),'' ) )
            ||(select ', '||tlt.lang_text||' ' from ch_ksk.t_any_lang_text tlt where tlt.table_id=1 and tlt.table_name='t_flat_type' and tlt.t_language_id=cast (tls.t_language_id as int))||' '|| tf.flat_num
            ||(select  coalesce( '/'||coalesce(tf.flat_subunit,null),'' ) )
            from ch_ksk.t_flats tf,
            ch_ksk.t_building tb,
            ch_ksk.t_street ts,
            ch_ksk.t_street_type tst,
            ch_ksk.t_lang_street tls,
            ch_ksk.t_city tc
            where tf.id=tn.target_id
            and tf.t_building_id=tb.id
            and tb.t_street_id=ts.id
            and ts.id=tls.t_street_id
            and tls.t_language_id = lang.id
            and ts.street_type_id = tst.id
            and tc.id = ts.t_city_id)
            when 2 then (select ch_ksk.f_street( cast (ts.id as int),cast (tls.t_language_id as int))
            ||' '|| tb.building_num
            ||(select  coalesce( '/'||coalesce(tb.build_subunit,null),'' ) )
            ||(select ', '||tlt.lang_text||' ' from ch_ksk.t_any_lang_text tlt where tlt.table_id=1 and tlt.table_name='t_flat_type' and tlt.t_language_id=cast (tls.t_language_id as int))||' '|| tf.flat_num
            ||(select  coalesce( '/'||coalesce(tf.flat_subunit,null),'' ) )
            from ch_ksk.t_flats tf,
            ch_ksk.t_building tb,
            ch_ksk.t_street ts,
            ch_ksk.t_street_type tst,
            ch_ksk.t_lang_street tls,
            ch_ksk.t_city tc
            where tf.id=tn.target_id
            and tf.t_building_id=tb.id
            and tb.t_street_id=ts.id
            and ts.id=tls.t_street_id
            and tls.t_language_id = lang.id
            and ts.street_type_id = tst.id
            and tc.id = ts.t_city_id)
            end) as addressname,
            tn.t_ksk_msg_id msg_id
            from ch_ksk.t_notification  tn, lang
            where
            tn.t_user_id=lang.usr
            and (select case lang.not_id when -1 then 1=1 else tn.id=lang.not_id end)
            and (select case lang.date_filter when '1111-11-11' then 1=1 else tn.notif_data=to_date(lang.date_filter, 'yyyy-mm-dd') end)
            and (select case lang.status when 0 then 1=1 else tn.status=lang.status end)
            and (select case lang.not_theme when '' then 1=1 else lower(tn.notif_title) like lower(lang.not_theme) end)
            union
            select tn.id as recid , tn.id as notif_number, tn.notif_data as dat_notif, tn.notif_title as notif_theme, (select u.lastname||' '||u.firstname||' '||u.middlename from ch_ksk.t_ksk_message tkm, ch_ksk.t_position tp, ch_ksk.t_user u where tkm.t_position_id=tp.id and tp.t_user_id=u.id and tkm.status=1 and tkm.id=tn.t_ksk_msg_id) as notif_sender,
            (select tlt.lang_text from ch_ksk.t_any_lang_text tlt where tlt.table_name='t_notification_status' and tlt.table_id=tn.status and tlt.t_language_id=lang.id)  as notif_status, tn.notif_text as notif_text,
            null  as addressname,
            tn.t_ksk_msg_id msg_id
            from ch_ksk.t_notification  tn,
            lang
            where
            tn.target_id=0
            and (select case lang.not_id when -1 then 1=1 else tn.id=lang.not_id end)
            and (select case lang.date_filter when '1111-11-11' then 1=1 else tn.notif_data=to_date(lang.date_filter, 'yyyy-mm-dd') end)
            and (select case lang.status when 0 then 1=1 else tn.status=lang.status end)
            and (select case lang.not_theme when '' then 1=1 else lower(tn.notif_title) like lower(lang.not_theme) end)
            and tn.t_user_id=lang.usr
            order by 3 desc
        </get_notification>
        <KSK_Message>

            with params as (select cast(? as varchar) as id,cast(? as varchar) as date_fil, cast(? as varchar) as date_fil1)
            select tq.id as recid,tq.flname,tq.phone, tq.mail, tq.note, tq.reg_date  as reg_date from ch_ksk.t_guestfeedback tq,params
            where case when params.id = '1' then 1=1 else tq.mail=params.id end
            and  to_date(cast(tq.reg_date as varchar(10)),'yyyy-mm-dd ') between to_date(params.date_fil,'dd.mm.yyyy') and to_date(params.date_fil1,'dd.mm.yyyy')


        </KSK_Message>
        <get_emails_by_id>
            select u.id as id, u.usermail1 as text from ch_ksk.t_user u where u.id
        </get_emails_by_id>
        <all_position_citizens>
            select tu.id as id,
            ch_ksk.f_street( cast (ts.id as int),cast (tls.t_language_id as int))
            ||' '|| tb.building_num
            ||(select  coalesce( '/'||coalesce(tb.build_subunit,null),'' ) )
            ||(select ', '||tlt.lang_text||' ' from ch_ksk.t_any_lang_text tlt where tlt.table_id=1 and tlt.table_name='t_flat_type' and tlt.t_language_id=cast (tls.t_language_id as int))||' '|| tf.flat_num
            ||(select  coalesce( '/'||coalesce(tf.flat_subunit,null),'' ) )||' '|| tu.lastname||' '||tu.firstname||coalesce(' '||tu.middlename,'') as text,
            tf.id as fid
            from
            ch_ksk.t_flats tf,
            ch_ksk.t_building tb,
            ch_ksk.t_street ts,
            ch_ksk.t_city tc,
            ch_ksk.t_street_type tst,
            ch_ksk.t_lang_street tls,
            ch_ksk.t_relation tr,
            ch_ksk.t_user tu
            where
            tf.t_building_id=tb.id
            and tb.t_street_id=ts.id
            and ts.id=tls.t_street_id
            and tls.t_language_id=?
            and ts.street_type_id=tst.id
            and tc.id=ts.t_city_id
            and tf.id=tr.t_flats_id
            and tr.t_user_id= tu.id
            and tr.status=1
            and tu.mail1status=1
            and tf.id
        </all_position_citizens>
        <all_build_for_flat>
            select tb.id as id, (select tlt.lang_text from ch_ksk.t_any_lang_text tlt where tlt.table_id=tc.id and tlt.table_name='t_city' and tlt.t_language_id=tls.t_language_id)
            ||', '|| ch_ksk.f_street( cast (ts.id as int),cast (tls.t_language_id as int))
            ||' '|| tb.building_num
            ||(select  coalesce( '/'||coalesce(tb.build_subunit,null),'' ) ) as text
            from ch_ksk.t_building_ksk_emps tpc,
            ch_ksk.t_building_ksk tbk,
            ch_ksk.t_position tp,
            ch_ksk.t_building tb,
            ch_ksk.t_street ts,
            ch_ksk.t_city tc,
            ch_ksk.t_street_type tst,
            ch_ksk.t_lang_street tls
            where tpc.t_position_id=tp.id
            and tp.t_position_types_id=3
            and tpc.t_building_ksk_id=tbk.id
            and tbk.t_building_id=tb.id
            and tb.t_street_id=ts.id
            and ts.id=tls.t_street_id
            and tls.t_language_id=?
            and ts.street_type_id=tst.id
            and tc.id=ts.t_city_id
            and tp.t_user_id=?
        </all_build_for_flat>
        <all_position_flat>
            select distinct tf.id as id, (select tlt.lang_text from ch_ksk.t_any_lang_text tlt where tlt.table_id=tc.id and tlt.table_name='t_city' and tlt.t_language_id=tls.t_language_id)
            ||', '|| ch_ksk.f_street( cast (ts.id as int),cast (tls.t_language_id as int))
            ||' '|| tb.building_num
            ||(select  coalesce( '/'||coalesce(tb.build_subunit,null),'' ) )
            ||(select ', '||tlt.lang_text||' ' from ch_ksk.t_any_lang_text tlt where tlt.table_id=1 and tlt.table_name='t_flat_type' and tlt.t_language_id=cast (tls.t_language_id as int))|| tf.flat_num
            ||(select  coalesce( '/'||coalesce(tf.flat_subunit,null),'' ) )  as text,
            tb.id as bid
            from
            ch_ksk.t_flats tf,
            ch_ksk.t_building tb,
            ch_ksk.t_street ts,
            ch_ksk.t_city tc,
            ch_ksk.t_street_type tst,
            ch_ksk.t_lang_street tls,
            ch_ksk.t_relation tr
            where
            tf.t_building_id=tb.id
            and tb.t_street_id=ts.id
            and ts.id=tls.t_street_id
            and tls.t_language_id=?
            and ts.street_type_id=tst.id
            and tc.id=ts.t_city_id
            and tr.t_flats_id=tf.id
            and tr.status=1
            and tb.id
        </all_position_flat>
        <all_position_building>
            WITH lang AS (
            SELECT id
            FROM ch_ksk.t_language
            WHERE id=?)
            select tb.id as id, (select tlt.lang_text from ch_ksk.t_any_lang_text tlt where tlt.table_id=tc.id and tlt.table_name='t_city' and tlt.t_language_id=tls.t_language_id)
            ||', '|| ch_ksk.f_street( cast (ts.id as int),cast (tls.t_language_id as int))
            ||' '|| tb.building_num
            ||(select  coalesce( '/'||coalesce(tb.build_subunit,null),'' ) )
            ||case when tb.flat_from is not null and tb.flat_to is not null then ' ('||tb.flat_from||'-'||tb.flat_to||')' else '' end as text
            from ch_ksk.t_building_ksk_emps tpc,
            ch_ksk.t_building_ksk tbk,
            ch_ksk.t_position tp,
            ch_ksk.t_building tb,
            ch_ksk.t_street ts,
            ch_ksk.t_city tc,
            ch_ksk.t_street_type tst,
            ch_ksk.t_lang_street tls,
            lang
            where tpc.t_position_id=tp.id
            and tp.t_position_types_id in (select tpt.id from ch_ksk.t_position_types tpt where tpt.code in ('ds', 'pr','up'))
            and tpc.t_building_ksk_id=tbk.id
            and tbk.t_building_id=tb.id
            and tb.t_street_id=ts.id
            and ts.id=tls.t_street_id
            and tls.t_language_id=lang.id
            and ts.street_type_id=tst.id
            and tc.id=ts.t_city_id
            and tp.t_user_id=?
            union all
            select tb.id as id, (select tlt.lang_text from ch_ksk.t_any_lang_text tlt where tlt.table_id=tc.id and tlt.table_name='t_city' and tlt.t_language_id=tls.t_language_id)
            ||', '|| ch_ksk.f_street( cast (ts.id as int),cast (tls.t_language_id as int))
            ||' '|| tb.building_num
            ||(select  coalesce( '/'||coalesce(tb.build_subunit,null),'' ) )
            ||case when tb.flat_from is not null and tb.flat_to is not null then ' ('||tb.flat_from||'-'||tb.flat_to||')' else '' end as text
            from
            ch_ksk.t_building_ksk tbk,
            ch_ksk.t_building tb,
            ch_ksk.t_street ts,
            ch_ksk.t_city tc,
            ch_ksk.t_street_type tst,
            ch_ksk.t_lang_street tls,
            lang
            where tbk.t_building_id=tb.id
            and tb.t_street_id=ts.id
            and ts.id=tls.t_street_id
            and tls.t_language_id=lang.id
            and ts.street_type_id=tst.id
            and tc.id=ts.t_city_id
            and tbk.t_ksk_id=?
        </all_position_building>
        <all_building_pos>
            select tb.id as id, (select tlt.lang_text from ch_ksk.t_any_lang_text tlt where tlt.table_id=tc.id and tlt.table_name='t_city' and tlt.t_language_id=tls.t_language_id)
            ||', '|| ch_ksk.f_street( cast (ts.id as int),cast (tls.t_language_id as int))
            ||' '|| tb.building_num
            ||(select  coalesce( '/'||coalesce(tb.build_subunit,null),'' ) )
            ||case when tb.flat_from is not null and tb.flat_to is not null then ' ('||tb.flat_from||'-'||tb.flat_to||')' else '' end as text
            from
            ch_ksk.t_building_ksk tbk,
            ch_ksk.t_building tb,
            ch_ksk.t_street ts,
            ch_ksk.t_city tc,
            ch_ksk.t_street_type tst,
            ch_ksk.t_lang_street tls
            where tbk.t_building_id=tb.id
            and tb.t_street_id=ts.id
            and ts.id=tls.t_street_id
            and tls.t_language_id=?
            and ts.street_type_id=tst.id
            and tc.id=ts.t_city_id
            and tbk.t_ksk_id=?
        </all_building_pos>
        <user_position>
            <![CDATA[
            select tps.code as position_types_code from ch_ksk.t_position tp, ch_ksk.t_position_types tps
        where tps.id=tp.t_position_types_id
	        and tps.code in ('ds', 'pr','up')
	        and tps.status=1
	        and date_end is null
            and tp.t_user_id=?
             ]]>
        </user_position>
        <all_relation_type>
            <![CDATA[
            select trt.id as id,tl.lang_text as text from ch_ksk.t_relation_type trt, ch_ksk.t_any_lang_text tl
            where trt.status=1
            and trt.id=tl.table_id
            and tl.table_name='t_relation_type'
            and tl.t_language_id=?
              ]]>
        </all_relation_type>
        <user_addr>
            <![CDATA[
             select  tc.id as id, ts.id as street_id, tb.building_num as home_num,  tb.build_subunit as home_fraction, tf.flat_num as flat_num, tf.flat_subunit as flat_fraction, tr.status as status, tr.t_relation_type_id as relation_type_id
             from  ch_ksk.t_relation tr, ch_ksk.t_flats tf, ch_ksk.t_building tb, ch_ksk.t_street ts,  ch_ksk.t_street_type tst, ch_ksk.t_lang_street tls, ch_ksk.t_city tc
             where  tf.t_building_id=tb.id
             and tb.t_street_id=ts.id
             and ts.street_type_id=tst.id
             and ts.id=tls.t_street_id
             and ts.t_city_id=tc.id
             and tr.t_flats_id=tf.id
             and tr.id=?
             and tr.t_user_id=?
               ]]>
        </user_addr>
        <cit_address>
           <![CDATA[
            select tr.id as recid,
            (select tlt.lang_text from ch_ksk.t_any_lang_text tlt where tlt.table_id=tc.id and tlt.table_name='t_city' and tlt.t_language_id=tls.t_language_id) as city,
            ch_ksk.f_street(cast (ts.id as int), cast (tls.t_language_id as int)) as street,
            tb.id as building_id,
            tb.building_num as building,
            tb.build_subunit as fraction,
            tf.flat_num as flat,
            tf.flat_subunit as flat_fract,
            (select tlt.lang_text from ch_ksk.t_any_lang_text tlt where tlt.table_name = 't_relation_status' and tlt.t_language_id=tls.t_language_id and tlt.table_id =tr.status) as status,
            (select tlt.lang_text from ch_ksk.t_any_lang_text tlt where tlt.table_name = 't_relation_type' and tlt.t_language_id=tls.t_language_id and tlt.table_id=tr.t_relation_type_id) as relation,
            (select tk.id from ch_ksk.t_building_ksk tbk ,ch_ksk.t_ksk tk where tbk.t_building_id=tb.id and tk.id=tbk.t_ksk_id and tbk.status=1 and tk.status=1) as ksk_id,
            (select tlt.lang_text from ch_ksk.t_building_ksk tbk ,ch_ksk.t_ksk tk, ch_ksk.t_any_lang_text tlt where tbk.t_building_id=tb.id and   tk.id=tbk.t_ksk_id and tlt.table_id=tk.id and tlt.table_name='t_ksk' and tlt.t_language_id=tls.t_language_id and tbk.status=1 and tk.status=1) as ksk_description
            from ch_ksk.t_user tu, ch_ksk.t_relation tr, ch_ksk.t_flats tf, ch_ksk.t_building tb, ch_ksk.t_street ts,  ch_ksk.t_street_type tst, ch_ksk.t_lang_street tls, ch_ksk.t_city tc
            where tu.id =tr.t_user_id
            and tr.t_flats_id=tf.id
            and tf.t_building_id=tb.id
            and tb.t_street_id=ts.id
            and ts.street_type_id=tst.id
            and ts.id=tls.t_street_id
            and tls.t_language_id=?
            and ts.t_city_id=tc.id
            and tu.id=?
               ]]>
        </cit_address>
        <user_inf>
            <![CDATA[
        SELECT tu.usermail1 as email,
	      tu.firstname as first_name,
	      tu.lastname as last_name,
	      tu.middlename as middle_name,
	      tu.birthday as birth_date,
	      tu.iin as iin,
	      tu.mobile_phone as mobilephone,
	      tu.home_phone as phone
        FROM ch_ksk.t_user tu
        WHERE  tu.id=?
	         ]]>
        </user_inf>
        <user_address>
            <![CDATA[
select tf.id as id,
(select tlt.lang_text from ch_ksk.t_any_lang_text tlt where tlt.table_id=tc.id and tlt.table_name='t_city' and tlt.t_language_id=tls.t_language_id) ||', '
       ||ch_ksk.f_street(cast (ts.id as int), cast(tls.t_language_id as int))||' '||
       tb.building_num||
       (select  coalesce('/'||coalesce(tb.build_subunit,null),'') )||
       (select ', '||tlt.lang_text||' ' from ch_ksk.t_any_lang_text tlt where tlt.table_id=1 and tlt.table_name='t_flat_type' and tlt.t_language_id=tls.t_language_id)||
       tf.flat_num||''||
       (select  coalesce('/'||coalesce(tf.flat_subunit,null),'') )||' ' as text,
       tc.code
 from ch_ksk.t_user tu, ch_ksk.t_relation tr, ch_ksk.t_flats tf, ch_ksk.t_building tb, ch_ksk.t_street ts,  ch_ksk.t_street_type tst, ch_ksk.t_lang_street tls, ch_ksk.t_city tc
where tu.id =tr.t_user_id
  and tr.t_flats_id=tf.id
  and tf.t_building_id=tb.id
  and tb.t_street_id=ts.id
  and ts.street_type_id=tst.id
  and ts.id=tls.t_street_id
  and tls.t_language_id=?
  and ts.t_city_id=tc.id
  and tu.id=?
   and tr.status not in (?)
              ]]>
        </user_address>
        <cur_city>
            <![CDATA[
        select tc.id as id, tlt.lang_text  as text from ch_ksk.t_request tr,
        ch_ksk.t_flats tf,
        ch_ksk.t_building tb,
        ch_ksk.t_street ts,
        ch_ksk.t_city tc,
        ch_ksk.t_any_lang_text tlt
        where
        tr.t_flats_id=tf.id
        and tf.t_building_id=tb.id
        and tb.t_street_id=ts.id
        and ts.t_city_id=tc.id
        and tc.id=tlt.table_id
        and tlt.table_name='t_city'
        and tlt.t_language_id=?
        and tr.id=?
          ]]>
        </cur_city>
        <cur_req_type>
            <![CDATA[
        select trt.id as id ,tlt.lang_text as text
        from ch_ksk.t_request tr,
        ch_ksk.t_req_subtype trs,
        ch_ksk.t_req_type trt,
        ch_ksk.t_any_lang_text tlt
        where tr.t_req_subtype_id=trs.id
        and trs.t_req_type_id=trt.id
        and trt.id=tlt.table_id
        and tlt.table_name='t_req_type'
        and tlt.t_language_id=?
        and tr.id=?
          ]]>
        </cur_req_type>
        <cur_req_priority>
            <![CDATA[
        select trp.id as id, tlt.lang_text as text
        from ch_ksk.t_request tr,
        ch_ksk.t_req_priority trp,
        ch_ksk.t_any_lang_text tlt
        where tr.t_req_priority_id=trp.id
        and trp.id=tlt.table_id
        and tlt.table_name='t_req_priority'
        and tlt.t_language_id=?
        and tr.id=?
          ]]>
        </cur_req_priority>
        <cur_req_status>
            <![CDATA[
        select trs.id as id, tlt.lang_text as text
        from ch_ksk.t_request tr,
        ch_ksk.t_req_status trs,
        ch_ksk.t_any_lang_text tlt
        where tr.t_req_status_id=trs.id
        and trs.id=tlt.table_id
        and tlt.table_name='t_req_status'
        and tlt.t_language_id=?
        and tr.id=?
          ]]>
        </cur_req_status>
        <cur_req_serv_status>
            <![CDATA[
               select trs.id as id, tlt.lang_text as text from ch_ksk.t_serv_req_company  tsr,
	              ch_ksk.t_req_status trs,
		      ch_ksk.t_any_lang_text tlt
		 where
			tsr.status=trs.id
        and trs.id=tlt.table_id
			and tlt.table_name='t_req_status'
        and tlt.t_language_id=?
		        and tsr.t_comp_serv_id=?
		        and tsr.t_request_id=?
          ]]>
        </cur_req_serv_status>
        <count_reqs>
            <![CDATA[
            with param as (select cast (? as bigint) as kskid)
         SELECT count(t1.id) as countreq
          FROM ch_ksk.t_request t1, ch_ksk.t_flats t3, ch_ksk.t_building t4, ch_ksk.t_street t5, ch_ksk.t_city t6, ch_ksk.t_building_ksk t7, ch_ksk.t_ksk t8, param p
         WHERE t1.t_flats_id=t3.id
           AND t3.t_building_id=t4.id
           AND t4.t_street_id=t5.id
           AND t6.id=t5.t_city_id
           and t4.id=t7.t_building_id
           and t7.status  in (1)
           and t7.t_ksk_id=t8.id
           and t8.status=1
           and t1.t_req_status_id  in (1)
           and t8.id=p.kskid
           union all
         SELECT count(t1.id) as countreq
          FROM ch_ksk.t_request t1, ch_ksk.t_flats t3, ch_ksk.t_building t4, ch_ksk.t_street t5, ch_ksk.t_city t6, ch_ksk.t_building_ksk t7, ch_ksk.t_ksk t8, param p
         WHERE t1.t_flats_id=t3.id
           AND t3.t_building_id=t4.id
           AND t4.t_street_id=t5.id
           AND t6.id=t5.t_city_id
           and t4.id=t7.t_building_id
           and t7.status  in (1)
           and t7.t_ksk_id=t8.id
           and t8.status=1
            and t1.t_req_status_id  in (3)
           and t8.id=p.kskid
            ]]>
        </count_reqs>
        <cur_street>
            <![CDATA[
        select ts.id as id, tlt.lang_text||' '||tls.description  as text from ch_ksk.t_request tr,
        ch_ksk.t_flats tf,
        ch_ksk.t_building tb,
        ch_ksk.t_street ts,
        ch_ksk.t_lang_street tls,
        ch_ksk.t_street_type tst,
        ch_ksk.t_any_lang_text tlt
        where
        tr.t_flats_id=tf.id
        and tf.t_building_id=tb.id
        and tb.t_street_id=ts.id
        and tls.t_street_id=ts.id
        and tls.t_language_id=tlt.t_language_id
        and ts.street_type_id=tst.id
        and tst.t_language_id=tlt.t_language_id
        and tst.id=tlt.table_id
        and tlt.table_name='t_street_type'
        and tlt.t_language_id=?
        and tr.id=?
          ]]>
        </cur_street>
        <cur_building>
            <![CDATA[
        select tb.id as id, tb.building_num  as text from ch_ksk.t_request tr,
        ch_ksk.t_flats tf,
        ch_ksk.t_building tb
        where
        tr.t_flats_id=tf.id
        and tf.t_building_id=tb.id
        and tr.id=?
          ]]>
        </cur_building>
        <cur_flat>
            <![CDATA[
        select tf.id as id, tf.flat_num  as text from ch_ksk.t_request tr,
        ch_ksk.t_flats tf
        where
        tr.t_flats_id=tf.id
        and tr.id=?
            ]]>
        </cur_flat>
        <cur_image>
            <![CDATA[
        select f.file_id||'.'||
        (select  case f.file_type when 'image/jpeg' then 'jpg'
                  when 'image/jpg' then 'jpg'
				  when 'image/png'  then 'png'
				  when 'image/gif'  then 'gif'
				  when 'image/ico'  then 'ico'
				  when 'image/otf'  then 'otf'
				  when 'image/eot'  then 'eot'
				  when 'image/svg'  then 'svg'
				  when 'image/tiff' then 'tiff'
				  when 'image/psd'  then 'psd'
				  when 'image/bmp'  then 'bmp'
				  when 'image/x-ms-bmp'  then 'bmp'
				  when 'image/raw'  then 'raw'
				  when 'application/pdf'  then 'pdf'
				  end) as file_id,
                  1 as file_count,
        f.file_type,
        f.file_id as id
        from auction.files f
        where f.req_id=?
          and f.table_name=?
         ]]>
        </cur_image>
        <cur_image_notif>
            <![CDATA[
        select f.file_id||'.'||
        (select  case f.file_type when 'image/jpeg' then 'jpg'
                  when 'image/jpg' then 'jpg'
				  when 'image/png'  then 'png'
				  when 'image/gif'  then 'gif'
				  when 'image/ico'  then 'ico'
				  when 'image/otf'  then 'otf'
				  when 'image/eot'  then 'eot'
				  when 'image/svg'  then 'svg'
				  when 'image/tiff' then 'tiff'
				  when 'image/psd'  then 'psd'
				  when 'image/bmp'  then 'bmp'
				  when 'image/x-ms-bmp'  then 'bmp'
				  when 'image/raw'  then 'raw'
				  when 'application/pdf'  then 'pdf'
				  end) as file_id,
        (select count(1) from  auction.files f1 where f1.msg_id=f.msg_id) as file_count,
        f.file_type,
        f.file_id as id,
        f.file_name as file_name
        from auction.files f
        where f.msg_id=?
         ]]>
        </cur_image_notif>
        <cur_reject_reason>
            <![CDATA[
SELECT t2.lang_text as text
  FROM ch_ksk.t_any_lang_text t2
 WHERE t2.table_name='t_req_reasons'
   AND t2.table_id=?
   AND t2.t_language_id=?
          ]]>
        </cur_reject_reason>
        <cit_req_type>
            <![CDATA[
WITH RECURSIVE q (id, serv_id ,lang_text, path, lang, to_ksk, level, folder, city) AS (
with lang as (select id, cast(? as bigint) as city from ch_ksk.t_language where id=?)
    select ts.id,ts.serv_id, tlt.lang_text as text, ltrim(cast(ts.id as varchar)) as path,tlt.t_language_id as lang, ts.to_ksk,1 as level, ts.is_last_lvl as folder, lang.city
      FROM ch_ksk.t_services ts, ch_ksk.t_any_lang_text tlt, lang
     WHERE ts.id=tlt.table_id
       AND tlt.table_name='t_services'
       AND tlt.t_language_id=lang.id
       AND ts.status=1
       AND ts.serv_id is null
    UNION ALL
    select ts2.id,ts2.serv_id, tlt2.lang_text as text, ltrim(cast(q.path||ts2.id as varchar)) as path, q.lang, ts2.to_ksk, q.level + 1 as level, ts2.is_last_lvl as folder, q.city
      from ch_ksk.t_services ts2, ch_ksk.t_any_lang_text tlt2,q
     WHERE ts2.id=tlt2.table_id
       AND tlt2.table_name='t_services'
       AND ts2.status=1
       AND tlt2.t_language_id=q.lang
       and q.id=ts2.serv_id
)
SELECT q.id , q.serv_id,q.lang_text as text, q.path, q.to_ksk, q.level, q.folder
  FROM q
 WHERE case when q.to_ksk = 1 then exists (select 1 from ch_ksk.t_city_servs cs where cs.t_services_id=q.id and cs.t_city_id=q.city)
       else 1=1 end
 union all
 select distinct -1 as id,0 as serv_id, (select case when q.lang=2 then 'Барлығы' when q.lang=1 then 'Все' end) as text, '0' path, 2 to_ksk, 0 as level, '0' as folder from q
ORDER BY to_ksk desc, path
            ]]>
        </cit_req_type>
        <req_subtype_main>
            <![CDATA[
SELECT t1.id, t2.lang_text as text, t1.t_req_type_id as sid
  FROM ch_ksk.t_req_subtype t1, ch_ksk.t_any_lang_text t2
 WHERE t1.id=t2.table_id
   AND t2.table_name='t_req_subtype'
   AND t2.t_language_id=?
 ORDER BY 1
            ]]>
        </req_subtype_main>
        <req_type>
            <![CDATA[
WITH RECURSIVE q (id, serv_id ,lang_text, path, lang, to_ksk, level) AS (
    select ts.id,ts.serv_id, tlt.lang_text as text, ltrim(cast(ts.id as varchar)) as path,tlt.t_language_id as lang, ts.to_ksk,1 as level
      FROM ch_ksk.t_services ts, ch_ksk.t_any_lang_text tlt
     WHERE ts.id=tlt.table_id
       AND tlt.table_name='t_services'
       AND tlt.t_language_id=?
       AND ts.status=1
       AND ts.serv_id is null
    UNION ALL
    select ts2.id,ts2.serv_id, tlt2.lang_text as text, ltrim(cast(q.path||ts2.id as varchar)) as path, q.lang, ts2.to_ksk, q.level + 1 as level
      from ch_ksk.t_services ts2, ch_ksk.t_any_lang_text tlt2,q
     WHERE ts2.id=tlt2.table_id
       AND tlt2.table_name='t_services'
       AND ts2.status=1
       AND tlt2.t_language_id=q.lang
       and q.id=ts2.serv_id
)
SELECT case when q.serv_id is null then -100 else q.id end as id, q.serv_id,q.lang_text as text, q.path, q.to_ksk, q.level

  FROM q
 WHERE q.level<3
ORDER BY q.to_ksk desc, q.path
            ]]>
        </req_type>
    <req_type_all_serv>
        WITH RECURSIVE q (id, serv_id ,lang_text, path, lang, to_ksk, level) AS (
        with param as (select ? as lang)
        select -1 as id, null as serv_id, case when 1 = 2 then 'Жаңа иерархия' else 'Новая иерархия' end as text, '0' as path, param.lang as lang, 0 as to_ksk, 0 as level
        from param
        union all
        select ts.id,ts.serv_id, tlt.lang_text as text, ltrim(cast(ts.id as varchar)) as path,tlt.t_language_id as lang, ts.to_ksk,1 as level
        FROM ch_ksk.t_services ts, ch_ksk.t_any_lang_text tlt,param
        WHERE ts.id=tlt.table_id
        AND tlt.table_name='t_services'
        AND tlt.t_language_id=param.lang
        AND ts.status=1
        AND ts.to_ksk != 1
        AND ts.serv_id is null
        UNION ALL
        select ts2.id,ts2.serv_id, tlt2.lang_text as text, ltrim(cast(q.path||ts2.id as varchar)) as path, q.lang, ts2.to_ksk, q.level + 1 as level
        from ch_ksk.t_services ts2, ch_ksk.t_any_lang_text tlt2,q
        WHERE ts2.id=tlt2.table_id
        AND tlt2.table_name='t_services'
        AND ts2.status=1
        AND tlt2.t_language_id=q.lang
        and q.id=ts2.serv_id
        )
        SELECT q.id, q.serv_id,
        q.lang_text as text,
        q.path, q.to_ksk, q.level
        FROM q
        ORDER BY q.path
        </req_type_all_serv>
        <req_type_all_quest>
            WITH RECURSIVE q (id, serv_id ,lang_text, path, lang, to_ksk, level) AS (
            with param as (select ? as lang)
            select ts.id,ts.serv_id, tlt.lang_text as text, ltrim(cast(ts.id as varchar)) as path,tlt.t_language_id as lang, ts.to_ksk,1 as level
            FROM ch_ksk.t_services ts, ch_ksk.t_any_lang_text tlt,param
            WHERE ts.id=tlt.table_id
            AND tlt.table_name='t_services'
            AND tlt.t_language_id=param.lang
            AND ts.status=1
            AND ts.to_ksk != 1
            AND ts.serv_id is null
            UNION ALL
            select ts2.id,ts2.serv_id, tlt2.lang_text as text, ltrim(cast(q.path||ts2.id as varchar)) as path, q.lang, ts2.to_ksk, q.level + 1 as level
            from ch_ksk.t_services ts2, ch_ksk.t_any_lang_text tlt2,q
            WHERE ts2.id=tlt2.table_id
            AND tlt2.table_name='t_services'
            AND ts2.status=1
            AND tlt2.t_language_id=q.lang
            and q.id=ts2.serv_id
            )
            SELECT q.id, q.serv_id,
            q.lang_text as text,
            q.path, q.to_ksk, q.level
            FROM q
            ORDER BY q.path
        </req_type_all_quest>
        <serv_all>
            WITH RECURSIVE q (id, serv_id ,lang_text, path, lang, to_ksk, level) AS (
            with param as (select ? as lang)
            select ts.id,ts.serv_id, tlt.lang_text as text, ltrim(cast(ts.id as varchar)) as path,tlt.t_language_id as lang, ts.to_ksk,1 as level
            FROM ch_ksk.t_services ts, ch_ksk.t_any_lang_text tlt,param
            WHERE ts.id=tlt.table_id
            AND tlt.table_name='t_services'
            AND tlt.t_language_id=param.lang
            AND ts.to_ksk != 1
            AND ts.serv_id is null
            UNION ALL
            select ts2.id,ts2.serv_id, tlt2.lang_text as text, ltrim(cast(q.path||ts2.id as varchar)) as path, q.lang, ts2.to_ksk, q.level + 1 as level
            from ch_ksk.t_services ts2, ch_ksk.t_any_lang_text tlt2,q
            WHERE ts2.id=tlt2.table_id
            AND tlt2.table_name='t_services'
            AND tlt2.t_language_id=q.lang
            and q.id=ts2.serv_id
            )
            SELECT q.id, q.serv_id,
            q.lang_text as text,
            q.path, q.to_ksk, q.level
            FROM q
            ORDER BY q.path
        </serv_all>
        <req_type_ksk>
            <![CDATA[
            WITH RECURSIVE q (id, serv_id ,lang_text, path, lang, to_ksk, level, folder) AS (
    select ts.id,ts.serv_id, tlt.lang_text as text, ltrim(cast(ts.id as varchar)) as path,tlt.t_language_id as lang, ts.to_ksk,1 as level, ts.is_last_lvl as folder
      FROM ch_ksk.t_services ts, ch_ksk.t_any_lang_text tlt, ch_ksk.t_city_servs cs
     WHERE ts.id=tlt.table_id
       AND tlt.table_name='t_services'
       AND tlt.t_language_id=?
       AND ts.status=1
       AND ts.to_ksk=1
       AND ts.serv_id is null
       AND ts.id=cs.t_services_id
       AND cs.t_city_id=cast(? as bigint)
    UNION ALL
    select ts2.id,ts2.serv_id, tlt2.lang_text as text, ltrim(cast(q.path||ts2.id as varchar)) as path, q.lang, ts2.to_ksk, q.level + 1 as level, ts2.is_last_lvl as folder
      from ch_ksk.t_services ts2, ch_ksk.t_any_lang_text tlt2,q
     WHERE ts2.id=tlt2.table_id
       AND tlt2.table_name='t_services'
       AND ts2.status=1
       AND tlt2.t_language_id=q.lang
       and q.id=ts2.serv_id
)
SELECT case when lower(q.folder) = 'folder' then -100 else q.id end as id, q.serv_id,q.lang_text as text, q.path, q.to_ksk, q.level, q.folder
 FROM q
ORDER BY q.path
            ]]>
        </req_type_ksk>
        <req_type_ksk_filter>
            <![CDATA[
            WITH RECURSIVE q (id, serv_id ,lang_text, path, lang, to_ksk, level, folder) AS (
    select ts.id,ts.serv_id, tlt.lang_text as text, ltrim(cast(ts.id as varchar)) as path,tlt.t_language_id as lang, ts.to_ksk,1 as level, ts.is_last_lvl as folder
      FROM ch_ksk.t_services ts, ch_ksk.t_any_lang_text tlt, ch_ksk.t_city_servs cs
     WHERE ts.id=tlt.table_id
       AND tlt.table_name='t_services'
       AND tlt.t_language_id=?
       AND ts.status=1
       AND ts.to_ksk=1
       AND ts.serv_id is null
       AND ts.id=cs.t_services_id
       AND cs.t_city_id=cast(? as bigint)
    UNION ALL
    select ts2.id,ts2.serv_id, tlt2.lang_text as text, ltrim(cast(q.path||ts2.id as varchar)) as path, q.lang, ts2.to_ksk, q.level + 1 as level, ts2.is_last_lvl as folder
      from ch_ksk.t_services ts2, ch_ksk.t_any_lang_text tlt2,q
     WHERE ts2.id=tlt2.table_id
       AND tlt2.table_name='t_services'
       AND ts2.status=1
       AND tlt2.t_language_id=q.lang
       and q.id=ts2.serv_id
)
SELECT q.id , q.serv_id,q.lang_text as text, q.path, q.to_ksk, q.level, q.folder
 FROM q
 ORDER BY q.path
            ]]>
        </req_type_ksk_filter>
        <serv_type>
            <![CDATA[
            WITH RECURSIVE q (id, serv_id ,lang_text, path, lang, to_ksk, level) AS (
            select ts.id,ts.serv_id, tlt.lang_text as text, ltrim(cast(ts.id as varchar)) as path,tlt.t_language_id as lang, ts.to_ksk, 1 as level
            FROM ch_ksk.t_services ts, ch_ksk.t_any_lang_text tlt
            WHERE ts.id=tlt.table_id
            AND tlt.table_name='t_services'
            AND tlt.t_language_id=?
            AND ts.status=1
            AND ts.to_ksk<>1
            AND ts.serv_id is null
            UNION ALL
            select ts2.id,ts2.serv_id, tlt2.lang_text as text, ltrim(cast(q.path||ts2.id as varchar)) as path, q.lang, ts2.to_ksk, q.level +1 as level
            from ch_ksk.t_services ts2, ch_ksk.t_any_lang_text tlt2,q
            WHERE ts2.id=tlt2.table_id
            AND tlt2.table_name='t_services'
            AND ts2.status=1
            AND tlt2.t_language_id=q.lang
            and q.id=ts2.serv_id
            and q.level <2
            )
            SELECT case when q.serv_id is null then -100 else q.id end as id, q.serv_id,q.lang_text as text, q.path, q.to_ksk, level
            FROM q
            ORDER BY q.path
            ]]>
        </serv_type>
        <serv_subtype>
            <![CDATA[
           select ts.id,
            ts.serv_id,
            tlt.lang_text as text,
            ltrim(cast(ts.id as varchar)) as path,
            tlt.t_language_id as lang,
            ts.to_ksk,
             (select tlt2.lang_text from ch_ksk.t_serv_quest_ans tsq inner join ch_ksk.t_any_lang_text tlt2
            on tsq.id=tlt2.table_id and tlt2.t_language_id=tlt.t_language_id and tlt2.table_name='t_serv_quest_ans' where ts.id=tsq.t_services_id and tsq.is_quest=2
            ) as quest,
            ( WITH RECURSIVE q (id, serv_id , path , level) AS (
            select ts1.id,ts1.serv_id, ltrim(cast(ts1.id as varchar)) as path, 1 as level
            FROM ch_ksk.t_services ts1
            WHERE
            ts1.status=1
            AND ts1.id=ts.serv_id
            UNION ALL
            select ts2.id,ts2.serv_id, ltrim(cast(q.path||ts2.id as varchar)) as path, q.level +1 as level
            from ch_ksk.t_services ts2, q
            WHERE ts2.status=1
            and q.id=ts2.serv_id
            )
            SELECT max(level)
            FROM q) as level
            FROM ch_ksk.t_services ts inner join ch_ksk.t_any_lang_text tlt
            ON ts.id=tlt.table_id
            AND tlt.table_name='t_services'
            AND tlt.t_language_id=?
            AND ts.status=1
               ]]>
        </serv_subtype>
        <serv_questions>
            <![CDATA[
            select tsq.id, tlt.lang_text as text  from ch_ksk.t_serv_quest_ans tsq,
			  ch_ksk.t_any_lang_text tlt
		    where  tsq.status=1
			   and tsq.id=tlt.table_id
			   and tsq.is_quest=1
			   and tlt.table_name='t_serv_quest_ans'
			   and tlt.t_language_id=?
            ]]>
        </serv_questions>
        <serv_questions_mng>
            <![CDATA[
             with param as (select ? as lang_id)
          select tlt.lang_text as text , ts.id as ts_id, tlt2.lang_text as serv_text from ch_ksk.t_serv_quest_ans tsq, ch_ksk.t_services ts,
			  ch_ksk.t_any_lang_text tlt, ch_ksk.t_any_lang_text tlt2, param p
		    where  tsq.status=1
			   and tsq.id=tlt.table_id
			   and tsq.is_quest=1
			   and tlt.table_name='t_serv_quest_ans'
			   and tlt.t_language_id=p.lang_id
			   and tsq.t_services_id = ts.id
			   and ts.id=tsq.t_services_id
			   and ts.status=1
			   and ts.to_ksk<>1
			   and tlt2.table_name='t_services'
			   and tlt2.table_id=ts.id
			   and tlt2.t_language_id=tlt.t_language_id
            ]]>
        </serv_questions_mng>
        <req_type_serv>
            <![CDATA[
           select distinct fff.id, fff.serv_id, fff.text, fff.to_ksk, fff.level from (
            select distinct (serv.*) from (
            WITH RECURSIVE q (id, serv_id ,lang_text, lang, to_ksk, level) AS (
            select ts.id,ts.serv_id,tlt.lang_text as text, tlt.t_language_id as lang, ts.to_ksk, 1 as level, ltrim(cast(ts.id as varchar)) as path
            FROM ch_ksk.t_services ts, ch_ksk.t_company_services tcs,  ch_ksk.t_any_lang_text tlt
            WHERE ts.id=tlt.table_id
            AND tlt.table_name='t_services'
            AND tlt.t_language_id=?
            AND ts.status=1
            AND ts.to_ksk<>1
            AND ts.id =tcs.serv_id
            and tcs.status=1
            and tcs.company_id=?
            UNION ALL
            select ts2.id,ts2.serv_id, tlt2.lang_text as text, q.lang, ts2.to_ksk, q.level +1 as level, ltrim(cast(ts2.id as varchar))||q.path as path
            from ch_ksk.t_services ts2, ch_ksk.t_any_lang_text tlt2,q
            WHERE ts2.id=tlt2.table_id
            AND tlt2.table_name='t_services'
            AND ts2.status=1
            AND tlt2.t_language_id=q.lang
            and q.serv_id=ts2.id
            )
            SELECT case when q.serv_id is null then -100 else q.id end as id, q.serv_id,q.lang_text as text, q.to_ksk, q.level, q.path
            FROM q
            where q.level>(select max(k.level)-2 from q as k)
            ORDER BY q.path) as serv) as  fff
            ]]>
        </req_type_serv>
        <supp_serv_type_last_lvl>
            <![CDATA[
              WITH RECURSIVE q (id, serv_id ,lang_text, path, lang, to_ksk, last_lvl, level) AS (
        with lang as (select id from ch_ksk.t_language where id=?)
            select ts.id,ts.serv_id, tlt.lang_text as text, ltrim(cast(ts.id as varchar)) as path,tlt.t_language_id as lang, ts.to_ksk, ts.is_last_lvl as last_lvl,  1 as level
              FROM ch_ksk.t_services ts, ch_ksk.t_any_lang_text tlt, lang
             WHERE ts.id=tlt.table_id
               AND tlt.table_name='t_services'
               AND tlt.t_language_id=lang.id
               AND ts.status=1
               AND ts.id=?
            UNION ALL
            select ts2.id,ts2.serv_id, tlt2.lang_text as text, ltrim(cast(q.path||ts2.id as varchar)) as path, q.lang, ts2.to_ksk, ts2.is_last_lvl as last_lvl,  q.level + 1 as level
              from ch_ksk.t_services ts2, ch_ksk.t_any_lang_text tlt2,q
             WHERE ts2.id=tlt2.table_id
               AND tlt2.table_name='t_services'
               AND ts2.status=1
               AND tlt2.t_language_id=q.lang
               and q.id=ts2.serv_id
        )
        SELECT case when q.serv_id is null then -100 else q.id end as id,
            q.serv_id,
            q.lang_text as text,
            q.path,
            q.to_ksk,
            q.level,
            q.last_lvl,
            case when q.id in (select tcs.serv_id from ch_ksk.t_company_services tcs where tcs.company_id = ? and tcs.status=1 and tcs.city_id=?) then 1 else 0 end as exsts
          FROM q
          where
          q.last_lvl='0'
        ORDER BY to_ksk desc, path
            ]]>
        </supp_serv_type_last_lvl>
        <supp_serv_last_level>
            <![CDATA[
             WITH RECURSIVE q (id, serv_id, path, to_ksk, last_lvl, level) AS (
                select ts.id,ts.serv_id, ltrim(cast(ts.id as varchar)) as path, ts.to_ksk, ts.is_last_lvl as last_lvl,  1 as level
                  FROM ch_ksk.t_services ts
                 WHERE ts.status=1
                   AND ts.id=?
                UNION ALL
                select ts2.id,ts2.serv_id, ltrim(cast(q.path||ts2.id as varchar)) as path, ts2.to_ksk, ts2.is_last_lvl as last_lvl,  q.level + 1 as level
                  from ch_ksk.t_services ts2,q
                 WHERE
                    ts2.status=1
                   and q.id=ts2.serv_id
            )
            SELECT case when q.serv_id is null then -100 else q.id end as id,
                q.serv_id,
                q.path,
                q.to_ksk,
                q.level,
                q.last_lvl
              FROM q
              where
              q.last_lvl='0'
            ORDER BY to_ksk desc, path
            ]]>
        </supp_serv_last_level>
        <supp_serv_type>
            <![CDATA[
          	select distinct all_s.id,
                    all_s.serv_id,
                    all_s.text,
                    all_s.to_ksk,
                    all_s.level,
                    sel.cityid,
                    (select tltc.lang_text as cityname from ch_ksk.t_any_lang_text tltc where tltc.table_name='t_city'
                    and tltc.table_id=sel.cityid
                    and tltc.t_language_id=?
                    ),
                    all_s.path
            from (
            WITH RECURSIVE q (id, serv_id ,lang_text, path, lang, to_ksk, level) AS (
            select ts.id,ts.serv_id, tlt.lang_text as text, ltrim(cast(ts.id as varchar)) as path,tlt.t_language_id as lang, ts.to_ksk,1 as level
            FROM ch_ksk.t_services ts, ch_ksk.t_any_lang_text tlt
            WHERE ts.id=tlt.table_id
            AND tlt.table_name='t_services'
            AND tlt.t_language_id=cast(? as bigint)
            AND ts.status=1
            AND ts.serv_id in (   select all_s.id
				    from (
				    WITH RECURSIVE d (id, serv_id , path, level) AS (
				    select ts3.id,ts3.serv_id, ltrim(cast(ts3.id as varchar)) as path, 1 as level
				    FROM ch_ksk.t_services ts3
				    WHERE ts3.status=1
				    AND ts3.serv_id is null
				    UNION ALL
				    select ts5.id,ts5.serv_id, ltrim(cast(d.path||ts5.id as varchar)) as path, d.level + 1 as level
				    from ch_ksk.t_services ts5,d
				    WHERE ts5.status=1
				    and d.id=ts5.serv_id
				    )
				    SELECT d.id, d.serv_id, d.path, d.level
				    FROM d
				    ORDER BY d.path
				    ) as all_s,
				    (
				    select distinct ttt.id, ttt.serv_id, ttt.level from (
				    select distinct (serv.*) from (
				    WITH RECURSIVE p (id, serv_id, level) AS (
				    select ts4.id,ts4.serv_id, 1 as level, ltrim(cast(ts4.id as varchar)) as path
				    FROM ch_ksk.t_services ts4, ch_ksk.t_company_services tcs
				    WHERE ts4.status=1
				    AND ts4.to_ksk != 1
				    AND ts4.id =tcs.serv_id
				    and tcs.status=1
				    and tcs.company_id=cast(? as bigint)
				    UNION ALL
				    select ts6.id,ts6.serv_id,  p.level +1 as level, ltrim(cast(ts6.id as varchar))||p.path as path
				    from ch_ksk.t_services ts6, p
				    WHERE ts6.status=1
				    and p.serv_id=ts6.id
				    )
				    SELECT p.id, p.serv_id, p.level, p.path
				    FROM p
				    ) as serv ORDER BY serv.path) as  ttt
				    ) sel
				    where
				     all_s.id = sel.id
				    and  all_s.level = 1
				    order by all_s.path)
            UNION ALL
            select ts2.id,ts2.serv_id, tlt2.lang_text as text, ltrim(cast(q.path||ts2.id as varchar)) as path, q.lang, ts2.to_ksk, q.level + 1 as level
            from ch_ksk.t_services ts2, ch_ksk.t_any_lang_text tlt2,q
            WHERE ts2.id=tlt2.table_id
            AND tlt2.table_name='t_services'
            AND ts2.status=1
            AND tlt2.t_language_id=q.lang
            and q.id=ts2.serv_id
            )
            SELECT q.id, q.serv_id,q.lang_text as text, q.path, q.to_ksk, q.level
            FROM q
            ORDER BY q.to_ksk desc,q.path
            ) as all_s left outer join
            (
            select distinct fff.id, fff.serv_id, fff.text, fff.to_ksk, fff.level, fff.cityid  from (
            select distinct (serv.*) from (
            WITH RECURSIVE q (id, serv_id ,lang_text, lang, to_ksk, level) AS (
            select ts.id,ts.serv_id,tlt.lang_text as text, tlt.t_language_id as lang, ts.to_ksk, 1 as level, ltrim(cast(ts.id as varchar)) as path,  tcs.city_id as cityid
            FROM ch_ksk.t_services ts, ch_ksk.t_company_services tcs,  ch_ksk.t_any_lang_text tlt
            WHERE ts.id=tlt.table_id
            AND tlt.table_name='t_services'
            AND tlt.t_language_id=cast(? as bigint)
            AND ts.status=1
            AND ts.to_ksk != 1
            AND ts.id =tcs.serv_id
            and tcs.status=1
            and tcs.company_id=cast(? as bigint)
            UNION ALL
            select ts2.id,ts2.serv_id, tlt2.lang_text as text, q.lang, ts2.to_ksk, q.level +1 as level, ltrim(cast(ts2.id as varchar))||q.path as path, q.cityid
            from ch_ksk.t_services ts2, ch_ksk.t_any_lang_text tlt2,q
            WHERE ts2.id=tlt2.table_id
            AND tlt2.table_name='t_services'
            AND ts2.status=1
            AND tlt2.t_language_id=q.lang
            and q.serv_id=ts2.id
            )
            SELECT q.id, q.serv_id,q.lang_text as text, q.to_ksk, q.level, q.path, q.cityid
            FROM q
            ) as serv ORDER BY serv.path) as  fff
            ) sel
             on all_s.id = sel.id
            where  all_s.level = 1
            order by all_s.path, sel.cityid
            ]]>
        </supp_serv_type>
        <req_subtype>
            <![CDATA[
SELECT t1.id, t2.lang_text as text, t1.t_req_type_id as sid
  FROM ch_ksk.t_req_subtype t1, ch_ksk.t_any_lang_text t2
 WHERE t1.id=t2.table_id
   AND t2.table_name='t_req_subtype'
   AND t2.t_language_id=?
   AND t1.t_req_type_id=?
 ORDER BY 1
            ]]>
        </req_subtype>
        <req_priority>
            <![CDATA[
SELECT t1.id, t2.lang_text as text
  FROM ch_ksk.t_req_priority t1, ch_ksk.t_any_lang_text t2
 WHERE t1.id=t2.table_id
   AND t2.table_name='t_req_priority'
   AND t2.t_language_id=?
 ORDER BY 1
            ]]>
        </req_priority>
        <req_status>
            <![CDATA[
with params as (select cast(? as bigint) as lang)
SELECT t1.id, t2.lang_text as text
  FROM ch_ksk.t_req_status t1, ch_ksk.t_any_lang_text t2, params p
 WHERE t1.id=t2.table_id
   AND t2.table_name='t_req_status'
   AND t2.t_language_id=p.lang
   AND t1.id in (0,9)
UNION ALL
select -1 as id, tlt.lang_text as text from ch_ksk.t_any_lang_text tlt, params p where tlt.table_name='t_notification_status' and tlt.t_language_id=p.lang and tlt.table_id=0
 ORDER BY 1
            ]]>
        </req_status>
        <req_status_serv>
            <![CDATA[
SELECT t1.table_id as id, t1.lang_text as text
   FROM ch_ksk.t_any_lang_text t1
  WHERE t1.table_name='t_serv_req_company_status'
    AND t1.t_language_id=?
  ORDER BY 1
            ]]>
        </req_status_serv>
        <req_status_by_id>
            <![CDATA[
SELECT t2.lang_text as text
  FROM ch_ksk.t_req_status t1, ch_ksk.t_any_lang_text t2
 WHERE t1.id=t2.table_id
   AND t2.table_name='t_req_status'
   AND t1.id=?
   AND t2.t_language_id=?
            ]]>
        </req_status_by_id>
        <req_status_for_exec>
            <![CDATA[
SELECT t1.id, t2.lang_text as text
  FROM ch_ksk.t_req_status t1, ch_ksk.t_any_lang_text t2
 WHERE t1.id=t2.table_id
   AND t2.table_name='t_req_status'
   AND t1.id in (4)
   AND t2.t_language_id=?
 ORDER BY 1
            ]]>
        </req_status_for_exec>
        <req_status_by_hist>
            <![CDATA[
SELECT min(T0.t_req_status_id) stat_id
FROM ch_ksk.t_oper_history T0
WHERE T0.t_request_id=?
AND NOT EXISTS (select 1 from ch_ksk.t_oper_history T1 where T1.sid=T0.id)
            ]]>
        </req_status_by_hist>
        <req_reason>
            <![CDATA[
SELECT t1.id, t2.lang_text as text
  FROM ch_ksk.t_req_reasons t1, ch_ksk.t_any_lang_text t2
 WHERE t1.id=t2.table_id
   AND t2.table_name='t_req_reasons'
   AND t2.t_language_id=?
   AND t1.t_req_status_id=?
 ORDER BY 1
            ]]>
        </req_reason>
        <all_city>
            <![CDATA[
SELECT t1.id, t2.lang_text as text
  FROM ch_ksk.t_city t1, ch_ksk.t_any_lang_text  t2
 WHERE t1.id=t2.table_id
   AND t2.table_name='t_city'
   AND t2.t_language_id=?
 ORDER BY 1
            ]]>
        </all_city>
        <all_serv_city>
            select  tc.id, tlt.lang_text as text
            from  ch_ksk.t_city tc , ch_ksk.t_any_lang_text  tlt, (select distinct tcs.city_id from ch_ksk.t_company_services tcs where tcs.status=1 and tcs.company_id=?) as tcity
            where tc.id = tcity.city_id
              and tlt.table_name='t_city'
              and tlt.t_language_id=?
              and tc.id=tlt.table_id
            order by text asc
        </all_serv_city>
        <all_street>
            <![CDATA[
 SELECT ds.id, tls.description||' '||tlt.lang_text as text
  FROM ch_ksk.t_street ds, ch_ksk.t_lang_street tls, ch_ksk.t_street_type dst, ch_ksk.t_any_lang_text tlt
 WHERE ds.id=tls.t_street_id
  AND ds.street_type_id=dst.id
  AND tls.t_language_id=?
  AND tlt.t_language_id=tls.t_language_id
  AND tlt.table_name='t_street_type'
  AND tlt.table_id=dst.id
  AND ds.t_city_id=?
  ORDER BY 1
            ]]>
        </all_street>
        <all_street_ksk>
            <![CDATA[
           SELECT ds.id, tls.description||' '||tlt.lang_text as text
  FROM ch_ksk.t_street ds, ch_ksk.t_lang_street tls, ch_ksk.t_street_type dst, ch_ksk.t_any_lang_text tlt
 WHERE ds.id=tls.t_street_id
  AND ds.street_type_id=dst.id
  AND tls.t_language_id=?
  AND tlt.t_language_id=tls.t_language_id
  AND tlt.table_name='t_street_type'
  AND tlt.table_id=dst.id
  AND ds.t_city_id=?
  AND ds.id in (select b.t_street_id from ch_ksk.t_building b,ch_ksk.t_building_ksk bk where b.id=bk.t_building_id and bk.t_ksk_id=cast(? as bigint) and bk.status = 1)
  ORDER BY 1
            ]]>
        </all_street_ksk>
        <just_all_building>
            <![CDATA[
SELECT id, building_num||(select  coalesce('/'||coalesce(build_subunit,null),'')) as text
  FROM ch_ksk.t_building
 WHERE t_street_id=?
 ORDER BY 1
            ]]>
        </just_all_building>
        <all_building>
            <![CDATA[
 SELECT tb.id as id, case when tb.flat_from is not null and tb.flat_to is not null then
                tb.building_num||(select  coalesce('/'||coalesce(tb.build_subunit,null),''))||' '||case when ? = 1 then '(кв.' else '(п.' end||''||tb.flat_from||' - '||tb.flat_to||')'
           else tb.building_num||(select  coalesce('/'||coalesce(tb.build_subunit,null),'')) end as text
  FROM ch_ksk.t_building tb, ch_ksk.t_building_ksk tbk, ch_ksk.t_ksk tk
 WHERE tb.t_street_id=?
 and tbk.t_building_id = tb.id
 and tbk.status = 1
 and tbk.t_ksk_id=tk.id
 and tk.status=1
 and tk.id=?
 ORDER BY 1
            ]]>
        </all_building>
        <all_building_serv>
            <![CDATA[
 SELECT distinct tb.id as id, case when tb.flat_from is not null and tb.flat_to is not null then
                tb.building_num||(select  coalesce('/'||coalesce(tb.build_subunit,null),''))||' '||case when ? = 1 then '(кв.' else '(п.' end||''||tb.flat_from||' - '||tb.flat_to||')'
           else tb.building_num||(select  coalesce('/'||coalesce(tb.build_subunit,null),'')) end as text
  FROM ch_ksk.t_building tb, ch_ksk.t_flats tf, ch_ksk.t_relation tr
 WHERE tr.t_flats_id=tf.id
 and tf.t_building_id=tb.id
 and tr.status not in (3, 4)
 and  tb.t_street_id=?
 ORDER BY 1
            ]]>
        </all_building_serv>
        <req_disp_exec>
            <![CDATA[
SELECT tp.id,tu.lastname||' '||tu.firstname||coalesce(' '||tu.middlename,'') as text
FROM ch_ksk.t_position tp, ch_ksk.t_user tu, ch_ksk.t_position_types pt
WHERE tp.t_user_id=tu.id
  AND tp.t_position_types_id=pt.id
  AND pt.code='ds'
  AND tu.user_status_id=?
 ORDER by 2
            ]]>
        </req_disp_exec>
        <req_executer>
            <![CDATA[
SELECT tp.id,tu.lastname||' '||tu.firstname||coalesce(' '||tu.middlename,'') as text
FROM ch_ksk.t_position tp, ch_ksk.t_user tu, ch_ksk.t_position_types pt
WHERE tp.t_user_id=tu.id
  AND tp.t_position_types_id=pt.id
  AND pt.code!='ds'
  AND tu.user_status_id=?
 ORDER by 2
            ]]>
        </req_executer>
        <all_flat>
            <![CDATA[
SELECT tf.id as id, tf.flat_num||(select  coalesce('/'||coalesce(flat_subunit,null),'')) as text
  FROM ch_ksk.t_flats tf, ch_ksk.t_building tb, ch_ksk.t_building_ksk tbk, ch_ksk.t_ksk tk
 WHERE tb.id = ?
 and tf.t_building_id = tb.id
 and tbk.t_building_id = tb.id
 and tbk.status = 1
 and tbk.t_ksk_id=tk.id
 and tk.status=1
 and tk.id=?
 ORDER BY 1
            ]]>
        </all_flat>
        <all_flat_serv>
            <![CDATA[
SELECT tf.id as id, tf.flat_num||(select  coalesce('/'||coalesce(flat_subunit,null),'')) as text
  FROM ch_ksk.t_building tb, ch_ksk.t_flats tf, ch_ksk.t_relation tr
 WHERE tr.t_flats_id=tf.id
 and tf.t_building_id=tb.id
 and tr.status not in (3, 4)
 and  tb.id=?
 ORDER BY 1
            ]]>
        </all_flat_serv>
        <all_flat_num>
            <![CDATA[
SELECT tf.flat_num as text
  FROM ch_ksk.t_flats tf, ch_ksk.t_building tb, ch_ksk.t_building_ksk tbk, ch_ksk.t_ksk tk
 WHERE tb.id = ?
 and tf.t_building_id = tb.id
 and tbk.t_building_id = tb.id
 and tbk.status = 1
 and tbk.t_ksk_id=tk.id
 and tk.status=1
 and tk.id=?
 ORDER BY 1

            ]]>
        </all_flat_num>
        <all_flat_fract>
            <![CDATA[
SELECT tf.flat_subunit as text
  FROM ch_ksk.t_flats tf
 WHERE tf.t_building_id = ?
   AND tf.flat_num = cast(? as int)
 ORDER BY 1

            ]]>
        </all_flat_fract>
        <reqs_list>
            <![CDATA[
WITH lang AS (
SELECT id
  FROM ch_ksk.t_language
 WHERE id=?)
 SELECT t1.id as recid,
        t1.id as doc_number,
        t1.dat_reg,
       (select lt1.lang_text from ch_ksk.t_any_lang_text lt1 where lt1.table_id=t1.t_services_id and lt1.table_name='t_services' and lt1.t_language_id=lang.id) as req_type,
       (select lt2.lang_text from ch_ksk.t_any_lang_text lt2 where lt2.table_id=t1.t_req_priority_id and lt2.table_name='t_req_priority' and lt2.t_language_id=lang.id) as req_priority,
       (select lt3.lang_text from ch_ksk.t_any_lang_text lt3 where lt3.table_id=t1.t_req_status_id and lt3.table_name='t_req_status' and lt3.t_language_id=lang.id) as req_status,
       (select lt4.lang_text from ch_ksk.t_any_lang_text lt4 where lt4.table_id=t6.id and lt4.table_name='t_city' and lt4.t_language_id=lang.id) as req_city,
       (ch_ksk.f_street(cast (t5.id as int), cast(lang.id as int))) as req_street,
       t4.building_num as req_home,
       t3.flat_num as req_flat,
       t1.dead_line as req_deadline,
       t1.note as req_note,
       (
           (select tlt.lang_text from ch_ksk.t_any_lang_text tlt where tlt.table_id=t6.id and tlt.table_name='t_city' and tlt.t_language_id=lang.id) ||', '||
            ch_ksk.f_street(cast (t5.id as int), cast(lang.id as int))||' '||
            t4.building_num||(select  coalesce('/'||coalesce(t4.build_subunit,null),''))||
            (select ', '||tlt.lang_text||' ' from ch_ksk.t_any_lang_text tlt where tlt.table_id=1 and tlt.table_name='t_flat_type' and tlt.t_language_id=lang.id)||t3.flat_num||
            (select  coalesce( '/'||coalesce(t3.flat_subunit,null),'' ))
       ) as req_address
       ,(select lastname||' '||firstname||coalesce(' '||middlename,'') from ch_ksk.t_user where id=t1.t_user_id) as req_user
       ,t1.t_user_id as req_user_id
       ,t1.t_req_status_id as req_status_id
       ,t1.t_services_id as req_type_id
       ,t1.t_req_priority_id as req_priority_id
       ,t1.dat_close
       ,t1.rate_val
       ,t1.rate_text
       ,(select lt1.lang_text from ch_ksk.t_any_lang_text lt1 where lt1.table_id=t1.t_req_reasons_id and lt1.table_name='t_req_reasons' and lt1.t_language_id=lang.id) as req_reasons
       ,t1.t_flats_id
       ,t2.to_ksk
  FROM ch_ksk.t_request t1, ch_ksk.t_services t2, ch_ksk.t_flats t3, ch_ksk.t_building t4, ch_ksk.t_street t5, ch_ksk.t_city t6, ch_ksk.t_building_ksk t7, ch_ksk.t_ksk t8, lang
 WHERE t1.t_services_id=t2.id
   AND t1.t_flats_id=t3.id
   AND t3.t_building_id=t4.id
   AND t4.t_street_id=t5.id
   AND t6.id=t5.t_city_id
   and t4.id=t7.t_building_id
   and t7.status  in (1)
   and t7.t_ksk_id=t8.id
   and t2.to_ksk=1
   and t8.status=1
            ]]>
        </reqs_list>
        <req_cit_cont_info>
            <![CDATA[
            WITH lang AS (
            SELECT id
            FROM ch_ksk.t_language
            WHERE id=?)
            select   t7.lastname ||' '||t7.firstname||' '||coalesce(t7.middlename,'') as fio,
            t7.usermail1 as email,
            t7.home_phone as home_phone,
            t7.mobile_phone as mobile_phone,
            ((select tlt.lang_text from ch_ksk.t_any_lang_text tlt where tlt.table_id=t11.id and tlt.table_name='t_city' and tlt.t_language_id=lang.id) ||', '||
            ch_ksk.f_street(cast (t10.id as int), cast(lang.id as int))||' '||
            t9.building_num||(select  coalesce('/'||coalesce(t9.build_subunit,null),''))||
            (select ', '||tlt.lang_text||' ' from ch_ksk.t_any_lang_text tlt where tlt.table_id=1 and tlt.table_name='t_flat_type' and tlt.t_language_id=lang.id)||t8.flat_num||
            (select  coalesce( '/'||coalesce(t8.flat_subunit,null),'' ))) as req_address,
            (select tlt.lang_text from
            ch_ksk.t_serv_req_company tsr,
            ch_ksk.t_company_services tcs,
            ch_ksk.t_any_lang_text tlt
            where tsr.t_request_id=t6.id
            and tsr.t_comp_serv_id=tcs.id
            and tsr.status in (3, 4)
            and  tlt.table_name='t_company'
            and tlt.t_language_id=lang.id
            and tlt.table_id=tcs.company_id) as req_comp_name
            from
            ch_ksk.t_serv_req_company  t1,
            ch_ksk.t_company_services t2,
            ch_ksk.t_company t3,
            ch_ksk.t_comp_position t4,
            ch_ksk.t_user t5,
            ch_ksk.t_request t6,
            ch_ksk.t_user t7,
            ch_ksk.t_flats t8,
            ch_ksk.t_building t9,
            ch_ksk.t_street t10,
            ch_ksk.t_city t11,
            lang
            where t1.t_comp_serv_id=t2.id
            and t1.status in (2, 3, 4, 8, 7)
            and t2.status=1
            and t2.company_id=t3.id
            and t3.status=1
            and t3.id=t4.comp_id
            and t4.date_end is null
            and t4.t_user_id=t5.id
            and t5.mail1status=1
            and t6.id=t1.t_request_id
            and t6.t_services_id=t2.serv_id
            and t6.id=?
            and t5.id=?
            and t6.t_user_id=t7.id
            and t6.t_flats_id=t8.id
            and t8.t_building_id=t9.id
            and t9.t_street_id = t10.id
            and t10.t_city_id=t11.id
            ]]>
        </req_cit_cont_info>
        <reqserv_list>
            <![CDATA[
WITH lang AS (
SELECT id
  FROM ch_ksk.t_language
 WHERE id=?)
 SELECT t1.id as recid,
        t1.id as doc_number,
        t1.dat_reg,
       (select lt1.lang_text from ch_ksk.t_any_lang_text lt1 where lt1.table_id=t1.t_services_id and lt1.table_name='t_services' and lt1.t_language_id=lang.id) as req_type,
       (select lt3.lang_text from ch_ksk.t_any_lang_text lt3 where lt3.table_id=t1.t_req_status_id and lt3.table_name='t_req_status' and lt3.t_language_id=lang.id) as req_status,
       (select lt4.lang_text from ch_ksk.t_any_lang_text lt4 where lt4.table_id=t6.id and lt4.table_name='t_city' and lt4.t_language_id=lang.id) as req_city,
       to_char(t1.dead_line, 'dd.mm.yyyy hh24.mi') as req_deadline
       ,(select lastname||' '||firstname||coalesce(' '||middlename,'') from ch_ksk.t_user where id=t1.t_user_id) as req_user
       ,t1.t_user_id as req_user_id
       ,t1.t_req_status_id as req_status_id
       ,t1.t_services_id as req_type_id
       ,t1.dat_close
       ,t1.rate_val
       ,t1.rate_text
       ,(select lt1.lang_text from ch_ksk.t_any_lang_text lt1 where lt1.table_id=t1.t_req_reasons_id and lt1.table_name='t_req_reasons' and lt1.t_language_id=lang.id) as req_reasons
       ,t1.t_flats_id
       ,t1.note
       ,t8.id as comp_serv_id
       ,(select tlt.lang_text from
		ch_ksk.t_serv_req_company tsr,
		ch_ksk.t_company_services tcs,
		ch_ksk.t_any_lang_text tlt
		where tsr.t_request_id=t1.id
		and tsr.t_comp_serv_id=tcs.id
		and tsr.status in (3, 4, 7)
		and  tlt.table_name='t_company'
		and tlt.t_language_id=lang.id
		and tlt.table_id=tcs.company_id) as req_comp_name,
		( select tsr.rate from ch_ksk.t_serv_rates tsr where tsr.date_end is null and tsr.date_start <= now() and tsr.t_services_id=t2.id) as req_serv_rate,
		t9.id as compid
  FROM ch_ksk.t_request t1, ch_ksk.t_services t2,  ch_ksk.t_flats t3, ch_ksk.t_building t4, ch_ksk.t_street t5, ch_ksk.t_city t6, ch_ksk.t_company_services t8, ch_ksk.t_company t9, lang
 WHERE t1.t_services_id=t2.id
   AND t8.serv_id=t2.id
   AND t1.t_flats_id=t3.id
   AND t3.t_building_id=t4.id
   AND t4.t_street_id=t5.id
   AND t6.id=t5.t_city_id
   AND t8.city_id=t6.id
   and t2.to_ksk not in (1)
   and t8.status=1
   and t8.company_id=t9.id
   ]]>
        </reqserv_list>
		<citreqs_list>
            <![CDATA[
WITH lang AS (
SELECT id
  FROM ch_ksk.t_language
 WHERE id=?)
 SELECT t1.id as recid,
        t1.id as doc_number,
        t1.dat_reg,
       (select lt1.lang_text from ch_ksk.t_any_lang_text lt1 where lt1.table_id=t1.t_services_id and lt1.table_name='t_services' and lt1.t_language_id=lang.id) as req_type,
       (select lt2.lang_text from ch_ksk.t_any_lang_text lt2 where lt2.table_id=t1.t_req_priority_id and lt2.table_name='t_req_priority' and lt2.t_language_id=lang.id) as req_priority,
       (select lt3.lang_text from ch_ksk.t_any_lang_text lt3 where lt3.table_id=t1.t_req_status_id and lt3.table_name='t_req_status' and lt3.t_language_id=lang.id) as req_status,
       (select lt4.lang_text from ch_ksk.t_any_lang_text lt4 where lt4.table_id=t6.id and lt4.table_name='t_city' and lt4.t_language_id=lang.id) as req_city,
       (ch_ksk.f_street(cast (t5.id as int), cast(lang.id as int))) as req_street,
       t4.building_num as req_home,
       t3.flat_num as req_flat,
       t1.dead_line as req_deadline,
       t1.note as req_note,
       (
           (select tlt.lang_text from ch_ksk.t_any_lang_text tlt where tlt.table_id=t6.id and tlt.table_name='t_city' and tlt.t_language_id=lang.id) ||', '||
            ch_ksk.f_street(cast (t5.id as int), cast(lang.id as int))||' '||
            t4.building_num||(select  coalesce('/'||coalesce(t4.build_subunit,null),''))||
            (select ', '||tlt.lang_text||' ' from ch_ksk.t_any_lang_text tlt where tlt.table_id=1 and tlt.table_name='t_flat_type' and tlt.t_language_id=lang.id)||t3.flat_num||
            (select  coalesce( '/'||coalesce(t3.flat_subunit,null),'' ))
       ) as req_address
       ,(select lastname||' '||firstname||coalesce(' '||middlename,'') from ch_ksk.t_user where id=t1.t_user_id) as req_user
       ,t1.t_user_id as req_user_id
       ,t1.t_req_status_id as req_status_id
       ,t1.t_services_id as req_type_id
       ,t1.t_req_priority_id as req_priority_id
       ,t1.dat_close
       ,t1.rate_val
       ,t1.rate_text
       ,(select lt1.lang_text from ch_ksk.t_any_lang_text lt1 where lt1.table_id=t1.t_req_reasons_id and lt1.table_name='t_req_reasons' and lt1.t_language_id=lang.id) as req_reasons
       ,t1.t_flats_id
       , (select tltk.lang_text from ch_ksk.t_building_ksk tbk, ch_ksk.t_ksk tk, ch_ksk.t_any_lang_text tltk  where tbk.t_building_id=t4.id and tbk.t_ksk_id=tk.id and tbk.status in (1) and tltk.table_name='t_ksk' and tltk.table_id=tk.id and tltk.t_language_id=lang.id) as ksk_name
       , (select tltk.lang_text from ch_ksk.t_building_ksk tbk, ch_ksk.t_ksk tk, ch_ksk.t_any_lang_text tltk, ch_ksk.t_ksk_doc_value kdv
            where tbk.t_building_id=t4.id
            and tbk.t_ksk_id=tk.id and tbk.status in (1)
            and tltk.table_name='t_ksk_type_ownership'
            and tltk.table_id=kdv.doc_value::bigint
            and tk.id=kdv.t_ksk_id
            and kdv.kdt_id=1
            and tltk.t_language_id=lang.id) as ownership
       ,t2.to_ksk
  FROM ch_ksk.t_request t1, ch_ksk.t_services t2, ch_ksk.t_flats t3, ch_ksk.t_building t4, ch_ksk.t_street t5, ch_ksk.t_city t6, lang
 WHERE t1.t_services_id=t2.id
   AND t1.t_flats_id=t3.id
   AND t3.t_building_id=t4.id
   AND t4.t_street_id=t5.id
   AND t6.id=t5.t_city_id
            ]]>
        </citreqs_list>
        <reqs_list_by_status>
            <![CDATA[
SELECT id, (select max(d_history) from ch_ksk.t_oper_history th
             where th.t_req_status_id=treq.t_req_status_id and th.t_request_id=treq.id) date_status,
       treq.t_user_id
  FROM ch_ksk.t_request treq
 WHERE treq.t_req_status_id in (?,?)
 ORDER BY 2
            ]]>
        </reqs_list_by_status>
        <reqs_list_by_disp>
            <![CDATA[
SELECT treq.id, note, (SELECT ch_ksk.f_get_lang_text(cast('t_city' as varchar), tc.id, tls.t_language_id) ||', '
        ||ch_ksk.f_street(cast (ts.id as int), cast(tls.t_language_id as int))||' '
        ||tb.building_num|| (select  coalesce('/'||coalesce(tb.build_subunit,null),''))||', '||
        coalesce(ch_ksk.f_get_lang_text(cast('t_flat_type' as varchar), 1, tls.t_language_id),'') || ' '||tf.flat_num||
        (select  coalesce( '/'||coalesce(tf.flat_subunit,null),'' )) as text
  FROM ch_ksk.t_flats tf, ch_ksk.t_building tb, ch_ksk.t_street ts, ch_ksk.t_street_type tst, ch_ksk.t_lang_street tls, ch_ksk.t_city tc
 WHERE tf.t_building_id=tb.id
   AND tb.t_street_id=ts.id
   AND ts.street_type_id=tst.id
   AND ts.id=tls.t_street_id
   AND tls.t_language_id=1
   AND ts.t_city_id=tc.id
   AND tf.id=treq.t_flats_id) req_addr, talt.lang_text as status_req
  FROM ch_ksk.t_request treq, ch_ksk.t_flats tf0,ch_ksk.t_any_lang_text talt
 WHERE treq.t_req_status_id in (1,2,3,7)
   AND treq.t_flats_id=tf0.id
   AND treq.t_req_status_id=talt.table_id
   AND talt.table_name='t_req_status'
   AND talt.t_language_id=1
   AND tf0.t_building_id in (select tbk.t_building_id
			from ch_ksk.t_position tp, ch_ksk.t_position_types tpt, ch_ksk.t_building_ksk tbk, ch_ksk.t_building_ksk_emps tbke
			where tp.id=cast(? as int)
			and tp.t_position_types_id=tpt.id
			and tpt.code='ds'
			and tp.id=tbke.t_position_id
			and tbk.id=tbke.t_building_ksk_id
			and tp.t_ksk_id=tbk.t_ksk_id)
 ORDER BY 1
            ]]>
        </reqs_list_by_disp>
        <reqs_list_by_build_id>
            <![CDATA[
SELECT treq.id, note, (SELECT ch_ksk.f_get_lang_text(cast('t_city' as varchar), tc.id, tls.t_language_id) ||', '
        ||ch_ksk.f_street(cast (ts.id as int), cast(tls.t_language_id as int))||' '
        ||tb.building_num|| (select  coalesce('/'||coalesce(tb.build_subunit,null),''))||', '||
        coalesce(ch_ksk.f_get_lang_text(cast('t_flat_type' as varchar), 1, tls.t_language_id),'') || ' '||tf.flat_num||
        (select  coalesce( '/'||coalesce(tf.flat_subunit,null),'' )) as text
  FROM ch_ksk.t_flats tf, ch_ksk.t_building tb, ch_ksk.t_street ts, ch_ksk.t_street_type tst, ch_ksk.t_lang_street tls, ch_ksk.t_city tc
 WHERE tf.t_building_id=tb.id
   AND tb.t_street_id=ts.id
   AND ts.street_type_id=tst.id
   AND ts.id=tls.t_street_id
   AND tls.t_language_id=1
   AND ts.t_city_id=tc.id
   AND tf.id=treq.t_flats_id) req_addr, talt.lang_text as status_req
  FROM ch_ksk.t_request treq, ch_ksk.t_flats tf0,ch_ksk.t_any_lang_text talt
 WHERE treq.t_req_status_id in (1,2,3,7)
   AND treq.t_flats_id=tf0.id
   AND treq.t_req_status_id=talt.table_id
   AND talt.table_name='t_req_status'
   AND talt.t_language_id=1
   AND tf0.t_building_id in (select tbk.t_building_id
			from ch_ksk.t_building_ksk tbk
			where tbk.t_ksk_id=?
			  and tbk.t_building_id=cast(? as bigint)
			  and tbk.status=1
			  )
 ORDER BY 1
            ]]>
        </reqs_list_by_build_id>
		<reqs_list_by_exec>
            <![CDATA[
SELECT treq.id, note, (SELECT ch_ksk.f_get_lang_text(cast('t_city' as varchar), tc.id, tls.t_language_id) ||', '
        ||ch_ksk.f_street(cast (ts.id as int), cast(tls.t_language_id as int))||' '
        ||tb.building_num|| (select  coalesce('/'||coalesce(tb.build_subunit,null),''))||', '||
        coalesce(ch_ksk.f_get_lang_text(cast('t_flat_type' as varchar), 1, tls.t_language_id),'') || ' '||tf.flat_num||
        (select  coalesce( '/'||coalesce(tf.flat_subunit,null),'' )) as text
  FROM ch_ksk.t_flats tf, ch_ksk.t_building tb, ch_ksk.t_street ts, ch_ksk.t_street_type tst, ch_ksk.t_lang_street tls, ch_ksk.t_city tc
 WHERE tf.t_building_id=tb.id
   AND tb.t_street_id=ts.id
   AND ts.street_type_id=tst.id
   AND ts.id=tls.t_street_id
   AND tls.t_language_id=1
   AND ts.t_city_id=tc.id
   AND tf.id=treq.t_flats_id) req_addr, talt.lang_text as status_req
  FROM ch_ksk.t_request treq, ch_ksk.t_flats tf0,ch_ksk.t_any_lang_text talt
 WHERE treq.t_req_status_id in (1,2,3,7)
   AND treq.t_flats_id=tf0.id
   AND treq.t_req_status_id=talt.table_id
   AND talt.table_name='t_req_status'
   AND talt.t_language_id=1
   AND exists (select 1 from ch_ksk.t_oper_history o where o.t_request_id=treq.id and o.t_position_id=cast(? as int))
 ORDER BY 1
            ]]>
        </reqs_list_by_exec>
        <reqs_hist>
            <![CDATA[
WITH RECURSIVE temp1 AS (
SELECT T1.ID,T1.SID, T1.d_history, CAST (T1.ID AS VARCHAR (50)) as PATH, 1 as LEVEL, T1.t_request_id, T1.NOTE, T1.t_position_id,T1.t_req_status_id,
        T1.del, T1.t_user_id
  FROM ch_ksk.t_oper_history T1
 WHERE T1.SID IS NULL
 UNION
SELECT T2.ID, T2.SID, T2.d_history, CAST ( temp1.PATH ||'->'|| T2.ID AS VARCHAR(50)) ,LEVEL + 1, T2.t_request_id, T2.NOTE,T2.t_position_id,T2.t_req_status_id,
        T2.del, T2.t_user_id
     FROM ch_ksk.t_oper_history T2
     INNER JOIN temp1 ON( temp1.ID= T2.SID))
SELECT T0.id recid, T0.id, T0.d_history, T0.note,
	(select tu1.lastname||' '||tu1.firstname||coalesce(' '||tu1.middlename,'') from ch_ksk.t_user tu1 where tu1.id=coalesce(T0.t_user_id, tp.t_user_id)) as fio,
	(select tpt.description from ch_ksk.t_position_types tpt1 where id=tp.t_position_types_id and T0.t_user_id is null) as pos_type,
	(select t_txt.lang_text from  ch_ksk.t_req_status t_st, ch_ksk.t_any_lang_text t_txt
        where t_st.id=T0.t_req_status_id and t_st.id=t_txt.table_id and t_txt.table_name='t_req_status' and t_txt.t_language_id=tl.id) as stat,
    T0.t_position_id,
    T0.t_req_status_id
  FROM temp1 T0, ch_ksk.t_position tp, ch_ksk.t_user tu, ch_ksk.t_position_types tpt, ch_ksk.t_language tl
 WHERE T0.t_position_id=tp.id
   AND tp.t_user_id=tu.id
   AND tp.t_position_types_id=tpt.id
   AND T0.del=0
   AND tl.id=?
   AND T0.t_request_id=?
   AND CASE WHEN cast(? as int) <> 0  THEN T0.id>(select max(id) from ch_ksk.t_oper_history th1 where th1.t_request_id=T0.t_request_id and th1.t_req_status_id=7)
	    ELSE 1 = 1 END
 ORDER BY 1 LIMIT 100
            ]]>
        </reqs_hist>
        <reqs_hist_by_user>
            <![CDATA[
WITH RECURSIVE usr as (select ? userid),temp1 AS (
SELECT T1.ID,T1.SID, T1.d_history, CAST (T1.ID AS VARCHAR (50)) as PATH, 1 as LEVEL, T1.t_request_id, T1.NOTE, T1.t_position_id,T1.t_req_status_id,
        T1.del
  FROM ch_ksk.t_oper_history T1
 WHERE T1.SID IS NULL
 UNION
SELECT T2.ID, T2.SID, T2.d_history, CAST ( temp1.PATH ||'->'|| T2.ID AS VARCHAR(50)) ,LEVEL + 1, T2.t_request_id, T2.NOTE,T2.t_position_id,T2.t_req_status_id,
        T2.del
     FROM ch_ksk.t_oper_history T2
     INNER JOIN temp1 ON( temp1.ID= T2.SID))
SELECT T0.id recid, T0.id, T0.d_history, T0.note,
	tu.lastname||' '||tu.firstname||coalesce(' '||tu.middlename,'') as fio,
	tpt.description as pos_type,
	(select t_txt.lang_text from  ch_ksk.t_req_status t_st, ch_ksk.t_any_lang_text t_txt
        where t_st.id=T0.t_req_status_id and t_st.id=t_txt.table_id and t_txt.table_name='t_req_status' and t_txt.t_language_id=?) as stat,
    T0.t_position_id,
    T0.t_req_status_id,
    T0.sid
  FROM temp1 T0, ch_ksk.t_position tp, ch_ksk.t_user tu, ch_ksk.t_position_types tpt, usr
 WHERE T0.t_request_id=?
   AND T0.t_position_id=tp.id
   AND tp.t_user_id=tu.id
   AND tp.t_position_types_id=tpt.id
   AND T0.del=0
   AND not exists (select 1 from ch_ksk.t_oper_history T3 where T3.sid=T0.id)
   AND case when (select count(pt_ch.code) from ch_ksk.t_user u_ch,ch_ksk.t_position p_ch,ch_ksk.t_position_types pt_ch
		   where u_ch.id=p_ch.t_user_id and p_ch.t_position_types_id = pt_ch.id and pt_ch.code in ('ds','mu','pr','up')
		     and p_ch.date_end is null and u_ch.id in (usr.userid) and p_ch.t_ksk_id = ?) > 0 then 1 = 1 else tu.id in (usr.userid) end
   AND CASE WHEN cast(? as int) <> 0  THEN T0.id>(select max(id) from ch_ksk.t_oper_history th1 where th1.t_request_id=T0.t_request_id and th1.t_req_status_id=7)
	    ELSE 1 = 1 END
 ORDER BY PATH LIMIT 100
            ]]>
        </reqs_hist_by_user>
        <reqs_hist_all>
            with param as (select cast(? as bigint) as lang)
            select th.id recid, th.id, th.d_history, th.note, tlt.lang_text as stat,
            coalesce (tu.lastname||' '||tu.firstname||coalesce(' '||tu.middlename,''),
            tu1.lastname||' '||tu1.firstname||coalesce(' '||tu1.middlename,'')) as fio
            from ch_ksk.t_oper_history th
            join param as param on 1=1
            inner join ch_ksk.t_req_status ts on ts.id=th.t_req_status_id
            inner join ch_ksk.t_any_lang_text tlt on tlt.table_id=ts.id and tlt.table_name='t_req_status' and tlt.t_language_id=param.lang
            left join ch_ksk.t_user tu on tu.id=th.t_user_id and th.t_user_id is not null
            left join ch_ksk.t_position tp on tp.id=th.t_position_id
            inner join ch_ksk.t_user tu1 on tu1.id=tp.t_user_id
            where t_request_id=cast(? as bigint)
            order by id
        </reqs_hist_all>
        <reqs_serv_hist_all>
            with param as (select cast(? as bigint) as lang)
            select th.id recid, th.id, th.d_history, th.note, tlt.lang_text as stat,
            coalesce (tu.lastname||' '||tu.firstname||coalesce(' '||tu.middlename,'')) as fio
            from ch_ksk.t_oper_history th
            join param as param on 1=1
            inner join ch_ksk.t_req_status ts on ts.id=th.t_req_status_id
            inner join ch_ksk.t_any_lang_text tlt on tlt.table_id=ts.id and tlt.table_name='t_req_status' and tlt.t_language_id=param.lang
            left join ch_ksk.t_user tu on tu.id=th.t_user_id and th.t_user_id is not null
            where t_request_id=cast(? as bigint)
            order by id
        </reqs_serv_hist_all>
        <position_type>
            <![CDATA[
SELECT pt.id, lng.lang_text as text
  FROM ch_ksk.t_position_types pt, ch_ksk.t_any_lang_text lng
 WHERE pt.status=1
   AND pt.code<>'ds'
   AND pt.id=lng.table_id
   AND lng.table_name='t_position_types'
   AND lng.t_language_id=?
 ORDER BY 1
            ]]>
        </position_type>
        <position_type_only_exist_employee>
            <![CDATA[
SELECT pt.id, lng.lang_text as text
  FROM ch_ksk.t_position_types pt, ch_ksk.t_any_lang_text lng
 WHERE pt.status=1
   AND pt.code<>'ds'
   AND pt.id=lng.table_id
   AND lng.table_name='t_position_types'
   AND lng.t_language_id=?
   AND pt.id in (select distinct t_position_types_id from ch_ksk.t_position
                 where t_ksk_id = ?)
 ORDER BY 1
            ]]>
        </position_type_only_exist_employee>
        <position_typeId_by_code>
            <![CDATA[
SELECT pt.id
  FROM ch_ksk.t_position_types pt
 WHERE pt.code=?
            ]]>
        </position_typeId_by_code>
        <executor_name>
            <![CDATA[
SELECT tp.id,tu.lastname||' '||tu.firstname||coalesce(' '||tu.middlename,'') as text, tp.t_user_id
  FROM ch_ksk.t_position tp, ch_ksk.t_user tu
 WHERE tp.date_end is null
   AND tp.t_user_id=tu.id
   AND tu.user_status_id=1
   AND tp.t_position_types_id=?
   AND tp.t_ksk_id=?
            ]]>
        </executor_name>
        <disp_id>
            <![CDATA[
SELECT tp.id
  FROM ch_ksk.t_position tp, ch_ksk.t_user tu, ch_ksk.t_position_types pt
 WHERE tp.t_user_id=tu.id
  AND tp.t_position_types_id=pt.id
  AND pt.code='ds'
  AND tp.date_end is null
  AND tu.id=?
            ]]>
        </disp_id>
        <disp_id_by_ksk>
            <![CDATA[
SELECT tp.id
  FROM ch_ksk.t_position tp, ch_ksk.t_user tu, ch_ksk.t_position_types pt
 WHERE tp.t_user_id=tu.id
  AND tp.t_position_types_id=pt.id
  AND pt.code='ds'
  AND tp.date_end is null
  AND tu.id=?
  AND tp.t_ksk_id=?
            ]]>
        </disp_id_by_ksk>
        <user_id_for_flat>
            <![CDATA[
SELECT tp.id
  FROM ch_ksk.t_position tp, ch_ksk.t_user tu, ch_ksk.t_position_types pt
 WHERE tp.t_user_id=tu.id
  AND tp.t_position_types_id=pt.id
  AND pt.code in ('ds','mu','pr','up')
  AND tp.date_end is null
  AND tu.id=?
            ]]>
        </user_id_for_flat>
        <spec_id>
            <![CDATA[
SELECT tp.id
  FROM ch_ksk.t_position tp, ch_ksk.t_user tu, ch_ksk.t_position_types pt
 WHERE tp.t_user_id=tu.id
  AND tp.t_position_types_id=pt.id
  AND pt.code!='ds'
  AND tp.date_end is null
  AND tu.id=?
ORDER BY tp.date_end desc
            ]]>
        </spec_id>
        <req_hist_disp>
            <![CDATA[
SELECT th0.t_position_id as id, tp0.t_user_id, tu0.usermail1 as email
  FROM ch_ksk.t_oper_history th0, ch_ksk.t_position tp0, ch_ksk.t_user tu0
 WHERE th0.id=(
		SELECT max(th.id)
		  FROM ch_ksk.t_oper_history th, ch_ksk.t_position tp, ch_ksk.t_position_types pt
		 WHERE tp.t_position_types_id=pt.id
		  AND pt.code='ds'
		  AND th.t_position_id=tp.id
		  AND th.t_request_id=?)
   AND th0.t_position_id=tp0.id
   AND tp0.t_user_id=tu0.id
            ]]>
        </req_hist_disp>
        <curr_rec_status>
            <![CDATA[
            select lt.lang_text as text
            from ch_ksk.t_any_lang_text lt
            where lt.table_name='t_req_status'
            and lt.t_language_id=?
            and lt.table_id=(select r.t_req_status_id from ch_ksk.t_request r where r.id=?)
            ]]>
        </curr_rec_status>
        <alluser_count>
            <![CDATA[
             select count(*) cnt
             from ch_ksk.t_user u, ch_ksk.t_user_status s
             where u.user_status_id = s.id
             and s.code in ('1', '-1');
            ]]>
        </alluser_count>
        <complreqcount>
            <![CDATA[
              select count(*) cnt
              from ch_ksk.t_request r
              where r.t_req_status_id in (6,8,5)
              and t_flats_id not in (select f.id
                                        from ch_ksk.t_building_ksk bk, ch_ksk.t_ksk tk, ch_ksk.t_flats f
                                        where bk.t_ksk_id = tk.id
                                        and f.t_building_id = bk.t_building_id
                                        and tk.bin = '150740013274');
            ]]>
        </complreqcount>
        <allreqcount>
            <![CDATA[
              select count(*) cnt
              from ch_ksk.t_request r
              where t_flats_id not in (select f.id
                                        from ch_ksk.t_building_ksk bk, ch_ksk.t_ksk tk, ch_ksk.t_flats f
                                        where bk.t_ksk_id = tk.id
                                        and f.t_building_id = bk.t_building_id
                                        and tk.bin = '150740013274');
            ]]>
        </allreqcount>
        <activkskcount>
            <![CDATA[
              select count(*) cnt
              from ch_ksk.t_ksk k
              where k.status=1;
            ]]>
        </activkskcount>
        <user_email>
            <![CDATA[
SELECT tu.usermail1 as text
  FROM ch_ksk.t_user tu
 WHERE tu.id=?
            ]]>
        </user_email>
        <position_email>
            <![CDATA[
SELECT tu.usermail1 as text, tu.id
  FROM ch_ksk.t_position tp, ch_ksk.t_user tu
 WHERE tp.t_user_id=tu.id
   AND tp.id=?
            ]]>
        </position_email>
        <ksk_inf>
            <![CDATA[
        select k.id,(select lang_text from ch_ksk.t_any_lang_text where table_id=k.id and table_name='t_ksk' and t_language_id=2) as desc_kz,
	    (select lang_text from ch_ksk.t_any_lang_text where table_id=k.id and table_name='t_ksk' and t_language_id=1) as desc_ru,
       k.bin,k.phone1,k.phone2,b.building_num,b.build_subunit,s.id as street_id,c.id as city_id
  from ch_ksk.t_ksk k,
       ch_ksk.t_building b,
       ch_ksk.t_street s,
       ch_ksk.t_city c
 where k.t_building_id=b.id
   and b.t_street_id=s.id
   and s.t_city_id=c.id
   and k.id=cast(? as int)
        ]]>
        </ksk_inf>
        <comp_info>
            <![CDATA[
   select  c.id,
	   (select lang_text from ch_ksk.t_any_lang_text where table_id=c.id and table_name='t_company' and t_language_id=2) as desc_kz,
	   (select lang_text from ch_ksk.t_any_lang_text where table_id=c.id and table_name='t_company' and t_language_id=1) as desc_ru,
	   c.iin_bin as bin,
	   (select doc_value from  ch_ksk.t_company_doc_value tcv,
				   ch_ksk.t_company_doc_type tct
			   where tcv.cdt_id=tct.id
				 and tcv.t_company_id=c.id
				 and tcv.status=1
				 and tct.code='MOB_PHONE'
				 and tct.status=1) as phone1,
	   (select doc_value from  ch_ksk.t_company_doc_value tcv,
				   ch_ksk.t_company_doc_type tct
			   where tcv.cdt_id=tct.id
				 and tcv.t_company_id=c.id
				 and tcv.status=1
				 and tct.code='WORK_PHONE'
				 and tct.status=1) as phone2,
	   (select doc_value from  ch_ksk.t_company_doc_value tcv,
				   ch_ksk.t_company_doc_type tct
			   where tcv.cdt_id=tct.id
				 and tcv.t_company_id=c.id
				 and tcv.status=1
				 and tct.code='COMP_HOME'
				 and tct.status=1) as building_num,
	   (select doc_value from  ch_ksk.t_company_doc_value tcv,
				   ch_ksk.t_company_doc_type tct
			   where tcv.cdt_id=tct.id
				 and tcv.t_company_id=c.id
				 and tcv.status=1
				 and tct.code='COMP_H_FR'
				 and tct.status=1) as build_subunit,
	   (select doc_value from  ch_ksk.t_company_doc_value tcv,
				   ch_ksk.t_company_doc_type tct
			   where tcv.cdt_id=tct.id
				 and tcv.t_company_id=c.id
				 and tcv.status=1
				 and tct.code='COMP_FLAT'
				 and tct.status=1) as flat_num,
	   (select doc_value from  ch_ksk.t_company_doc_value tcv,
				   ch_ksk.t_company_doc_type tct
			   where tcv.cdt_id=tct.id
				 and tcv.t_company_id=c.id
				 and tcv.status=1
				 and tct.code='COMP_F_FR'
				 and tct.status=1) as flat_subunit,
	   (select doc_value from  ch_ksk.t_company_doc_value tcv,
				   ch_ksk.t_company_doc_type tct
			   where tcv.cdt_id=tct.id
				 and tcv.t_company_id=c.id
				 and tcv.status=1
				 and tct.code='COMP_STRT'
				 and tct.status=1) as street_id,
	   (select doc_value from  ch_ksk.t_company_doc_value tcv,
				   ch_ksk.t_company_doc_type tct
			   where tcv.cdt_id=tct.id
				 and tcv.t_company_id=c.id
				 and tcv.status=1
				 and tct.code='COMP_CITY'
				 and tct.status=1) as city_id,
 	   (select doc_value from  ch_ksk.t_company_doc_value tcv,
				   ch_ksk.t_company_doc_type tct
			   where tcv.cdt_id=tct.id
				 and tcv.t_company_id=c.id
				 and tcv.status=1
				 and tct.code='EMAIL'
				 and tct.status=1) as emailSend
       from ch_ksk.t_company c
	    where c.id=cast(? as int)
            ]]>
        </comp_info>
        <address_by_flat>
            <![CDATA[
SELECT ch_ksk.f_get_lang_text(cast('t_city' as varchar), tc.id, tls.t_language_id) ||', '
        ||ch_ksk.f_street(cast (ts.id as int), cast(tls.t_language_id as int))||' '
        ||tb.building_num|| (select  coalesce('/'||coalesce(tb.build_subunit,null),''))||', '||
        ch_ksk.f_get_lang_text(cast('t_flat_type' as varchar), 1, tls.t_language_id) || ' '||tf.flat_num||
        (select  coalesce( '/'||coalesce(tf.flat_subunit,null),'' )) as text
  FROM ch_ksk.t_flats tf, ch_ksk.t_building tb, ch_ksk.t_street ts, ch_ksk.t_street_type tst, ch_ksk.t_lang_street tls, ch_ksk.t_city tc
 WHERE tf.t_building_id=tb.id
   AND tb.t_street_id=ts.id
   AND ts.street_type_id=tst.id
   AND ts.id=tls.t_street_id
   AND tls.t_language_id=1
   AND ts.t_city_id=tc.id
   AND tf.id=?
            ]]>
        </address_by_flat>
        <flat_id_by_params>
            <![CDATA[
select id from ch_ksk.t_flats where t_building_id=cast(? as bigint) and flat_num=cast(? as int)
	   and (select case when COALESCE(?,null) is null then (flat_subunit is null or flat_subunit='')
			    else lower(trim(flat_subunit)) = lower(trim(?)) end)
            ]]>
        </flat_id_by_params>
        <address_by_build>
            <![CDATA[
SELECT ch_ksk.f_get_lang_text(cast('t_city' as varchar), tc.id, tls.t_language_id) ||', '
        ||ch_ksk.f_street(cast (ts.id as int), cast(tls.t_language_id as int))||' '
        ||tb.building_num|| (select  coalesce('/'||coalesce(tb.build_subunit,null),'')) as text
  FROM ch_ksk.t_building tb, ch_ksk.t_street ts, ch_ksk.t_street_type tst, ch_ksk.t_lang_street tls, ch_ksk.t_city tc
 WHERE tb.t_street_id=ts.id
   AND ts.t_city_id=tc.id
   AND ts.street_type_id=tst.id
   AND ts.id=tls.t_street_id
   AND tls.t_language_id=1
   AND tb.id=?
            ]]>
        </address_by_build>
        <req_type_by_subtype>
            <![CDATA[
SELECT t1.id, t2.lang_text as text
  FROM ch_ksk.t_services t1, ch_ksk.t_any_lang_text t2
 WHERE t1.id=t2.table_id
   AND t2.table_name='t_services'
   AND t2.t_language_id=1
   AND t1.id=cast(? as bigint)
            ]]>
        </req_type_by_subtype>
        <check_address>
            select ch_ksk.check_address_ksk(cast(? as int),cast(? as int),?) as check
        </check_address>
        <check_address_main>
            select ch_ksk.home_exists_for_ksk(cast(? as int),coalesce(?,null),cast(? as int),cast(? as int),cast(? as int)) as check_main
        </check_address_main>
        <check_from_relation>
            select ch_ksk.check_from_relation(cast(? as int),?) as check_rel
        </check_from_relation>
        <addr_list>
            select bk.id as recid,c.id as city_id,c.lang_text as city,s.id as str_id,s.text as street,b.id as building_id,b.building_num as building,b.build_subunit as fraction,b.flat_from,b.flat_to,
            ds.mobile_phone,ds.t_position_id,ds.disp,st_text.lang_text as status,bk.status as status_id,
            (select count(tf.id) as flats from ch_ksk.t_flats tf
            where tf.t_building_id=b.id
            and exists (select 1 from ch_ksk.t_relation tr where tr.t_flats_id=tf.id and tr.status not in (4))) as count_flat,
            case when bk.status=3 then ad_konf.ksk_owner end as ksk_owner
            from ch_ksk.t_building_ksk bk
            inner join
            ch_ksk.t_ksk k on k.id=bk.t_ksk_id
            inner join
            (select id,building_num,t_street_id,build_subunit,flat_from,flat_to from ch_ksk.t_building) b on b.id=bk.t_building_id
            inner join
            (SELECT ds.id as id,ds.t_city_id ,tls.t_language_id,case when tls.t_language_id=1 then tlt.lang_text||' '||tls.description
            when tls.t_language_id=2 then tls.description||' '||tlt.lang_text end as text
            FROM ch_ksk.t_street ds, ch_ksk.t_lang_street tls, ch_ksk.t_street_type dst, ch_ksk.t_any_lang_text tlt
            WHERE ds.id=tls.t_street_id
            AND ds.street_type_id=dst.id
            and tls.t_language_id=tlt.t_language_id
            AND tlt.table_name='t_street_type'
            AND tlt.table_id=dst.id) s on s.id=b.t_street_id
            inner join
            (select ct.id,ct.description,tt.t_language_id,tt.lang_text from ch_ksk.t_city ct,ch_ksk.t_any_lang_text tt where ct.id=tt.table_id and tt.table_name='t_city') c on c.id=s.t_city_id and c.t_language_id=s.t_language_id
            left outer join
            (select e.id,e.t_building_ksk_id,e.t_position_id,t.lastname||' '||t.firstname||' '||coalesce(t.middlename,'') as disp,t.mobile_phone
            from ch_ksk.t_building_ksk_emps e,
            ch_ksk.t_position p,
            ch_ksk.t_position_types pt,
            ch_ksk.t_user t,
            ch_ksk.t_user_status tu
            where e.t_position_id=p.id
            and p.t_position_types_id=pt.id
            and pt.code='ds'
            and p.t_user_id=t.id
            and t.user_status_id=tu.id
            and tu.code='1') as ds on ds.t_building_ksk_id=bk.id
            left outer join
            (select bk1.t_building_id,tlt.t_language_id,bk1.t_ksk_id,tlt.lang_text||', '||k.bin||', '||coalesce(k.phone1,'')||', '||coalesce(k.phone2,'') as ksk_owner
            from ch_ksk.t_ksk k,ch_ksk.t_building_ksk bk1,ch_ksk.t_any_lang_text tlt
            where k.id=bk1.t_ksk_id and bk1.status=1
              and k.id=tlt.table_id and tlt.table_name='t_ksk') ad_konf on ad_konf.t_building_id=b.id and ad_konf.t_ksk_id!=bk.t_ksk_id and ad_konf.t_language_id=s.t_language_id
            left outer join
             ch_ksk.t_any_lang_text st_text on st_text.t_language_id=s.t_language_id and st_text.table_id=bk.status and st_text.table_name='t_relation_status'
        </addr_list>
        <all_address_list>
            select c.lang_text as city,s.text as street,b.building_num as building,b.build_subunit as fraction,b.flat_from,b.flat_to
            from ch_ksk.t_building b
            inner join
            (SELECT ds.id as id,ds.t_city_id ,tls.t_language_id,case when tls.t_language_id=1 then tlt.lang_text||' '||tls.description
            when tls.t_language_id=2 then tls.description||' '||tlt.lang_text end as text
            FROM ch_ksk.t_street ds, ch_ksk.t_lang_street tls, ch_ksk.t_street_type dst, ch_ksk.t_any_lang_text tlt
            WHERE ds.id=tls.t_street_id
            AND ds.street_type_id=dst.id
            and tls.t_language_id=tlt.t_language_id
            AND tlt.table_name='t_street_type'
            AND tlt.table_id=dst.id) s on s.id=b.t_street_id
            inner join
            (select ct.id,ct.description,tt.t_language_id,tt.lang_text
            from ch_ksk.t_city ct,ch_ksk.t_any_lang_text tt
            where ct.id=tt.table_id and tt.table_name='t_city') c on c.id=s.t_city_id and c.t_language_id=s.t_language_id
        </all_address_list>
		<ksk_emps_list>
            select p.id as recid,u.lastname,u.firstname,u.middlename,u.mobile_phone as phone,tlt.lang_text as position,u.usermail1 as login,to_char(p.date_end,'dd.mm.yyyy') as date_end,
            to_char(u.birthday,'dd.mm.yyyy') as birthday, pt.id pos_id,u.id as usr_id,pt.code as pos_code
            from ch_ksk.t_position p,
            ch_ksk.t_user u,
            ch_ksk.t_position_types pt,
            ch_ksk.t_any_lang_text tlt
            where p.t_user_id=u.id
            and p.t_position_types_id=pt.id
            and pt.id=tlt.table_id
            and tlt.table_name='t_position_types'
        </ksk_emps_list>
        <serv_emps_list>
            select p.id as recid,u.lastname,u.firstname,u.middlename,u.mobile_phone as phone,tlt.lang_text as position,u.usermail1 as login,to_char(p.date_end,'dd.mm.yyyy') as date_end,
            to_char(u.birthday,'dd.mm.yyyy') as birthday, pt.id pos_id,u.id as usr_id,pt.code as pos_code
            from ch_ksk.t_comp_position p,
            ch_ksk.t_user u,
            ch_ksk.t_comp_position_type pt,
            ch_ksk.t_any_lang_text tlt
            where p.t_user_id=u.id
            and p.comp_pos_type_id=pt.id
            and pt.id=tlt.table_id
            and tlt.table_name='t_comp_position_type'
        </serv_emps_list>
        <get_serv_emps_lang_text>
            <![CDATA[
 select txt.lang_text,
       (select tlt.lang_text from ch_ksk.t_any_lang_text tlt where tlt.table_name='t_company' and tlt.table_id=? and tlt.t_language_id=txt.t_language_id) as comp_name,
	(select tu.password from ch_ksk.t_user tu where lower(tu.usermail1)=lower(?) and tu.mail1status=1) as passw
	from ch_ksk.t_any_lang_text txt,
	     ch_ksk.t_comp_position_type tcp
	where
		txt.table_name='t_comp_position_type'
		and txt.table_id=tcp.id
		and txt.t_language_id=1
            ]]>
        </get_serv_emps_lang_text>
		<user_positions>
            <![CDATA[
 with param as (select cast(? as int) as lang,cast(? as bigint) as usr)
select tlt.lang_text|| ' [' ||tlt2.lang_text || ']' as posdescr,pt.code as poscode
  from ch_ksk.t_ksk k,
           ch_ksk.t_position p,
           ch_ksk.t_position_types pt,
           ch_ksk.t_any_lang_text tlt,
           ch_ksk.t_any_lang_text tlt2,
           param
     where k.status=1
       and k.id=p.t_ksk_id
       and p.t_position_types_id = pt.id
       and (p.date_end is null or p.date_end >= CURRENT_DATE )
       and tlt.table_id=pt.id
       and tlt.table_name='t_position_types'
       and tlt2.table_id=k.id
       and tlt2.table_name='t_ksk'
       and tlt.t_language_id=tlt2.t_language_id
       and tlt.t_language_id=param.lang
       and p.t_user_id=param.usr
       union
       select 'Модератор ['||tlt4.lang_text||']' as posdescr,'md' as poscode
            from ch_ksk.t_ksk tk, ch_ksk.t_any_lang_text tlt4, ch_ksk.t_moderators m, ch_ksk.t_moderator_ksk mk, param
            where tk.id=tlt4.table_id
            and tlt4.table_name='t_ksk'
            and tlt4.t_language_id=param.lang
            and tk.status=1
            and m.status=1
            and mk.status=1
            and tk.id = mk.t_ksk_id
            and m.id = mk.t_moderators_id
            and m.t_user_id = param.usr
            order by poscode
            ]]>
        </user_positions>
        <user_serv_positions>
            <![CDATA[
with param as (select cast(? as int) as lang,cast(? as bigint) as usr)
select tlt.lang_text||' ['|| tlt2.lang_text||']' as posdescr, tct.code as poscode from ch_ksk.t_company tc,
		ch_ksk.t_comp_position tcp,
		ch_ksk.t_comp_position_type tct,
		ch_ksk.t_any_lang_text tlt,
		ch_ksk.t_any_lang_text tlt2,
		param p
	where tc.id=tcp.comp_id
		and tcp.comp_pos_type_id=tct.id
		and tlt.table_name='t_comp_position_type'
		and tlt.table_id=tct.id
		and tlt.t_language_id=p.lang
		and tcp.t_user_id=p.usr
		and tlt2.table_name='t_company'
		and tlt2.t_language_id=p.lang
		and tlt2.table_id=tc.id
       union
        select 'Модератор ['||tlt4.lang_text||']' as posdescr,'md' as poscode
            from ch_ksk.t_company tc,ch_ksk.t_any_lang_text tlt4, ch_ksk.t_moderators m, ch_ksk.t_moderator_comp mk,param
            where tc.id=tlt4.table_id and tlt4.table_name='t_company' and tlt4.t_language_id=param.lang and tc.status=1
            and tc.id = mk.t_comp_id and m.id = mk.t_moderators_id and m.t_user_id = param.usr
            order by poscode
            ]]>
        </user_serv_positions>
        <user_agreements>
            <![CDATA[
         with param as (select cast(? as int) as ksk_id, cast(? as int) as user_id)
    select tkv.doc_value, tpt.code as position_code, tkd.code as doc_type_code
		from ch_ksk.t_ksk tk,
		     ch_ksk.t_ksk_doc_value tkv,
		     ch_ksk.t_ksk_doc_type tkd,
		     ch_ksk.t_position tp,
		     ch_ksk.t_position_types tpt,
		     param p
             where tk.id=tkv.t_ksk_id
                and tk.id=tp.t_ksk_id
                and tkv.kdt_id=tkd.id
                and tk.status=1
                and tp.t_position_types_id=tpt.id
                and tpt.status=1
                and tp.date_end is null
                and tkd.status=1
                and tkv.status=1
                and tk.id=p.ksk_id
                and tp.t_user_id=p.user_id
	union all
     select tkv.doc_value, case when tm.id is not null then 'mod' end as position_code, tkd.code as doc_type_code
		from ch_ksk.t_ksk tk,
		ch_ksk.t_ksk_doc_value tkv,
		ch_ksk.t_ksk_doc_type tkd,
		ch_ksk.t_moderators tm,
		ch_ksk.t_moderator_ksk tmk,
		param p
             where tk.id=tkv.t_ksk_id
                and tk.id=tmk.t_ksk_id
                and tkv.kdt_id=tkd.id
                and tk.status=1
                and tm.id=tmk.t_moderators_id
                and tmk.status=1
                and tm.status =1
                and tkd.status=1
                and tkv.status=1
                and tk.id=p.ksk_id
                and tm.t_user_id=p.user_id
            ]]>
        </user_agreements>
        <moderator>
            <![CDATA[
            SELECT
     m.id as mid,
     m.t_franchiser_citys_id as fcityid,
     m.date_start
   FROM
     ch_ksk.t_moderators m
   WHERE m.status=1
   and m.t_user_id=?
            ]]>
        </moderator>
        <disp_ksk>
            <![CDATA[
SELECT tp.id,tu.lastname||' '||tu.firstname||' '||coalesce(tu.middlename,'') as text
FROM ch_ksk.t_position tp, ch_ksk.t_user tu, ch_ksk.t_position_types pt
WHERE tp.t_user_id=tu.id
  AND tp.t_position_types_id=pt.id
  AND pt.code='ds'
  AND tu.user_status_id=cast(? as int)
  AND tp.t_ksk_id=cast(? as int)
  and tp.date_end is null
 ORDER by 2
            ]]>
        </disp_ksk>
        <disp_ksk_with_all>
            <![CDATA[
SELECT tp.id,tu.lastname||' '||tu.firstname||' '||coalesce(tu.middlename,'') as text
FROM ch_ksk.t_position tp, ch_ksk.t_user tu, ch_ksk.t_position_types pt
WHERE tp.t_user_id=tu.id
  AND tp.t_position_types_id=pt.id
  AND pt.code='ds'
  AND tu.user_status_id=cast(? as int)
  AND tp.t_ksk_id=cast(? as int)
  and tp.date_end is null
  union all
  select 0 as id, case when ? = 1 then 'Все' else 'Барлығы' end as text
 ORDER by id
            ]]>
        </disp_ksk_with_all>
        <disp_serv_with_all>
            <![CDATA[
SELECT tp.id,tu.lastname||' '||tu.firstname||' '||coalesce(tu.middlename,'') as text
FROM ch_ksk.t_comp_position tp, ch_ksk.t_user tu, ch_ksk.t_comp_position_type pt
WHERE tp.t_user_id=tu.id
  AND tp.comp_pos_type_id=pt.id
  AND pt.code='EMP'
  AND tu.user_status_id=cast(? as int)
  AND tp.comp_id=cast(? as int)
  and tp.date_end is null
 ORDER by id
            ]]>
        </disp_serv_with_all>
        <req_executor_ksk>
            <![CDATA[
SELECT tp.id,tu.lastname||' '||tu.firstname||coalesce(' '||tu.middlename,'')||' ('||tlt.lang_text||')' as text
FROM ch_ksk.t_position tp, ch_ksk.t_user tu, ch_ksk.t_position_types pt, ch_ksk.t_any_lang_text tlt
WHERE tp.t_user_id=tu.id
  AND tp.t_position_types_id=pt.id
  AND pt.code!='ds'
  AND tu.user_status_id=cast(? as int)
  AND tp.t_ksk_id=cast(? as int)
  and tp.date_end is null
  and pt.id=tlt.table_id
  and tlt.table_name='t_position_types'
  and tlt.t_language_id=cast(? as int)
 ORDER by 2
            ]]>
        </req_executor_ksk>
        <topcitizen>
            <![CDATA[
select r.t_user_id, u.firstname, u.lastname, count(r.t_user_id) as rcount
 from ch_ksk.t_request r, ch_ksk.t_user u
 where r.t_user_id = u.id
 and r.dat_reg >= (SELECT date_trunc('MONTH', current_date) - INTERVAL '1 MONTH')
 and r.dat_reg <= (SELECT date_trunc('MONTH', current_date) + INTERVAL '1 MONTH - 1 sec')
 group by r.t_user_id,  u.firstname, u.lastname
 order by 4 desc
 limit 5;
            ]]>
        </topcitizen>
        <ksk_list>
            with param as (select cast(? as int) as lang, cast(? as bigint) as usr)
            select k.id,tlt.lang_text as text,    (select array_to_string(array(select tkv.doc_value from ch_ksk.t_ksk_doc_value tkv, ch_ksk.t_ksk_doc_type tkd where
            tkv.t_ksk_id=k.id
            and tkv.kdt_id=tkd.id
            and tkd.status=1
            and tkv.status=1
            and tkd.code in ('AFR', 'AGR')), ''))  as doc_value
            from ch_ksk.t_ksk k,
            ch_ksk.t_any_lang_text tlt,
            param
            where tlt.t_language_id=param.lang
            and tlt.table_name='t_ksk'
            and tlt.table_id=k.id
            and k.id in (select p.t_ksk_id from ch_ksk.t_position p,ch_ksk.t_user u where p.t_user_id=u.id and p.date_end is null and u.id=param.usr)
            and k.status=1
            union
            select tk.id, tlt.lang_text as text, ( select array_to_string(array(select tkv.doc_value from ch_ksk.t_ksk_doc_value tkv, ch_ksk.t_ksk_doc_type tkd where
            tkv.t_ksk_id=tk.id
            and tkv.kdt_id=tkd.id
            and tkd.status=1
            and tkv.status=1
            and tkd.code in ('AFR', 'AGR')), '') ) as doc_value
            from ch_ksk.t_ksk tk,ch_ksk.t_any_lang_text tlt, param, ch_ksk.t_moderators m, ch_ksk.t_moderator_ksk mk
            where tk.id=tlt.table_id and tlt.table_name='t_ksk' and tlt.t_language_id=param.lang and tk.status=1
            and tk.id = mk.t_ksk_id and m.id = mk.t_moderators_id and m.t_user_id = param.usr
            order by doc_value desc
        </ksk_list>
        <comp_list>
            <![CDATA[
            with param as (select cast(? as int) as lang, cast(? as bigint) as usr)
            select tc.id, tlt2.lang_text as text
            from
            ch_ksk.t_company tc,
            ch_ksk.t_comp_position tcp,
            ch_ksk.t_comp_position_type tct,
            ch_ksk.t_any_lang_text tlt2,
            param p
            where tc.id=tcp.comp_id
            and tcp.comp_pos_type_id=tct.id
            and tcp.t_user_id=p.usr
            and tc.status=1
            and tlt2.table_name='t_company'
            and tlt2.t_language_id=p.lang
            and tlt2.table_id=tc.id
            union
            select tc.id, tlt4.lang_text as text
            from ch_ksk.t_company tc,ch_ksk.t_any_lang_text tlt4, ch_ksk.t_moderators m, ch_ksk.t_moderator_comp mk,param
            where tc.id=tlt4.table_id and tlt4.table_name='t_company' and tlt4.t_language_id=param.lang and tc.status=1
            and tc.id = mk.t_comp_id and m.id = mk.t_moderators_id and m.t_user_id = param.usr
            order by id
            ]]>
        </comp_list>
        <ksk_search>
            <![CDATA[
SELECT tks.id recid, tks.bin, tks.description,
(select lang_text from ch_ksk.t_any_lang_text where table_name='t_ksk' and table_id=tks.id and t_language_id=2) descr_kz,
(select lang_text from ch_ksk.t_any_lang_text where table_name='t_ksk' and table_id=tks.id and t_language_id=1) descr_ru,
tct.description||', '||ch_ksk.f_street(cast (tstr.id as int), cast(lang.id as int))||' '||
tbl.building_num||(select  coalesce('/'||coalesce(tbl.build_subunit,null),'')) as ksk_address,
phone1,
tstr.id as str_id,
tct.id as ct_id,
tbl.building_num  ,
tbl.build_subunit,

(   select  tlt.lang_text
    from ch_ksk.t_any_lang_text tlt,
         ch_ksk.t_ksk_type_ownership tto
    where tlt.table_name='t_ksk_type_ownership'
      and tlt.table_id=tto.id
      and tlt.t_language_id=lang.id
      and tto.id::text=(select tkv.doc_value from ch_ksk.t_ksk_doc_value tkv where  tkv.status=1 and tkv.t_ksk_id=tks.id and tkv.kdt_id = (select tkd.id from ch_ksk.t_ksk_doc_type tkd where tkd.code ='form' and tkd.status=1) )
) as ownership ,
(   select  tto.id
    from ch_ksk.t_any_lang_text tlt,
         ch_ksk.t_ksk_type_ownership tto
    where tlt.table_name='t_ksk_type_ownership'
      and tlt.table_id=tto.id
      and tlt.t_language_id=lang.id
      and tto.id::text=(select tkv.doc_value from ch_ksk.t_ksk_doc_value tkv where  tkv.status=1 and tkv.t_ksk_id=tks.id and tkv.kdt_id = (select tkd.id from ch_ksk.t_ksk_doc_type tkd where tkd.code ='form' and tkd.status=1) )
) as ownership_id ,
(select lastname||' '||firstname||coalesce(' '||middlename,'')||' ('||usermail1||')' from ch_ksk.t_position tp, ch_ksk.t_user tu
	where t_ksk_id=tks.id
	and t_position_types_id=(select id from ch_ksk.t_position_types where code='mu')
	and tp.t_user_id=tu.id and (tp.date_end is null or current_date < date_end)) as main_user,
(select tu.id from ch_ksk.t_position tp, ch_ksk.t_user tu
	where t_ksk_id=tks.id
	and t_position_types_id=(select id from ch_ksk.t_position_types where code='mu')
	and tp.t_user_id=tu.id and (tp.date_end is null or current_date < date_end)) as main_user_id,
	(select lastname||' '||firstname||coalesce(' '||middlename,'')||' ('||usermail1||')' from ch_ksk.t_position tp, ch_ksk.t_user tu
	where t_ksk_id=tks.id
	and t_position_types_id=(select id from ch_ksk.t_position_types where code='pr')
	and tp.t_user_id=tu.id and (tp.date_end is null or current_date < date_end)) as pr_user,
	(select tu.id from ch_ksk.t_position tp, ch_ksk.t_user tu
	where t_ksk_id=tks.id
	and t_position_types_id=(select id from ch_ksk.t_position_types where code='pr')
	and tp.t_user_id=tu.id and (tp.date_end is null or current_date < date_end)) as pr_user_id,
	(select tlt.lang_text from ch_ksk.t_any_lang_text tlt where tlt.table_name='t_ksk_status' and tlt.table_id=tks.status and tlt.t_language_id=lang.id) as status,
	(select string_agg(u.lastname||' '||u.firstname||' '||coalesce(u.middlename,'')||' ('||usermail1||')',', ')
	   from ch_ksk.t_ksk_doc_value dv, ch_ksk.t_ksk_doc_type dc, ch_ksk.t_user u
	  where dv.kdt_id=dc.id and dc.code='CHIEF_USER' and dv.t_ksk_id=tks.id and dv.status=1 and u.id=cast(dv.doc_value as bigint)) as chief_user,
	  (select string_agg(dv.doc_value,',')
	   from ch_ksk.t_ksk_doc_value dv, ch_ksk.t_ksk_doc_type dc
	  where dv.kdt_id=dc.id and dc.code='CHIEF_USER' and dv.t_ksk_id=tks.id and dv.status=1) as chief_user_id,
	 (select string_agg(dv.doc_value,',')
	   from ch_ksk.t_ksk_doc_value dv, ch_ksk.t_ksk_doc_type dc
	  where dv.kdt_id=dc.id and dc.code='FLAT_COUNT' and dv.t_ksk_id=tks.id and dv.status=1 limit 1) as flats_count
  FROM ch_ksk.t_ksk tks, ch_ksk.t_building tbl, ch_ksk.t_street tstr, ch_ksk.t_city tct, ch_ksk.t_language lang
 WHERE lang.id=?
   AND tks.bin like ?
   AND lower(tks.description) like lower(?)
   AND tbl.id=tks.t_building_id
   AND tstr.id=tbl.t_street_id
   AND tct.id=tstr.t_city_id
 ORDER by 4
            ]]>
        </ksk_search>
        <all_users>
            <![CDATA[
SELECT id,lastname||' '||firstname||coalesce(' '||middlename,'')||' ('||usermail1||')' as text
FROM ch_ksk.t_user
WHERE user_status_id=?
  AND id not in (1)
 ORDER by 2
            ]]>
        </all_users>
        <ksk_count>
            <![CDATA[
SELECT count(*) as id
  FROM ch_ksk.t_ksk tks
 WHERE bin = ?
 ORDER by 1
            ]]>
        </ksk_count>

        <ksk_count_not_this>
            SELECT count(*) as id
            FROM ch_ksk.t_ksk tks
            WHERE bin = ?
            and tks.id != cast(? as bigint)
            ORDER by 1
       </ksk_count_not_this>
        <inquiry_search>
            <![CDATA[
WITH lang AS (
SELECT id
  FROM ch_ksk.t_language
 WHERE id=?)
SELECT distinct tr.id as recid, tr.date_start,
	(select coalesce(tu.lastname,'')||' '||coalesce(tu.firstname,'')||' '|| coalesce(tu.middlename, '') from ch_ksk.t_user tu where tr.t_user_id=tu.id) as fio_cit,
	tct.description||', '||ch_ksk.f_street(cast (tstr.id as int), cast (lang.id as int))||' '||tb.building_num||
        (select  coalesce('/'||coalesce(tb.build_subunit,null),''))||
        (select ', '||tlt.lang_text||' ' from ch_ksk.t_any_lang_text tlt where tlt.table_id=1 and tlt.table_name='t_flat_type' and tlt.t_language_id=lang.id)||tf.flat_num as address,
	(select tlt.lang_text from ch_ksk.t_any_lang_text tlt where tlt.table_id=tr.t_relation_type_id and tlt.table_name='t_relation_type' and tlt.t_language_id=lang.id) as rel_type,
	(select tu.lastname||' '||tu.firstname||coalesce(' '||tu.middlename,'') from ch_ksk.t_user tu, ch_ksk.t_relation tr2 where tr2.t_user_id=tu.id
		and tr2.t_flats_id=tf.id and tr2.status=1 and tr2.t_relation_type_id=2) as cur_fio_cit,
	(select tu.id from ch_ksk.t_user tu, ch_ksk.t_relation tr2 where tr2.t_user_id=tu.id
		and tr2.t_flats_id=tf.id and tr2.status=1 and tr2.t_relation_type_id=2) as cur_own_id,
	(select tr2.id from ch_ksk.t_relation tr2 where tr2.t_flats_id=tf.id and tr2.status=1 and tr2.t_relation_type_id=2) as cur_own_rel_id,
		tr.t_flats_id,
		tp.t_user_id,
		tr.t_relation_type_id,
		tr.t_user_id as userid
  FROM ch_ksk.t_relation tr, ch_ksk.t_flats tf, ch_ksk.t_building tb, ch_ksk.t_street tstr, ch_ksk.t_city tct,
	ch_ksk.t_building_ksk tbk, ch_ksk.t_ksk tk, ch_ksk.t_position tp, ch_ksk.t_user tu_ksk, lang
 WHERE tr.t_flats_id =tf.id
   AND tf.t_building_id=tb.id
   AND tstr.id=tb.t_street_id
   AND tct.id=tstr.t_city_id
   AND tb.id=tbk.t_building_id
   AND tbk.status=1
   AND tr.status=2
   AND tbk.t_ksk_id=tk.id
   AND tp.t_ksk_id=tk.id
   AND tk.id=?
   AND tu_ksk.id=tp.t_user_id
   AND tp.date_end is null
   AND exists (select 1 from ch_ksk.t_position_types tpt where tpt.code in ('ds','su', 'mu', 'pr', 'up') and tpt.status=1 and tpt.id=tp.t_position_types_id)
   AND tu_ksk.id=?
   ]]>
        </inquiry_search>
        <inquiry_search_by_disp>
            <![CDATA[
WITH lang AS (
SELECT id
  FROM ch_ksk.t_language
 WHERE id=?)
SELECT tr.id as recid, tr.date_start,
	(select tu.lastname||' '||tu.firstname||' '||coalesce(tu.middlename,'') from ch_ksk.t_user tu where tr.t_user_id=tu.id) as fio_cit,
	coalesce(tct.description,'')||', '||coalesce(ch_ksk.f_street(cast (tstr.id as int), cast (lang.id as int)),'')||' '||tb.building_num||
        (select  coalesce('/'||coalesce(tb.build_subunit,''),''))||
        coalesce((select ', '||coalesce(tlt.lang_text,'')||' ' from ch_ksk.t_any_lang_text tlt where tlt.table_id=1 and tlt.table_name='t_flat_type' and tlt.t_language_id=lang.id),'')||tf.flat_num as address,
	(select tlt.lang_text from ch_ksk.t_any_lang_text tlt where tlt.table_id=tr.t_relation_type_id and tlt.table_name='t_relation_type' and tlt.t_language_id=lang.id) as rel_type,
	(select tu.lastname||' '||tu.firstname||coalesce(' '||tu.middlename,'') from ch_ksk.t_user tu, ch_ksk.t_relation tr2 where tr2.t_user_id=tu.id
		and tr2.t_flats_id=tf.id and tr2.status=1 and tr2.t_relation_type_id=2) as cur_fio_cit,
	(select tu.id from ch_ksk.t_user tu, ch_ksk.t_relation tr2 where tr2.t_user_id=tu.id
		and tr2.t_flats_id=tf.id and tr2.status=1 and tr2.t_relation_type_id=2) as cur_own_id,
	(select tr2.id from ch_ksk.t_relation tr2 where tr2.t_flats_id=tf.id and tr2.status=1 and tr2.t_relation_type_id=2) as cur_own_rel_id,
		tr.t_flats_id,
		tp.t_user_id,
		tr.t_relation_type_id
  FROM ch_ksk.t_relation tr, ch_ksk.t_flats tf, ch_ksk.t_building tb, ch_ksk.t_street tstr, ch_ksk.t_city tct,
	ch_ksk.t_building_ksk tbk, ch_ksk.t_ksk tk, ch_ksk.t_position tp, ch_ksk.t_user tu_ksk, lang, ch_ksk.t_building_ksk_emps tbke
 WHERE tr.t_flats_id =tf.id
   AND tf.t_building_id=tb.id
   AND tstr.id=tb.t_street_id
   AND tct.id=tstr.t_city_id
   AND tb.id=tbk.t_building_id
   AND tbk.status=1
   AND tr.status=2
   AND tbk.t_ksk_id=tk.id
   AND tp.t_ksk_id=tk.id
   AND tk.id=?
   AND tu_ksk.id=tp.t_user_id
   AND exists (select 1 from ch_ksk.t_position_types tpt where tpt.code='ds' and tpt.status=1 and tpt.id=tp.t_position_types_id)
   and tbk.id=tbke.t_building_ksk_id
   and tbke.t_position_id=tp.id
   and tp.id=?
   ]]>
        </inquiry_search_by_disp>
		<inquiry_search_by_build_id>
            <![CDATA[
WITH lang AS (
SELECT id
  FROM ch_ksk.t_language
 WHERE id=cast(? as int))
SELECT tr.id as recid, tr.date_start,
	(select tu.lastname||' '||tu.firstname||' '||coalesce(tu.middlename,'') from ch_ksk.t_user tu where tr.t_user_id=tu.id) as fio_cit,
	coalesce(tct.description,'')||', '||coalesce(ch_ksk.f_street(cast (tstr.id as int), cast (lang.id as int)),'')||' '||tb.building_num||
        (select  coalesce('/'||coalesce(tb.build_subunit,''),''))||
        coalesce((select ', '||coalesce(tlt.lang_text,'')||' ' from ch_ksk.t_any_lang_text tlt where tlt.table_id=1 and tlt.table_name='t_flat_type' and tlt.t_language_id=lang.id),'')||tf.flat_num as address,
	(select tlt.lang_text from ch_ksk.t_any_lang_text tlt where tlt.table_id=tr.t_relation_type_id and tlt.table_name='t_relation_type' and tlt.t_language_id=lang.id) as rel_type,
	(select tu.lastname||' '||tu.firstname||coalesce(' '||tu.middlename,'') from ch_ksk.t_user tu, ch_ksk.t_relation tr2 where tr2.t_user_id=tu.id
		and tr2.t_flats_id=tf.id and tr2.status=1 and tr2.t_relation_type_id=2) as cur_fio_cit,
	(select tu.id from ch_ksk.t_user tu, ch_ksk.t_relation tr2 where tr2.t_user_id=tu.id
		and tr2.t_flats_id=tf.id and tr2.status=1 and tr2.t_relation_type_id=2) as cur_own_id,
	(select tr2.id from ch_ksk.t_relation tr2 where tr2.t_flats_id=tf.id and tr2.status=1 and tr2.t_relation_type_id=2) as cur_own_rel_id,
		tr.t_flats_id,
		tr.t_relation_type_id
  FROM ch_ksk.t_relation tr, ch_ksk.t_flats tf, ch_ksk.t_building tb, ch_ksk.t_street tstr, ch_ksk.t_city tct,
	ch_ksk.t_building_ksk tbk, lang
 WHERE tr.t_flats_id =tf.id
   AND tf.t_building_id=tb.id
   AND tstr.id=tb.t_street_id
   AND tct.id=tstr.t_city_id
   AND tb.id=tbk.t_building_id
   AND tbk.status=1
   AND tr.status=2
   and tbk.t_ksk_id=?
   and tbk.t_building_id=cast(? as int)
   ]]>
        </inquiry_search_by_build_id>
		<inquiry_search_by_disp_and_build_id>
            <![CDATA[
WITH lang AS (
SELECT id
  FROM ch_ksk.t_language

 WHERE id=?)
SELECT tr.id as recid, tr.date_start,
	(select tu.lastname||' '||tu.firstname||' '||coalesce(tu.middlename,'') from ch_ksk.t_user tu where tr.t_user_id=tu.id) as fio_cit,
	coalesce(tct.description,'')||', '||coalesce(ch_ksk.f_street(cast (tstr.id as int), cast (lang.id as int)),'')||' '||tb.building_num||
        (select  coalesce('/'||coalesce(tb.build_subunit,''),''))||
        coalesce((select ', '||coalesce(tlt.lang_text,'')||' ' from ch_ksk.t_any_lang_text tlt where tlt.table_id=1 and tlt.table_name='t_flat_type' and tlt.t_language_id=lang.id),'')||tf.flat_num as address,
	(select tlt.lang_text from ch_ksk.t_any_lang_text tlt where tlt.table_id=tr.t_relation_type_id and tlt.table_name='t_relation_type' and tlt.t_language_id=lang.id) as rel_type,
	(select tu.lastname||' '||tu.firstname||coalesce(' '||tu.middlename,'') from ch_ksk.t_user tu, ch_ksk.t_relation tr2 where tr2.t_user_id=tu.id
		and tr2.t_flats_id=tf.id and tr2.status=1 and tr2.t_relation_type_id=2) as cur_fio_cit,
	(select tu.id from ch_ksk.t_user tu, ch_ksk.t_relation tr2 where tr2.t_user_id=tu.id
		and tr2.t_flats_id=tf.id and tr2.status=1 and tr2.t_relation_type_id=2) as cur_own_id,
	(select tr2.id from ch_ksk.t_relation tr2 where tr2.t_flats_id=tf.id and tr2.status=1 and tr2.t_relation_type_id=2) as cur_own_rel_id,
		tr.t_flats_id,
		tp.t_user_id,


		tr.t_relation_type_id
  FROM ch_ksk.t_relation tr, ch_ksk.t_flats tf, ch_ksk.t_building tb, ch_ksk.t_street tstr, ch_ksk.t_city tct,

	ch_ksk.t_building_ksk tbk, ch_ksk.t_ksk tk, ch_ksk.t_position tp, ch_ksk.t_user tu_ksk, lang, ch_ksk.t_building_ksk_emps tbke
 WHERE tr.t_flats_id =tf.id
   AND tf.t_building_id=tb.id
   AND tstr.id=tb.t_street_id
   AND tct.id=tstr.t_city_id
   AND tb.id=tbk.t_building_id
   AND tbk.status=1
   AND tr.status=2
   AND tbk.t_ksk_id=tk.id
   AND tp.t_ksk_id=tk.id
   AND tk.id=?
   AND tu_ksk.id=tp.t_user_id
   AND exists (select 1 from ch_ksk.t_position_types tpt where tpt.code='ds' and tpt.status=1 and tpt.id=tp.t_position_types_id)
   and tbk.id=tbke.t_building_ksk_id
   and tbke.t_position_id=tp.id
   and tp.id=?
   and tbk.t_building_id=cast(? as int)
   ]]>

        </inquiry_search_by_disp_and_build_id>
        <citizen_list>
            <![CDATA[
SELECT tr.id recid, tr.date_start, tu.lastname||' '||tu.firstname||coalesce(' '||tu.middlename,'') fio, tr.date_end, tr.t_user_id
  FROM ch_ksk.t_relation tr, ch_ksk.t_user tu
 WHERE tr.t_flats_id=?
   AND tr.status=1
   AND tr.t_relation_type_id=1
   AND tr.t_user_id=tu.id
 ORDER by 2
            ]]>
        </citizen_list>
        <ksksearch>
            <![CDATA[
         WITH param as (select cast(? as varchar) as param_str, cast(? as int) as lang)
         SELECT
            '1' as searchtype
            ,l1.lang_text as ksk_name
            ,CASE
             WHEN k.status=0 THEN COALESCE( (
               SELECT
  				l2.lang_text ||', '||COALESCE(kdv.doc_value,' ') as doc_value
			   FROM
 				 ch_ksk.t_ksk_doc_value kdv
  				,ch_ksk.t_ksk_doc_type kdt
			   WHERE kdv.kdt_id = kdt.id
 				and kdv.t_ksk_id = k.id
 				and kdt.code='addr'
 				and kdv.status = 1
               ) ,' ')
             WHEN k.status=1 THEN
                   l2.lang_text ||', ' ||ls.description||', '||b.building_num||COALESCE('/'||b.build_subunit,' ')
             ELSE ' '
             END as ksk_address
            ,COALESCE(k.phone1,' ') as phone1
            ,COALESCE(k.phone2,' ') as phone2
            ,COALESCE(k.bin,' ') as bin
            ,' ' as b_adr
            ,k.status as ksk_status
            ,k.id as ksk_id
            ,CASE WHEN k.status=0 THEN ' '
                  WHEN k.status=1 THEN 'Подключен'
                  ELSE ' '
             END as status_text
         FROM
            ch_ksk.t_ksk k,
            ch_ksk.t_any_lang_text l1,
            ch_ksk.t_building b,
            ch_ksk.t_street s,
            ch_ksk.t_city c,
            ch_ksk.t_any_lang_text l2,
            ch_ksk.t_lang_street ls
            join param on 1=1
         WHERE l1.table_name = 't_ksk'
            and k.id = l1.table_id
            and l1.t_language_id = l2.t_language_id
            and translate(upper(l1.lang_text),'ETOPAHKXCBM ~!@#$^&*()_+=-\][|}{":;/.>,<','ЕТОРАНКХСВМ')
                like translate(upper(param.param_str),'ETOPAHKXCBM ~!@#$^&*()_+=-\][|}{":;/.>,<','ЕТОРАНКХСВМ%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%')
            and k.t_building_id =  b.id
            and b.t_street_id = s.id
            and s.t_city_id = c.id
            and l2.table_name = 't_city'
            and l2.table_id = c.id
            and l2.t_language_id = param.lang
            and ls.t_street_id = s.id
            and ls.t_language_id = l2.t_language_id
         UNION ALL
         SELECT
            '1' as searchtype
            ,l1.lang_text as ksk_name
            ,CASE
             WHEN k.status=0 THEN COALESCE( (
               SELECT
  				l2.lang_text ||', '||COALESCE(kdv.doc_value,' ') as doc_value
			   FROM
 				 ch_ksk.t_ksk_doc_value kdv
  				,ch_ksk.t_ksk_doc_type kdt
			   WHERE kdv.kdt_id = kdt.id
 				and kdv.t_ksk_id = k.id
 				and kdt.code='addr'
 				and kdv.status = 1
               ) ,' ')
             WHEN k.status=1 THEN
                   l2.lang_text ||', ' ||ls.description||', '||b.building_num||COALESCE('/'||b.build_subunit,' ')
             ELSE ' '
             END as ksk_address
            ,COALESCE(k.phone1,' ') as phone1
            ,COALESCE(k.phone2,' ') as phone2
            ,COALESCE(k.bin,' ') as bin
            ,' ' as b_adr
            ,k.status as ksk_status
            ,k.id as ksk_id
            ,CASE WHEN k.status=0 THEN ' '
                  WHEN k.status=1 THEN 'Подключен'
                  ELSE ' '
             END as status_text
         FROM
            ch_ksk.t_ksk k,
            ch_ksk.t_any_lang_text l1,
            ch_ksk.t_building b,
            ch_ksk.t_street s,
            ch_ksk.t_city c,
            ch_ksk.t_any_lang_text l2,
            ch_ksk.t_lang_street ls
            join param on 1=1
         WHERE l1.table_name = 't_ksk'
            and k.id = l1.table_id
            and l1.t_language_id = l2.t_language_id
            and k.t_building_id =  b.id
            and b.t_street_id = s.id
            and s.t_city_id = c.id
            and l2.table_name = 't_city'
            and l2.table_id = c.id
            and l2.t_language_id = param.lang
            and ls.t_street_id = s.id
            and ls.t_language_id = l2.t_language_id
            and translate(upper(
             (CASE
               WHEN k.status=0 THEN
                (SELECT
  			 	 l2.lang_text ||', '||kdv.doc_value
			     FROM
 				 ch_ksk.t_ksk_doc_value kdv
  				 ,ch_ksk.t_ksk_doc_type kdt
			     WHERE kdv.kdt_id = kdt.id
 			 	 and kdv.t_ksk_id = k.id
 				 and kdt.code='addr'
 				 and kdv.status = 1)
               WHEN k.status=1 THEN
                   l2.lang_text ||', ' ||ls.description||', '||b.building_num||COALESCE('/'||b.build_subunit,' ')
               ELSE ' '
               END)
             ),'ETOPAHKXCBM ~!@#$^&*()_+=-\][|}{":;/.>,<','ЕТОРАНКХСВМ')
              like translate(upper(param.param_str),'ETOPAHKXCBM ~!@#$^&*()_+=-\][|}{":;/.>,<','ЕТОРАНКХСВМ%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%')
         UNION ALL
         SELECT
            '2' as searchtype,
            l1.lang_text as ksk_name,
            l2.lang_text ||', ' ||ls.description||', '||b.building_num||COALESCE('/'||b.build_subunit,' ') as ksk_address,
            COALESCE(k.phone1,' ') as phone1,
            COALESCE(k.phone2,' ') as phone2,
            COALESCE(k.bin,' ') as bin,
            l3.lang_text||', '||ls3.description||', '||b3.building_num||COALESCE('/'||b3.build_subunit,' ') as b_adr
            ,k.status as ksk_status
            ,k.id as ksk_id
            ,CASE WHEN k.status=0 THEN ' '
                  WHEN k.status=1 THEN 'Подключен'
                  ELSE ' '
             END as status_text
         FROM
            ch_ksk.t_ksk k,
            ch_ksk.t_any_lang_text l1,
            ch_ksk.t_building b,
            ch_ksk.t_street s,
            ch_ksk.t_lang_street ls,
            ch_ksk.t_city c,
            ch_ksk.t_any_lang_text l2,
            ch_ksk.t_building b3,
            ch_ksk.t_building_ksk bk3,
            ch_ksk.t_street s3,
            ch_ksk.t_lang_street ls3,
            ch_ksk.t_city c3,
            ch_ksk.t_any_lang_text l3
            join param on 1=1
         WHERE l1.table_name = 't_ksk'
            and k.id = l1.table_id
            and l1.t_language_id = l2.t_language_id
            and k.t_building_id =  b.id
            and b.t_street_id = s.id
            and s.t_city_id = c.id
            and l2.table_name = 't_city'
            and l2.table_id = c.id
            and l2.t_language_id = param.lang
            and ls.t_street_id = s.id
            and ls.t_language_id = l2.t_language_id
            and bk3.t_ksk_id = k.id
            and bk3.t_building_id =  b3.id
            and b3.t_street_id = s3.id
            and s3.t_city_id = c3.id
            and ls3.t_street_id = s3.id
            and l3.table_name = 't_city'
            and l3.table_id = c3.id
            and ls3.t_language_id = l2.t_language_id
            and l3.t_language_id = l2.t_language_id
            and translate(upper(ls3.description)||b3.building_num||upper(COALESCE(b3.build_subunit,' ')),'ETOPAHKXCBM ~!@#$^&*()_+=-\][|}{":;/.>,<','ЕТОРАНКХСВМ')
                like translate(upper(param.param_str),'ETOPAHKXCBM ~!@#$^&*()_+=-\][|}{":;/.>,<','ЕТОРАНКХСВМ%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%')
         ORDER BY 1, 9, 6, 7;
             ]]>
        </ksksearch>
        <ksksearch2>
            <![CDATA[
            SELECT
            l1.lang_text as ksk_name,
            l2.lang_text ||', ' ||ls.description||', '||b.building_num||COALESCE('/'||b.build_subunit,' ') as ksk_address,
            COALESCE(k.phone1,'-') as phone1,
            COALESCE(k.phone2,'-') as phone2,
            COALESCE(k.bin,'-') as bin,
            l3.lang_text||', '||ls3.description||', '||b3.building_num||COALESCE('/'||b3.build_subunit,' ') as b_adr
            FROM
            ch_ksk.t_ksk k,
            ch_ksk.t_any_lang_text l1,
            ch_ksk.t_building b,
            ch_ksk.t_street s,
            ch_ksk.t_lang_street ls,
            ch_ksk.t_city c,
            ch_ksk.t_any_lang_text l2,
            ch_ksk.t_building b3,
            ch_ksk.t_building_ksk bk3,
            ch_ksk.t_street s3,
            ch_ksk.t_lang_street ls3,
            ch_ksk.t_city c3,
            ch_ksk.t_any_lang_text l3
            WHERE l1.table_name = 't_ksk'
            and k.id = l1.table_id
            and l1.t_language_id = l2.t_language_id
            and k.t_building_id =  b.id
            and b.t_street_id = s.id
            and s.t_city_id = c.id
            and l2.table_name = 't_city'
            and l2.table_id = c.id
            --and l2.t_language_id = 1
            and ls.t_street_id = s.id
            and ls.t_language_id = l2.t_language_id
            and bk3.t_ksk_id = k.id
            and bk3.t_building_id =  b3.id
            and b3.t_street_id = s3.id
            and s3.t_city_id = c3.id
            and ls3.t_street_id = s3.id
            and l3.table_name = 't_city'
            and l3.table_id = c3.id
            and ls3.t_language_id = l2.t_language_id
            and l3.t_language_id = l2.t_language_id
            and translate(upper(ls3.description)||b3.building_num||upper(COALESCE(b3.build_subunit,' ')),'ETOPAHKXCBM ~!@#$^&*()_+=-\][|}{":;/.>,<','ЕТОРАНКХСВМ') like translate(upper(?),'ETOPAHKXCBM ~!@#$^&*()_+=-\][|}{":;/.>,<','ЕТОРАНКХСВМ%')
            --and ((b3.building_num = to_number(?,'999999999') and ? != '-111' ) or (? = '-111'))
            order by l1.lang_text, ls3.description, b3.building_num;
             ]]>
        </ksksearch2>
        <ksksearch3>
            <![CDATA[
            SELECT
            l1.lang_text as ksk_name,
            l2.lang_text ||', ' ||ls.description||', '||b.building_num||COALESCE('/'||b.build_subunit,' ') as ksk_address,
            COALESCE(k.phone1,'-') as phone1,
            COALESCE(k.phone2,'-') as phone2,
            COALESCE(k.bin,'-') as bin,
            l3.lang_text||', '||ls3.description||', '||b3.building_num||COALESCE('/'||b3.build_subunit,' ') as b_adr
            FROM
            ch_ksk.t_ksk k,
            ch_ksk.t_any_lang_text l1,
            ch_ksk.t_building b,
            ch_ksk.t_street s,
            ch_ksk.t_lang_street ls,
            ch_ksk.t_city c,
            ch_ksk.t_any_lang_text l2,
            ch_ksk.t_building b3,
            ch_ksk.t_building_ksk bk3,
            ch_ksk.t_street s3,
            ch_ksk.t_lang_street ls3,
            ch_ksk.t_city c3,
            ch_ksk.t_any_lang_text l3
            WHERE l1.table_name = 't_ksk'
            and k.id = l1.table_id
            and l1.t_language_id = l2.t_language_id
            and k.t_building_id =  b.id
            and b.t_street_id = s.id
            and s.t_city_id = c.id
            and l2.table_name = 't_city'
            and l2.table_id = c.id
            --and l2.t_language_id = 1
            and ls.t_street_id = s.id
            and ls.t_language_id = l2.t_language_id
            and bk3.t_ksk_id = k.id
            and bk3.t_building_id =  b3.id
            and b3.t_street_id = s3.id
            and s3.t_city_id = c3.id
            and ls3.t_street_id = s3.id
            and l3.table_name = 't_city'
            and l3.table_id = c3.id
            and ls3.t_language_id = l2.t_language_id
            and l3.t_language_id = l2.t_language_id
            and translate(upper(l1.lang_text),'~ !@#$^&*()_+=-\][|}{":;/.>,<','') like translate(upper(?),'~ !@#$^&*()_+=-\][|}{":;/.>,<','')
            and translate(upper(ls3.description),'~ !@#$^&*()_+=-\][|}{":;/.>,<','') like translate(upper(?),'~ !@#$^&*()_+=-\][|}{":;/.>,<','')
            and ((b3.building_num = to_number(?,'999999999') and ? != '-111' ) or (? = '-111'))
            order by l1.lang_text, ls3.description, b3.building_num;
             ]]>
        </ksksearch3>
		<users_by_fio>
            select id,
            case when ? = 1 then lastname||' '||firstname||' '||coalesce(middlename,'')||' д.р.'||coalesce(to_char(birthday,'dd.mm.yyyy'),' - ')
            else lastname||' '||firstname||' '||coalesce(middlename,'')||' т.ж.'||coalesce(to_char(birthday,'dd.mm.yyyy'),' - ') end as text
		  from ch_ksk.t_user
         where trim(lower(lastname)) like trim(lower(?))
           and trim(lower(firstname)) like trim(lower(?))
           and case when trim(lower(?)) is not null then trim(lower(middlename)) like trim(lower(?)) else 1=1 end
        union
            select 0 as id, case when ? = 1 then 'Новый пользователь' else 'Жаңа пайдаланушы' end as text
        order by id
    </users_by_fio>
        <user_login_phone_dob>
            select id,usermail1 as login,mobile_phone,to_char(birthday,'dd.mm.yyyy') as birthday
			  from ch_ksk.t_user
            where id=cast(? as bigint)
    </user_login_phone_dob>
        <sel_pred_mainuser_ksk>
            <![CDATA[
        select (select u.lastname||' '||u.firstname||' '||coalesce(u.middlename,'') from ch_ksk.t_user u,ch_ksk.t_position p1, ch_ksk.t_position_types pt1
        where u.id=p1.t_user_id and p1.t_position_types_id=pt1.id and p1.date_end is null and pt1.code='pr' and p1.t_ksk_id=k.id limit 1) as pred,
        (select u.lastname||' '||u.firstname||' '||coalesce(u.middlename,'') from ch_ksk.t_user u,ch_ksk.t_position p1, ch_ksk.t_position_types pt1
        where u.id=p1.t_user_id and p1.t_position_types_id=pt1.id and p1.date_end is null and pt1.code='mu' and p1.t_ksk_id=k.id limit 1) as mainuser
		  from ch_ksk.t_ksk k
        where k.id=cast(? as int)
            ]]>
    </sel_pred_mainuser_ksk>
        <sel_pred_mainuser_comp>
            <![CDATA[
            select (select u.lastname||' '||u.firstname||' '||coalesce(u.middlename,'') from ch_ksk.t_user u,ch_ksk.t_comp_position p1, ch_ksk.t_comp_position_type pt1
            where u.id=p1.t_user_id and p1.comp_pos_type_id=pt1.id and p1.date_end is null and pt1.code='MUS' and p1.comp_id=k.id limit 1) as mainuser
            from ch_ksk.t_company k
            where k.id=cast(? as int)
            ]]>
        </sel_pred_mainuser_comp>
	    <check_position>
     select ch_ksk.check_position (cast(? as bigint),?,cast(? as bigint),?,cast(? as int)) as check_pos
    </check_position>
        <check_position_foredit>
            select ch_ksk.check_position_foredit (cast(? as bigint),cast(? as bigint),cast(? as bigint),cast(? as int)) as check_pos
        </check_position_foredit>
        <check_serv_position_foredit>
            <![CDATA[
            select ch_ksk.check_serv_position_foredit (cast(? as bigint),cast(? as bigint),cast(? as bigint),cast(? as int)) as check_pos
            ]]>
        </check_serv_position_foredit>
        <all_position_types>
        select pt.id,tlt.lang_text as text
        from ch_ksk.t_position_types pt,
        ch_ksk.t_any_lang_text tlt
        where pt.id=tlt.table_id
        and pt.status=1
        and tlt.table_name='t_position_types'
        and tlt.t_language_id=cast(? as int)
        </all_position_types>
        <all_position_types_serv>
          <![CDATA[
            select pt.id,tlt.lang_text as text
            from ch_ksk.t_comp_position_type pt,
            ch_ksk.t_any_lang_text tlt
            where pt.id=tlt.table_id
            and pt.status=1
            and tlt.table_name='t_comp_position_type'
            and tlt.t_language_id=cast(? as int)
          ]]>
        </all_position_types_serv>
        <all_position_types_code>
            select pt.code as id,tlt.lang_text as text
            from ch_ksk.t_position_types pt,
            ch_ksk.t_any_lang_text tlt
            where pt.id=tlt.table_id
            and pt.status=1
            and tlt.table_name='t_position_types'
            and tlt.t_language_id=cast(? as int)
        </all_position_types_code>
        <all_comp_position_types_code>
            select pt.code as id,tlt.lang_text as text
            from ch_ksk.t_comp_position_type pt,
            ch_ksk.t_any_lang_text tlt
            where pt.id=tlt.table_id
            and pt.status=1
            and tlt.table_name='t_comp_position_type'
            and tlt.t_language_id=cast(? as int)
        </all_comp_position_types_code>
        <sel_pred_mainuser_ksk_foredit>
        select u.lastname||' '||u.firstname||' '||coalesce(u.middlename,'') as fio
        from ch_ksk.t_ksk k,
        ch_ksk.t_position p,
        ch_ksk.t_position_types pt,
        ch_ksk.t_user u
        where k.id=p.t_ksk_id
        and p.t_position_types_id=pt.id
        and pt.code in ('pr','mu')
        and p.t_user_id=u.id
        and p.date_end is null
        and k.id=cast(? as int)
        and pt.id=cast(? as int)
        </sel_pred_mainuser_ksk_foredit>
        <sel_mainuser_serv_foredit>
            <![CDATA[
            select u.lastname||' '||u.firstname||' '||coalesce(u.middlename,'') as fio
            from ch_ksk.t_company k,
            ch_ksk.t_comp_position p,
            ch_ksk.t_comp_position_type pt,
            ch_ksk.t_user u
            where k.id=p.comp_id
            and p.comp_pos_type_id=pt.id
            and pt.code in ('MUS')
            and p.t_user_id=u.id
            and p.date_end is null
            and k.id=cast(? as int)
            and pt.id=cast(? as int)
            ]]>
        </sel_mainuser_serv_foredit>
        <check_disp_addr>
            select ch_ksk.check_disp_addr_reqs(cast(? as bigint),cast(? as bigint),?) as count
        </check_disp_addr>
        <exec_ksk>
            <![CDATA[
SELECT tp.id,tu.lastname||' '||tu.firstname||' '||coalesce(tu.middlename,'') as text
FROM ch_ksk.t_position tp, ch_ksk.t_user tu, ch_ksk.t_position_types pt
WHERE tp.t_user_id=tu.id
  AND tp.t_position_types_id=pt.id
  AND tu.user_status_id=cast(? as int)
  AND tp.t_ksk_id=cast(? as bigint)
  and (tp.date_end is null or tp.date_end>current_date)
  AND pt.code=?
 ORDER by 2
            ]]>
        </exec_ksk>
        <exec_comp>
            <![CDATA[
SELECT tp.id,tu.lastname||' '||tu.firstname||' '||coalesce(tu.middlename,'') as text
FROM ch_ksk.t_comp_position tp, ch_ksk.t_user tu, ch_ksk.t_comp_position_type pt
WHERE tp.t_user_id=tu.id
  AND tp.comp_pos_type_id=pt.id
  AND tu.user_status_id=cast(? as int)
  AND tp.comp_id=cast(? as bigint)
  and (tp.date_end is null or tp.date_end>current_date)
  AND pt.code=?
 ORDER by 2
            ]]>
        </exec_comp>
        <sel_descr_pos_types>
            select description as text
              from ch_ksk.t_position_types
             where code=?
        </sel_descr_pos_types>
        <sel_pos_code_ch>
            select count(*) as id from ch_ksk.t_position p,ch_ksk.t_position_types pt
            where p.t_user_id=(select id from ch_ksk.t_user where lower(usermail1)=lower(?))
            and p.t_ksk_id=?
            and p.t_position_types_id=pt.id
            and p.date_end is null
            and pt.code=?

        </sel_pos_code_ch>
        <get_mail_by_pos_id>
            select u.usermail1 as text
              from ch_ksk.t_user u,
                   ch_ksk.t_position p
             where u.id=p.t_user_id
               and p.id=cast(? as int)
        </get_mail_by_pos_id>
        <get_mail_disp_by_ksk_and_build_id>
            select u.usermail1 as text
            from ch_ksk.t_user u,
                 ch_ksk.t_position p,
                 ch_ksk.t_building_ksk_emps bke,
                 ch_ksk.t_building_ksk bk
            where u.id=p.t_user_id
            and p.id=bke.t_position_id
            and bke.t_building_ksk_id=bk.id
            and bk.status=1
            and bk.t_ksk_id=cast(? as bigint)
            and bk.t_building_id=cast(? as bigint)
        </get_mail_disp_by_ksk_and_build_id>
		<status_for_addr_ksk>
            select table_id as id,lang_text as text
            from ch_ksk.t_any_lang_text
            where table_name='t_relation_status'
            and t_language_id=cast(? as int)
            and table_id in (1,3,4)
            union
            select -1 as id,case when cast(? as int)=1 then 'Все' else 'Барлығы' end as text
            order by id
        </status_for_addr_ksk>
        <check_user_for_mu>
            select count(*) n_count
            from ch_ksk.t_position p,
            ch_ksk.t_position_types pt
            where p.t_position_types_id=pt.id
            and pt.code in ('mu','su')
            and p.t_ksk_id=cast(? as bigint)
            and p.t_user_id=cast(? as bigint)
            and p.date_end is null
        </check_user_for_mu>
        <check_comp_user_for_mu>

            select count(*) n_count
            from ch_ksk.t_comp_position p,
            ch_ksk.t_comp_position_type pt
            where p.comp_pos_type_id=pt.id
            and pt.code in ('MUS','su')
            and p.comp_id=cast(? as bigint)
            and p.t_user_id=cast(? as bigint)
            and p.date_end is null
        </check_comp_user_for_mu>
        <check_user_for_mu_serv>
            <![CDATA[
            select count(*) n_count
			  from ch_ksk.t_comp_position p,
			  ch_ksk.t_comp_position_type pt
			  where
			  p.comp_pos_type_id=pt.id
			  and pt.code in ('MUS')
			  and pt.status=1
			  and p.comp_id=cast(? as bigint)
            and p.t_user_id=cast(? as bigint)
            and p.date_end is null
            ]]>
        </check_user_for_mu_serv>
        <check_user_for_mod>
            select count(*) n_count_mod
            from ch_ksk.t_moderators m,
            ch_ksk.t_moderator_ksk mk
            where m.id=mk.t_moderators_id
            and mk.t_ksk_id=cast(? as bigint)
            and m.t_user_id=cast(? as bigint)
        </check_user_for_mod>
        <check_user_for_pos>
            select count(*) n_count
            from ch_ksk.t_position p,
            ch_ksk.t_position_types pt
            where p.t_position_types_id=pt.id
            and pt.code=cast(? as varchar)
            and p.t_ksk_id=cast(? as bigint)
            and p.t_user_id=cast(? as bigint)
            and p.date_end is null
        </check_user_for_pos>
        <get_new_address_ksk_status>
            select status status_new_address from ch_ksk.t_building_ksk where t_ksk_id = cast(? as bigint)
            and t_building_id in (select b.id from ch_ksk.t_building b
            where b.building_num=cast(? as int)
            and (select case when COALESCE(?,null) is null then (b.build_subunit is null or b.build_subunit='')
            else lower(trim(b.build_subunit)) = lower(trim(?)) end)
            and b.t_street_id=cast(? as bigint)
            and (select case when COALESCE(cast(? as int),null) is null then b.flat_from is null
            else b.flat_from = cast(? as int) end)
            and (select case when COALESCE(cast(? as int),null) is null then b.flat_to is null
            else b.flat_to = cast(? as int) end))
        </get_new_address_ksk_status>
        <get_fio_user>
            select  lastname||' '||firstname||coalesce(' '||middlename,'') as name  from ch_ksk.t_user where id=?
        </get_fio_user>
        <get_name_ksk>
            select tlt.lang_text as name_ksk
            from ch_ksk.t_ksk tk,
            ch_ksk.t_any_lang_text tlt
            where tk.id=tlt.table_id
            and tlt.table_name='t_ksk'
            and tlt.t_language_id=cast(? as int)
            and tk.id=?
        </get_name_ksk>
        <get_moderators_ksk>
            select m.t_user_id as rec_user
              from ch_ksk.t_moderators m,
                   ch_ksk.t_moderator_ksk mk
             where m.id=mk.t_moderators_id
               and m.status=1
               and mk.status=1
               and mk.t_ksk_id=?
        </get_moderators_ksk>
        <get_moderators>
            select u.id, u.lastname||' '||u.firstname||' '||coalesce(u.middlename,'') as text
              from ch_ksk.t_moderators m,
            ch_ksk.t_user u
            where m.t_user_id=u.id
            and m.status=1
            and u.user_status_id=1
            order by text
        </get_moderators>
        <get_mail_by_user_id>
            select usermail1 as text
            from ch_ksk.t_user
            where id=?
        </get_mail_by_user_id>
        <moderator_ksk>
            select m.id as mid
              from ch_ksk.t_moderators m,
                   ch_ksk.t_moderator_ksk mk
             where m.id=mk.t_moderators_id
               and m.status=1
               and mk.status=1
               and mk.t_ksk_id=?
               and m.t_user_id=?
        </moderator_ksk>
        <check_email_emps>
            select count(*) as mail_count from ch_ksk.t_user where lower(trim(usermail1))=lower(trim(?))
        </check_email_emps>
        <get_mail_by_ksk_id>
            select usermail1 as text
              from ch_ksk.t_user u,
                   ch_ksk.t_position p
             where u.id=p.t_user_id
               and p.date_end is null
               and p.t_position_types_id=(select id from ch_ksk.t_position_types where code='ds')
               and p.t_ksk_id=?
               and substring(u.usermail1,length(u.usermail1)-2,length(u.usermail1)) != '@kz'
        </get_mail_by_ksk_id>
        <get_mail_by_ksk_id_not_in_old_disp>
            select usermail1 as text
            from ch_ksk.t_user u,
            ch_ksk.t_position p
            where u.id=p.t_user_id
            and p.date_end is null
            and p.t_position_types_id=(select id from ch_ksk.t_position_types where code='ds')
            and p.id not in (?)
            and p.t_ksk_id=?
            and substring(u.usermail1,length(u.usermail1)-2,length(u.usermail1)) != '@kz'
        </get_mail_by_ksk_id_not_in_old_disp>
        <flat_from_range>
        with params as (select cast(? as bigint) as str_id,cast(? as int) as build_num,cast(? as varchar) as build_fract)
        select flat_from as text
        from ch_ksk.t_building,params
        where t_street_id=params.str_id
        and building_num=params.build_num
        and case when coalesce(build_fract,'')!='' then lower(trim(build_subunit)) = lower((select ch_ksk.replace_eng_let(trim(params.build_fract))))
        else build_subunit is null end
    </flat_from_range>
        <flat_to_range>
            with params as (select cast(? as bigint) as str_id,cast(? as int) as build_num,cast(? as varchar) as build_fract)
            select flat_to as text
            from ch_ksk.t_building,params
            where t_street_id=params.str_id
            and building_num=params.build_num
            and case when coalesce(build_fract,'')!='' then lower(trim(build_subunit)) = lower((select ch_ksk.replace_eng_let(trim(params.build_fract))))
            else build_subunit is null end
        </flat_to_range>
        <get_disp_mail_by_rec_id>
        select  u.usermail1 as text
        from ch_ksk.t_request  r ,
        ch_ksk.t_flats f ,
        ch_ksk.t_building_ksk b  ,
        ch_ksk.t_building_ksk_emps bke,
        ch_ksk.t_position p,
        ch_ksk.t_position_types pt ,
        ch_ksk.t_user u
        where r.t_flats_id = f.id
        and r.id = ?
        and b.t_building_id = f.t_building_id
        and bke.t_building_ksk_id = b.id
        and p.id = bke.t_position_id
        and p.date_end is null
        and pt.id = p.t_position_types_id
        and pt.code = 'ds'
        and b.status = 1
        and p.t_user_id = u.id
        and substring(u.usermail1,length(u.usermail1)-2,length(u.usermail1)) != '@kz'
        </get_disp_mail_by_rec_id>
        <get_all_disp_by_rec_id>
    select  u.usermail1 as text
    from ch_ksk.t_request  r ,
    ch_ksk.t_flats f ,
    ch_ksk.t_building_ksk b ,
    ch_ksk.t_position p ,
    ch_ksk.t_position_types pt,
    ch_ksk.t_user u
    where r.t_flats_id = f.id
    and r.id = ?
    and b.t_building_id = f.t_building_id
    and b.status = 1
    and p.t_ksk_id = b.t_ksk_id
    and pt.id = p.t_position_types_id
    and pt.code = 'ds'
    and u.id = p.t_user_id
    and p.date_end is null
    and substring(u.usermail1,length(u.usermail1)-2,length(u.usermail1)) != '@kz'
       </get_all_disp_by_rec_id>
        <statrep11>
            <![CDATA[
 select
  k1.id as recid
  , k1.description as sdescription
  , k1.phone1
  , k1.phone2
  , k1.status
  ,(select count(*) from
    ch_ksk.t_building_ksk bk,
    ch_ksk.t_building b,
    ch_ksk.t_flats f,
    ch_ksk.t_user u,
    ch_ksk.t_relation r
    where
    bk.t_ksk_id = k1.id
    and bk.t_building_id = b.id
    and f.t_building_id = b.id
    and r.t_user_id = u.id
    and r.t_flats_id = f.id
    and r.status in (0,1,2)) as cit_count
  from ch_ksk.t_ksk k1
  order by k1.id;
            ]]>
        </statrep11>
        <statrep12>
            <![CDATA[
SELECT
  u.id uid
  ,c.description city
  ,ls.description||' '||al.lang_text street
  ,u.lastname
  ,u.firstname
  ,u.middlename
  ,u.mobile_phone
  ,u.home_phone
  ,b.building_num||COALESCE('/'||b.build_subunit,'') building_num
  ,b.id build_id
  ,f.flat_num||COALESCE('/'||f.flat_subunit,' ') flat_num
  ,f.id as recid
  ,(CASE WHEN r.status=0 THEN 'Создан'
        WHEN r.status=1 THEN 'Активный'
        WHEN r.status=2 THEN 'На утверждении'
        WHEN r.status=3 THEN 'Конфликт'
        WHEN r.status=4 THEN 'Закрыт'
        ELSE ' '
       END) status
  ,u.usermail1
  ,to_char(u.user_activated_to,'yyyy-mm-dd') user_activated
FROM
  ch_ksk.t_ksk k
  ,ch_ksk.t_building_ksk bk
  ,ch_ksk.t_building b
  ,ch_ksk.t_street s
  ,ch_ksk.t_city c
  ,ch_ksk.t_street_type st
  ,ch_ksk.t_lang_street ls
  ,ch_ksk.t_any_lang_text al
  ,ch_ksk.t_flats f
  ,ch_ksk.t_user u
  ,ch_ksk.t_relation r
WHERE
  bk.t_ksk_id = k.id
  and bk.t_building_id = b.id
  and b.t_street_id = s.id
  and ls.t_street_id = s.id
  and s.street_type_id = st.id
  and s.t_city_id = c.id
  and al.table_id = st.id
  and al.table_name = 't_street_type'
  and al.t_language_id = 1
  and ls.t_language_id = 1
  and f.t_building_id = b.id
  and r.t_user_id = u.id
  and r.t_flats_id = f.id
  and r.status in (0,1,2)
  and k.id=cast(? as int)
ORDER BY
  u.id;
            ]]>
        </statrep12>
        <statrep21>
            <![CDATA[
SELECT
  r.status recid
  ,count(*) st_count
  ,(CASE WHEN r.status=0 THEN 'Создан'
        WHEN r.status=1 THEN 'Активный'
        WHEN r.status=2 THEN 'На утверждении'
        WHEN r.status=3 THEN 'Конфликт'
        WHEN r.status=4 THEN 'Закрыт'
        ELSE ' '
       END) status
FROM
  ch_ksk.t_relation r
group BY r.status
order by r.status;
            ]]>
        </statrep21>
        <statrep22>
            <![CDATA[
      SELECT
        c.description city
        ,s.id as street_id
        ,s.street_type_id as st_type_id
        ,(select lang_text from ch_ksk.t_any_lang_text where table_name = 't_street_type' and table_id = s.street_type_id and t_language_id = 1) st_type_name
        ,ls.description||' '||al.lang_text street
        ,u.id uid
        ,b.building_num||COALESCE('/'||b.build_subunit,'') building_num
        ,b.id build_id
        ,f.flat_num||COALESCE('/'||f.flat_subunit,' ') flat_num
        ,u.id as recid
        ,f.id as fid
        ,u.usermail1
        ,u.lastname
        ,u.firstname
        ,u.middlename
        ,u.mobile_phone
        ,u.home_phone
        ,to_char(u.user_activated_to,'yyyy-mm-dd') user_activated
        ,COALESCE((select k2.description from ch_ksk.t_building_ksk bk2, ch_ksk.t_ksk k2
           where bk2.t_ksk_id=k2.id and bk2.status=1
           and bk2.t_building_id = b.id),' ')
         ||COALESCE((select ', '||k3.description from ch_ksk.t_building_ksk bk3, ch_ksk.t_ksk k3
           where bk3.t_ksk_id=k3.id and bk3.status=3
      and bk3.t_building_id = b.id),' ') ksk
        FROM
        ch_ksk.t_building b
        ,ch_ksk.t_street s
        ,ch_ksk.t_city c
        ,ch_ksk.t_street_type st
        ,ch_ksk.t_lang_street ls
        ,ch_ksk.t_any_lang_text al
        ,ch_ksk.t_flats f
        ,ch_ksk.t_user u
        ,ch_ksk.t_relation r
        WHERE
        b.t_street_id = s.id
        and ls.t_street_id = s.id
        and s.street_type_id = st.id
        and s.t_city_id = c.id
        and al.table_id = st.id
        and al.table_name = 't_street_type'
        and al.t_language_id = 1
        and ls.t_language_id = 1
        and f.t_building_id = b.id
        and r.t_user_id = u.id
        and r.t_flats_id = f.id
        and r.status=?
        ORDER BY
        f.id, ls.description ASC;
         ]]>
        </statrep22>
        <statrep31>
            <![CDATA[
                    SELECT
        c.description city
        ,ls.description||' '||al.lang_text street
        ,u.id uid
        ,b.building_num||COALESCE('/'||b.build_subunit,'') building_num
        ,b.id build_id
        ,f.flat_num||COALESCE('/'||f.flat_subunit,' ') flat_num
        ,f.id as recid
        ,u.usermail1
        ,u.lastname
        ,u.firstname
        ,u.middlename
        ,u.mobile_phone
        ,u.home_phone
        ,to_char(u.user_activated_to,'yyyy-mm-dd') user_activated
        FROM
        ch_ksk.t_building b
        ,ch_ksk.t_street s
        ,ch_ksk.t_city c
        ,ch_ksk.t_street_type st
        ,ch_ksk.t_lang_street ls
        ,ch_ksk.t_any_lang_text al
        ,ch_ksk.t_flats f
        ,ch_ksk.t_user u
        ,ch_ksk.t_relation r
        WHERE
        b.t_street_id = s.id
        and ls.t_street_id = s.id
        and s.street_type_id = st.id
        and s.t_city_id = c.id
        and al.table_id = st.id
        and al.table_name = 't_street_type'
        and al.t_language_id = 1
        and ls.t_language_id = 1
        and f.t_building_id = b.id
        and r.t_user_id = u.id
        and r.t_flats_id = f.id
        and r.status<>4
        and not exists (select 1 from ch_ksk.t_building_ksk bk where bk.t_building_id = b.id)
        ORDER BY
        f.id, ls.description ASC;
            ]]>
        </statrep31>
        <statrep41>
            <![CDATA[
SELECT
  st.lang_text req_status,
  r.t_req_status_id recid,
  count(*) req_count
 FROM
  ch_ksk.t_request r,
  ch_ksk.t_any_lang_text st
WHERE
  st.table_id = r.t_req_status_id AND
  st.table_name = 't_req_status' AND
  st.t_language_id = 1
GROUP BY r.t_req_status_id, st.lang_text;
            ]]>
        </statrep41>
        <statrep42>
            <![CDATA[
SELECT
  r.id recid,
  r.t_user_id,
  u.usermail1,
  u.lastname,
  u.firstname,
  u.middlename,
  u.mobile_phone,
  u.home_phone,
  c.description city,
  l.description street,
  b.building_num||COALESCE('/'||b.build_subunit,'') building_num,
  f.flat_num||COALESCE('/'||f.flat_subunit,' ') flat_num,
  r.note,
  st.lang_text req_status,
  r.t_req_status_id,
  to_char(r.dat_reg,'yyyy-mm-dd hh24:mi:ss') dat_reg,
  to_char(r.dead_line,'yyyy-mm-dd') dead_line,
  to_char(r.dat_close,'yyyy-mm-dd hh24:mi:ss') dat_close,
  r.rate_val,
  r.rate_text
 ,COALESCE((select k2.description from ch_ksk.t_building_ksk bk2, ch_ksk.t_ksk k2
           where bk2.t_ksk_id=k2.id and bk2.status=1
           and bk2.t_building_id = b.id),' ')
         ||COALESCE((select ', '||k3.description from ch_ksk.t_building_ksk bk3, ch_ksk.t_ksk k3
           where bk3.t_ksk_id=k3.id and bk3.status=3
      and bk3.t_building_id = b.id),' ') ksk
FROM
  ch_ksk.t_request r,
  ch_ksk.t_flats f,
  ch_ksk.t_user u,
  ch_ksk.t_building b,
  ch_ksk.t_street s,
  ch_ksk.t_city c,
  ch_ksk.t_lang_street l,
  ch_ksk.t_any_lang_text st
WHERE
  r.t_flats_id = f.id AND
  r.t_user_id = u.id AND
  f.t_building_id = b.id AND
  b.t_street_id = s.id AND
  l.t_street_id = s.id AND
  s.t_city_id = c.id and
  st.table_id = r.t_req_status_id AND
  l.t_language_id = 1 AND
  st.table_name = 't_req_status' AND
  st.t_language_id = 1
  and u.user_status_id = 1
  and r.t_req_status_id = ?
ORDER BY
  r.dat_reg ASC,
  r.t_flats_id ASC;
            ]]>
        </statrep42>
        <statrep51>
            <![CDATA[
                    SELECT
  u.id as recid,
  u.usermail1,
  u.mail1status,
  u.firstname,
  u.lastname,
  u.middlename,
  u.mobile_phone,
  u.home_phone,
  u.user_status_id,
  to_char(u.user_activated_to,'yyyy-mm-dd') user_activated
FROM
  ch_ksk.t_user u
WHERE
  not exists (select 1 from ch_ksk.t_relation r where r.t_user_id = u.id)
ORDER BY u.id;
            ]]>
        </statrep51>
        <doc_type>
            <![CDATA[
SELECT 0 as id, '...' as text WHERE 1=cast (? as int)
 UNION ALL
SELECT id, ch_ksk.f_get_lang_text('t_ksk_doc_type', id, cast (? as int)) as text
  FROM ch_ksk.t_ksk_doc_type
WHERE sys_type=cast (? as int)
            ]]>
        </doc_type>
        <check_for_reopen>
            select count(id) as count_reopen from ch_ksk.t_oper_history where t_request_id=cast(? as bigint) and t_req_status_id=7
        </check_for_reopen>
        <get_guestfeedback>
            select flname,note from ch_ksk.t_guestfeedback where show = cast(? as int) order by reg_date desc
        </get_guestfeedback>
        <get_gallery_data>
            <![CDATA[
            with lang as (select ? as lang_id)
            select
                (select tlt.lang_text from ch_ksk.t_any_lang_text tlt where tlt.table_name='t_ksk' and tlt.table_id=tg.ksk_id and tlt.t_language_id=lang.lang_id) as ksk_name,
                coalesce(to_char(tg.t_req_id, '9999999999'),'') as request_id ,
                tg.before_f_id as before_f_id,
                tg.after_f_id as after_f_id,
                to_char(f1.creation_date, 'dd.mm.yyyy')  as load_date,
	            to_char(f2.creation_date, 'dd.mm.yyyy')  as load_date_aft,
                tg.comment as comment
             from
             ch_ksk.t_ksk_gallery tg, auction.files f1, auction.files f2, lang
             where tg.before_f_id=f1.file_id
		      and tg.after_f_id=f2.file_id
		      and f1.table_name='t_ksk_gallery'
		      and f2.table_name='t_ksk_gallery'
		      order by load_date_aft desc
            ]]>
        </get_gallery_data>
        <chech_request_id>
            select id from ch_ksk.t_request where id=?
        </chech_request_id>
        <count_position>
            select count(id) as pos_count
            from ch_ksk.t_position
            where date_end is null
            and t_user_id=?
        </count_position>
        <check_serv_by_ksk>
            select to_ksk,serv_id from ch_ksk.t_services where id=cast(? as bigint)
        </check_serv_by_ksk>
        <get_serv_subtype>
            with param as (select cast(? as bigint) as lang,cast(? as bigint) as serv)
            select s.id,tlt.lang_text as text,qq.lang_text as quest_serv
            from ch_ksk.t_services s
            inner join param on 1=1
            inner join ch_ksk.t_any_lang_text tlt on tlt.table_id=s.id and tlt.table_name='t_services' and t_language_id=param.lang
            left outer join (select tlt1.lang_text,qa.t_services_id ,tlt1.t_language_id
            from ch_ksk.t_any_lang_text tlt1, ch_ksk.t_serv_quest_ans qa
            where tlt1.table_id=qa.id and tlt1.table_name='t_serv_quest_ans' and qa.is_quest=2) as qq on qq.t_services_id=s.id and qq.t_language_id=param.lang
            where s.serv_id=param.serv
              and s.status=1
        </get_serv_subtype>
        <get_serv_quest>
            select q.id, tlt.lang_text as text
            from ch_ksk.t_serv_quest_ans q,ch_ksk.t_any_lang_text tlt
            where q.id=tlt.table_id and tlt.table_name='t_serv_quest_ans'
            and tlt.t_language_id=cast(? as int) and q.t_services_id=cast(? as bigint) and q.is_quest=1 and level=cast(? as int)
        </get_serv_quest>
        <get_serv_ans>
            select q.id, tlt.lang_text as text, q.ans_type, q.other_type
            from ch_ksk.t_serv_quest_ans q,ch_ksk.t_any_lang_text tlt
            where q.id=tlt.table_id and tlt.table_name='t_serv_quest_ans'
            and tlt.t_language_id=cast(? as int) and q.quest_id=cast(? as bigint) and q.is_quest=0
            order by q.other_type desc
        </get_serv_ans>
        <get_comp_mail_by_serv_id>
            select dv.doc_value as text
            from ch_ksk.t_company_services cs,
            ch_ksk.t_company_doc_value dv,
            ch_ksk.t_company_doc_type dc,
            ch_ksk.t_company c
            where cs.serv_id=cast(? as bigint)
            and cs.company_id=c.id
            and c.id=dv.t_company_id
            and dv.cdt_id=dc.id
            and dc.code='EMAIL'
            and dc.status=1
            and c.status=1
            and cs.city_id=cast(? as bigint)
        </get_comp_mail_by_serv_id>
        <get_comp_mail_by_req_id>
            select dv.doc_value as text
            from ch_ksk.t_company_services cs,
            ch_ksk.t_company_doc_value dv,
            ch_ksk.t_company_doc_type dc,
            ch_ksk.t_company c,
            ch_ksk.t_request tr,
            ch_ksk.t_flats tf,
            ch_ksk.t_building tb,
            ch_ksk.t_street ts,
            ch_ksk.t_city tc
            where
            tr.t_services_id=cs.serv_id
            and tr.t_flats_id=tf.id
            and tf.t_building_id=tb.id
            and tb.t_street_id=ts.id
            and ts.t_city_id=tc.id
            and cs.company_id=c.id
            and c.id=dv.t_company_id
            and dv.cdt_id=dc.id
            and dc.code='EMAIL'
            and dc.status=1
            and c.status=1
            and cs.city_id=tc.id
            and tr.id=?
        </get_comp_mail_by_req_id>
        <get_city_id_by_flat>
            select s.t_city_id as id
            from ch_ksk.t_flats f,
            ch_ksk.t_building b,
            ch_ksk.t_street s
            where f.id=cast(? as bigint)
            and f.t_building_id=b.id
            and b.t_street_id=s.id
        </get_city_id_by_flat>
        <get_city_name>
            select tlt.lang_text as text
              from ch_ksk.t_city c,
                   ch_ksk.t_any_lang_text tlt
             where c.id=cast(? as bigint)
               and c.id=tlt.table_id
               and tlt.table_name='t_city'
               and tlt.t_language_id=1

        </get_city_name>
        <get_serv_quest_by_req>
            select qa.id,tlt.lang_text
              from ch_ksk.t_serv_quest_ans qa,
                   ch_ksk.t_any_lang_text tlt
             where qa.id in (select quest_id from ch_ksk.t_serv_quest_ans where id in (select ans_id from ch_ksk.t_ans_selected_values where t_request_id=cast(? as bigint)))
               and qa.id=tlt.table_id
               and tlt.table_name='t_serv_quest_ans'
               and tlt.t_language_id=cast(? as bigint)
             order by qa.level
        </get_serv_quest_by_req>
        <get_serv_sel_ans>
        select case when qa.other_type=1 then sv.description else tlt.lang_text end as text
        from ch_ksk.t_ans_selected_values sv,
        ch_ksk.t_any_lang_text tlt,
        ch_ksk.t_serv_quest_ans qa
        where sv.t_request_id=cast(? as bigint)
        and sv.ans_id=qa.id
        and qa.id=tlt.table_id
        and tlt.table_name='t_serv_quest_ans'
        and tlt.t_language_id=cast(? as bigint)
        and qa.quest_id=cast(? as bigint)
        order by qa.other_type desc
        </get_serv_sel_ans>
        <serv_req_status>
            <![CDATA[
   select t2.id, t1.id as tsrc, t1.status as req_status
            from ch_ksk.t_serv_req_company t1,
                 ch_ksk.t_req_status t2,
                 ch_ksk.t_company t3,
                 ch_ksk.t_company_services t4,
                 ch_ksk.t_request t5
             where  t1.status=t2.id
             and t3.id=t4.company_id
             and t4.id=t1.t_comp_serv_id
             and t5.id=t1.t_request_id
             and t1.t_request_id=?
             and t3.id=?
            ]]>
        </serv_req_status>
        <get_comp_for_select>
        select sr.id,tlt.lang_text,cs.rating, c.id as comp_id
        from ch_ksk.t_serv_req_company sr,
        ch_ksk.t_company_services cs,
        ch_ksk.t_company c,
        ch_ksk.t_any_lang_text tlt
        where sr.t_request_id=cast(? as bigint)
        and sr.t_comp_serv_id=cs.id
        and sr.status = 2
        and cs.company_id=c.id
        and c.status=1
        and c.id=tlt.table_id
        and tlt.table_name='t_company'
        and tlt.t_language_id=cast(? as bigint)
        order by cs.rating desc
        </get_comp_for_select>
        <get_company_info>
            with param as (select cast(? as bigint) as comp_id,cast(? as bigint) as lang)
            select
            (select tlt.lang_text as text_about from ch_ksk.t_company_doc_type dc,ch_ksk.t_any_lang_text tlt, param
            where dc.code='ABOUT_COMP' and dc.status=1 and dc.sys_type=0 and dc.id=tlt.table_id and tlt.table_name='t_company_doc_type' and tlt.t_language_id=param.lang),
            (select doc_value as comp_about from ch_ksk.t_company_doc_value dv, ch_ksk.t_company_doc_type dc, param
            where dv.t_company_id=param.comp_id and dv.cdt_id=dc.id and dc.status=1 and dv.status=1 and dc.sys_type=0 and dc.code='ABOUT_COMP'),
            (select tlt.lang_text as text_email from ch_ksk.t_company_doc_type dc,ch_ksk.t_any_lang_text tlt, param
            where dc.code='EMAIL' and dc.status=1 and dc.sys_type=0 and dc.id=tlt.table_id and tlt.table_name='t_company_doc_type' and tlt.t_language_id=param.lang),
            (select string_agg(doc_value,'; ') as email from ch_ksk.t_company_doc_value dv, ch_ksk.t_company_doc_type dc, param
            where dv.t_company_id=param.comp_id and dv.cdt_id=dc.id and dc.status=1 and dv.status=1 and dc.sys_type=0 and dc.code='EMAIL'),
            (select tlt.lang_text as text_mob_phone from ch_ksk.t_company_doc_type dc,ch_ksk.t_any_lang_text tlt, param
            where dc.code='MOB_PHONE' and dc.status=1 and dc.sys_type=0 and dc.id=tlt.table_id and tlt.table_name='t_company_doc_type' and tlt.t_language_id=param.lang),
            (select string_agg(doc_value,'; ') as mob_phone from ch_ksk.t_company_doc_value dv, ch_ksk.t_company_doc_type dc, param
            where dv.t_company_id=param.comp_id and dv.cdt_id=dc.id and dc.status=1 and dv.status=1 and dc.sys_type=0 and dc.code='MOB_PHONE'),
            (select tlt.lang_text as text_work_phone from ch_ksk.t_company_doc_type dc,ch_ksk.t_any_lang_text tlt, param
            where dc.code='WORK_PHONE' and dc.status=1 and dc.sys_type=0 and dc.id=tlt.table_id and tlt.table_name='t_company_doc_type' and tlt.t_language_id=param.lang),
            (select string_agg(doc_value,'; ')as work_phone from ch_ksk.t_company_doc_value dv, ch_ksk.t_company_doc_type dc, param
            where dv.t_company_id=param.comp_id and dv.cdt_id=dc.id and dc.status=1 and dv.status=1 and dc.sys_type=0 and dc.code='WORK_PHONE');
        </get_company_info>
        <check_req_for_exec>
            select count(*) n_count from ch_ksk.t_serv_req_company where t_request_id=cast(? as bigint) and status in (3,4,5,6,7)
        </check_req_for_exec>
        <get_exec_comp>
            select tlt.lang_text
            from ch_ksk.t_serv_req_company src,
            ch_ksk.t_company_services cs,
            ch_ksk.t_any_lang_text tlt
            where src.t_request_id=cast(? as bigint)
            and src.status = cast(? as bigint)
            and src.t_comp_serv_id=cs.id
            and cs.company_id=tlt.table_id
            and tlt.table_name='t_company'
            and tlt.t_language_id=cast(? as bigint)
            limit 1
        </get_exec_comp>
        <get_sel_comp_mail_by_serv_req_id>
            select dv.doc_value as text
            from ch_ksk.t_company_services cs,
            ch_ksk.t_company_doc_value dv,
            ch_ksk.t_company_doc_type dc,
            ch_ksk.t_company c,
            ch_ksk.t_serv_req_company src
            where src.id=cast(? as bigint)
            and src.t_comp_serv_id=cs.id
            and cs.company_id=c.id
            and c.id=dv.t_company_id
            and dv.cdt_id=dc.id
            and dc.code='EMAIL'
            and dc.status=1
            and c.status=1
            and dv.status=1
        </get_sel_comp_mail_by_serv_req_id>
        <check_user>
            select count(*) count_pos
            from ch_ksk.t_serv_req_company src,
            ch_ksk.t_company_services cs,
            ch_ksk.t_comp_position cp
            where src.id = cast(? as bigint)
            and src.t_comp_serv_id = cs.id
            and cs.company_id=cp.comp_id
            and cp.t_user_id=cast(? as bigint)
        </check_user>
        <get_comp_mail_by_req_id_and_status>
        select dv.doc_value as text
        from ch_ksk.t_company_services cs,
        ch_ksk.t_company_doc_value dv,
        ch_ksk.t_company_doc_type dc,
        ch_ksk.t_company c,
        ch_ksk.t_serv_req_company src
        where src.t_request_id=cast(? as bigint)
        and src.status=cast(? as bigint)
        and src.t_comp_serv_id=cs.id
        and cs.company_id=c.id
        and c.id=dv.t_company_id
        and dv.cdt_id=dc.id
        and dc.code='EMAIL'
        and dc.status=1
        and c.status=1
        and dv.status=1
        </get_comp_mail_by_req_id_and_status>
        <get_usermail_by_req_id>
            <![CDATA[
            select tu.usermail1 from ch_ksk.t_request tr, ch_ksk.t_user tu where tr.t_user_id=tu.id and tr.id=?
            ]]>
        </get_usermail_by_req_id>
        <get_comp_moderatormail>
            <![CDATA[
  select tu.usermail1 as email, tlt.lang_text as comp_name
            from ch_ksk.t_moderators tm,
             ch_ksk.t_user tu,
             ch_ksk.t_any_lang_text  tlt
            where   tm.status=1
               and tm.t_user_id = tu.id
               and tu.mail1status=1
               and tu.user_status_id=1
               and tlt.table_name='t_company'
               and tlt.t_language_id=?
               and tlt.table_id=?
            ]]>
        </get_comp_moderatormail>
        <get_all_comp_moderatormail>
            <![CDATA[
  select tu.usermail1 as email, tm.id
            from ch_ksk.t_moderators tm,
             ch_ksk.t_user tu
            where   tm.status=1
               and tm.t_user_id = tu.id
               and tu.mail1status=1
               and tu.user_status_id=1
            ]]>
        </get_all_comp_moderatormail>
        <get_serv_city_by_req_id>
            select r.t_services_id,s.t_city_id from ch_ksk.t_request r, ch_ksk.t_flats f, ch_ksk.t_building b, ch_ksk.t_street s
            where r.id=cast(? as bigint)
            and r.t_flats_id=f.id
            and f.t_building_id=b.id
            and b.t_street_id=s.id
        </get_serv_city_by_req_id>
        <comp_search>
            with params as (select cast(? as varchar) as bin, ? as lang, cast(? as varchar) as name)
            select c.id as recid, c.iin_bin as bin, tlt.lang_text as descr, tlt2.lang_text as status,c.status stat_id,
            (select string_agg (dv.doc_value, ', ') as phones from ch_ksk.t_company_doc_value dv, ch_ksk.t_company_doc_type dc
            where dv.t_company_id=c.id and dv.cdt_id=dc.id and dc.code in ('MOB_PHONE','WORK_PHONE')),
            (with param as (select cast(c.id as bigint) as comp_id,cast(p.lang as bigint) as lang)
            select
            (select (select lang_text from ch_ksk.t_any_lang_text where table_id=cast(dv.doc_value as bigint) and table_name='t_city' and t_language_id=param.lang) as ct
            from ch_ksk.t_company_doc_value dv, ch_ksk.t_company_doc_type dc, param
            where dv.t_company_id=param.comp_id and dv.cdt_id=dc.id and dc.status=1 and dv.status=1 and dc.sys_type=0 and dc.code='COMP_CITY')||' '||
            (select ch_ksk.f_street(cast(dv.doc_value as integer),cast(param.lang as integer)) as str
            from ch_ksk.t_company_doc_value dv, ch_ksk.t_company_doc_type dc, param
            where dv.t_company_id=param.comp_id and dv.cdt_id=dc.id and dc.status=1 and dv.status=1 and dc.sys_type=0 and dc.code='COMP_STRT')||' '||
            (select doc_value as home from ch_ksk.t_company_doc_value dv, ch_ksk.t_company_doc_type dc, param
            where dv.t_company_id=param.comp_id and dv.cdt_id=dc.id and dc.status=1 and dv.status=1 and dc.sys_type=0 and dc.code='COMP_HOME')||
            (select case when (doc_value != '' and doc_value is not null) then '/'||doc_value else '' end as home_f from ch_ksk.t_company_doc_value dv, ch_ksk.t_company_doc_type dc, param
            where dv.t_company_id=param.comp_id and dv.cdt_id=dc.id and dc.status=1 and dv.status=1 and dc.sys_type=0 and dc.code='COMP_H_FR')||' '||
            (select lang_text from ch_ksk.t_any_lang_text, param where table_name='t_flat_type' and t_language_id=param.lang)||
            (select doc_value as flat from ch_ksk.t_company_doc_value dv, ch_ksk.t_company_doc_type dc, param
            where dv.t_company_id=param.comp_id and dv.cdt_id=dc.id and dc.status=1 and dv.status=1 and dc.sys_type=0 and dc.code='COMP_FLAT')||
            (select case when (doc_value != '' and doc_value is not null) then '/'||doc_value else '' end as flat_f from ch_ksk.t_company_doc_value dv, ch_ksk.t_company_doc_type dc, param
            where dv.t_company_id=param.comp_id and dv.cdt_id=dc.id and dc.status=1 and dv.status=1 and dc.sys_type=0 and dc.code='COMP_F_FR') as address)
            from ch_ksk.t_company c,
            ch_ksk.t_any_lang_text tlt,
            ch_ksk.t_any_lang_text tlt2,
            params p
            where case when p.bin = '-1' then 1=1 else c.iin_bin like p.bin end
            and c.id=tlt.table_id
            and tlt.table_name='t_company'
            and tlt.t_language_id=p.lang
            and case when p.name = '-1' then 1=1 else lower(tlt.lang_text) like lower(p.name) end
            and c.status = tlt2.table_id
            and tlt2.table_name='t_ksk_status'
            and tlt2.t_language_id=p.lang
            order by 1
        </comp_search>

<doc_search_filter_by_sys_type>
    select d.id, s.lang_text as text
    from  ch_ksk.t_any_lang_text s , ch_ksk.t_company_doc_type d
    where s.table_name = 't_company_doc_type' and s.table_id = d.id and d.code not in ('OTHER_SERV','OTHER_QUES')
    and d.sys_type = ?
    and s.t_language_id  = ?
</doc_search_filter_by_sys_type>
        <doc_search_filter>
            select d.id, s.lang_text as text
            from  ch_ksk.t_any_lang_text s , ch_ksk.t_company_doc_type d
            where s.table_name = 't_company_doc_type' and s.table_id = d.id and d.code not in ('OTHER_SERV','OTHER_QUES')
            and s.t_language_id  = ?
        </doc_search_filter>
     

        <sys_type_doc>
            select table_id as id, lang_text as text
            from  ch_ksk.t_any_lang_text
            where table_name = 't_cdt_sys_type'
            and t_language_id  = ?
        </sys_type_doc>
       <doc_search>
           with params as (select cast(? as bigint) as compid, cast(? as bigint) as docid , cast(? as bigint) as langid)
           select d1.id as recid
           ,s1.lang_text as compname
           ,s.lang_text as doc_type,
           d1.doc_value as VAL,
           (select lang_text from ch_ksk.t_any_lang_text
           where table_name ='t_ksk_status' and table_id = d1.status and t_language_id = p.langid ) as status_field,
           d1.status,
           s.t_language_id as lang
           from ch_ksk.t_company_doc_value d1,
           ch_ksk.t_company_doc_type d,
           ch_ksk.t_any_lang_text s,
           ch_ksk.t_any_lang_text s1,
           params p
           where d1.t_company_id = p.compid
           and d1.cdt_id = d.id
           and d.code not in ('OTHER_SERV','OTHER_QUES')
           and case when  p.docid = 0  then 1=1 else d.id = p.docid end
           and s.table_id = d.id
           and s.table_name = 't_company_doc_type'
           and s.t_language_id = p.langid
           and d1.t_company_id = s1.table_id
           and s1.table_name = 't_company'
           and s1.t_language_id = s.t_language_id


       </doc_search>
        <get_comp_mainuser>
            select u.lastname||' '||u.firstname||' '||coalesce(u.middlename,'') as fio
            from ch_ksk.t_comp_position p,
            ch_ksk.t_user u,
            ch_ksk.t_comp_position_type pt
            where p.comp_id=cast(? as bigint)
            and p.comp_pos_type_id=pt.id
            and pt.code='MUS'
            and p.t_user_id=u.id
        </get_comp_mainuser>
        <get_company_services_tree>
            select all_s.id,
            all_s.text as text, all_s.folder, all_s.level
            from (
            WITH RECURSIVE q (id, serv_id ,lang_text, path, lang, to_ksk, level, folder) AS (
            select ts.id,ts.serv_id, tlt.lang_text as text, ltrim(cast(ts.id as varchar)) as path,tlt.t_language_id as lang, ts.to_ksk,1 as level, ts.is_last_lvl as folder
            FROM ch_ksk.t_services ts, ch_ksk.t_any_lang_text tlt
            WHERE ts.id=tlt.table_id
            AND tlt.table_name='t_services'
            AND tlt.t_language_id=cast(? as bigint)
            AND ts.status=1
            AND ts.serv_id is null
            UNION ALL
            select ts2.id,ts2.serv_id, tlt2.lang_text as text, ltrim(cast(q.path||ts2.id as varchar)) as path, q.lang, ts2.to_ksk, q.level + 1 as level, ts2.is_last_lvl as folder
            from ch_ksk.t_services ts2, ch_ksk.t_any_lang_text tlt2,q
            WHERE ts2.id=tlt2.table_id
            AND tlt2.table_name='t_services'
            AND ts2.status=1
            AND tlt2.t_language_id=q.lang
            and q.id=ts2.serv_id
            )
            SELECT q.id, q.serv_id,q.lang_text as text, q.path, q.to_ksk, q.level, q.folder

            FROM q
            ORDER BY q.to_ksk desc,q.path
            ) as all_s,
            (
            select distinct fff.id from (
            select distinct (serv.*) from (
            WITH RECURSIVE q (id, serv_id ,lang_text, lang, to_ksk, level) AS (
            select ts.id,ts.serv_id,tlt.lang_text as text, tlt.t_language_id as lang, ts.to_ksk, 1 as level, ltrim(cast(ts.id as varchar)) as path
            FROM ch_ksk.t_services ts, ch_ksk.t_company_services tcs,  ch_ksk.t_any_lang_text tlt
            WHERE ts.id=tlt.table_id
            AND tlt.table_name='t_services'
            AND tlt.t_language_id=cast(? as bigint)
            AND ts.status=1
            AND ts.to_ksk != 1
            AND ts.id =tcs.serv_id
            and tcs.status=1
            and tcs.company_id=cast(? as bigint)
            UNION ALL
            select ts2.id,ts2.serv_id, tlt2.lang_text as text, q.lang, ts2.to_ksk, q.level +1 as level, ltrim(cast(ts2.id as varchar))||q.path as path
            from ch_ksk.t_services ts2, ch_ksk.t_any_lang_text tlt2,q
            WHERE ts2.id=tlt2.table_id
            AND tlt2.table_name='t_services'
            AND ts2.status=1
            AND tlt2.t_language_id=q.lang
            and q.serv_id=ts2.id
            )
            SELECT q.id, q.serv_id,q.lang_text as text, q.to_ksk, q.level, q.path
            FROM q
            ) as serv ORDER BY serv.path) as  fff
            ) sel
            where all_s.id=sel.id
            order by all_s.path
        </get_company_services_tree>
        <get_company_doc_types>
            with param as (select cast(? as bigint) as comp_id)
            select dc.id, t.lang_text
            from ch_ksk.t_company_doc_value dv,
            ch_ksk.t_company_doc_type dc,
            param p,
            ch_ksk.t_any_lang_text t
            where dv.t_company_id=p.comp_id
            and dv.cdt_id=dc.id
            and dv.status=1
            and dc.status=1
            and dc.code not in ('OTHER_SERV','OTHER_QUES','COMP_CITY','COMP_STRT','COMP_HOME','COMP_H_FR','COMP_FLAT','COMP_F_FR','MOB_PHONE','WORK_PHONE')
            and dc.id=t.table_id
            and t.table_name='t_company_doc_type'
            and t.t_language_id=cast(? as bigint)
            order by dc.id
        </get_company_doc_types>
        <get_company_doc_types_other>
            with param as (select cast(? as bigint) as comp_id)
            select dc.id, t.lang_text, dc.code
            from ch_ksk.t_company_doc_value dv,
            ch_ksk.t_company_doc_type dc,
            param p,
            ch_ksk.t_any_lang_text t
            where dv.t_company_id=p.comp_id
            and dv.cdt_id=dc.id
            and dv.status=1
            and dc.status=1
            and dc.code in ('OTHER_SERV','OTHER_QUES')
            and (dv.doc_value is not null and dv.doc_value != '')
            and dc.id=t.table_id
            and t.table_name='t_company_doc_type'
            and t.t_language_id=cast(? as bigint)
            order by dc.id
        </get_company_doc_types_other>
        <get_company_doc_values>
            with param as (select cast(? as bigint) as comp_id, cast(? as bigint) as d_type)
            select string_agg (dv.doc_value, '; ') as text
            from ch_ksk.t_company_doc_value dv,
            param p
            where dv.t_company_id=p.comp_id
            and dv.cdt_id=p.d_type
        </get_company_doc_values>
        <get_comp_mail_by_comp_id>
            select dv.doc_value as text
            from ch_ksk.t_company c,
            ch_ksk.t_company_doc_value dv,
            ch_ksk.t_company_doc_type dc
            where c.id=cast(? as bigint)
            and c.id=dv.t_company_id
            and dv.cdt_id=dc.id
            and dc.code='EMAIL'
            and dc.status=1
        </get_comp_mail_by_comp_id>
        <list_serv_quest>
           with param as (select ? as lang)
            select 0 as id, case when param.lang = 1 then 'Сервисы'
                                 when param.lang = 2 then 'Сервистер' end as text
              from param
            union all
            select 1 as id, case when param.lang = 1 then 'Вопросы'
                                 when param.lang = 2 then 'Сұрақтар' end as text
              from param
        </list_serv_quest>
        <servs_search>
            WITH RECURSIVE q (id, serv_id ,lang_text, path, lang, to_ksk, level,status) AS (
            with param as (select ? as lang, cast(? as int) as status)
            select ts.id,ts.serv_id, tlt.lang_text as text, ltrim(cast(ts.id as varchar)) as path,tlt.t_language_id as lang, ts.to_ksk,1 as level, ts.status
            FROM ch_ksk.t_services ts, ch_ksk.t_any_lang_text tlt,param
            WHERE ts.id=tlt.table_id
            AND tlt.table_name='t_services'
            AND tlt.t_language_id=param.lang
            AND ts.status=param.status
            AND ts.to_ksk != 1
            AND ts.id=cast(? as bigint)
            UNION ALL
            select ts2.id,ts2.serv_id, tlt2.lang_text as text, ltrim(cast(q.path||ts2.id as varchar)) as path, q.lang, ts2.to_ksk, q.level + 1 as level,ts2.status
            from ch_ksk.t_services ts2, ch_ksk.t_any_lang_text tlt2,q
            WHERE ts2.id=tlt2.table_id
            AND tlt2.table_name='t_services'
            AND tlt2.t_language_id=q.lang
            and q.id=ts2.serv_id
            )
            SELECT q.id as recid, q.serv_id,
            q.lang_text as text,
            (select t.lang_text from ch_ksk.t_any_lang_text t where q.serv_id=t.table_id and t.table_name='t_services' and t.t_language_id=q.lang) as serv_id_text,
            q.path, q.to_ksk, q.level,q.status as stat_id,
            (select t2.lang_text from ch_ksk.t_any_lang_text t2 where q.status=t2.table_id and t2.table_name='t_ksk_status' and t2.t_language_id=q.lang) as status
            FROM q
            ORDER BY q.path
        </servs_search>
        <quests_search>
            WITH RECURSIVE q (id, serv_id ,lang_text, path, lang, to_ksk, level,status) AS (
            with param as (select ? as lang)
            select ts.id,ts.serv_id, tlt.lang_text as text, ltrim(cast(ts.id as varchar)) as path,tlt.t_language_id as lang, ts.to_ksk,1 as level, ts.status
            FROM ch_ksk.t_services ts, ch_ksk.t_any_lang_text tlt,param
            WHERE ts.id=tlt.table_id
            AND tlt.table_name='t_services'
            AND tlt.t_language_id=param.lang
            AND ts.to_ksk != 1
            AND ts.id=cast(? as bigint)
            UNION ALL
            select ts2.id,ts2.serv_id, tlt2.lang_text as text, ltrim(cast(q.path||ts2.id as varchar)) as path, q.lang, ts2.to_ksk, q.level + 1 as level,ts2.status
            from ch_ksk.t_services ts2, ch_ksk.t_any_lang_text tlt2,q
            WHERE ts2.id=tlt2.table_id
            AND tlt2.table_name='t_services'
            AND tlt2.t_language_id=q.lang
            and q.id=ts2.serv_id
            )
            SELECT t1.id as recid, q.lang_text as serv_text, q.path, q.to_ksk, t2.lang_text as text, t1.status as stat_id, t3.lang_text as status, t1.level,
            (select string_agg(tt2.lang_text,', ') as ans from ch_ksk.t_serv_quest_ans tt1, ch_ksk.t_any_lang_text tt2
            where tt1.quest_id=t1.id and tt1.status=1 and tt1.other_type is null and tt1.id=tt2.table_id and tt2.table_name='t_serv_quest_ans' and tt2.t_language_id=q.lang)
            FROM q, ch_ksk.t_serv_quest_ans t1, ch_ksk.t_any_lang_text t2, ch_ksk.t_any_lang_text t3
            where q.id=t1.t_services_id
            and t1.is_quest=1
            and t1.status=cast(? as int)
            and t1.id=t2.table_id
            and t2.table_name='t_serv_quest_ans'
            and t2.t_language_id=q.lang
            and t1.status=t3.table_id
            and t3.table_name='t_ksk_status'
            and t3.t_language_id=q.lang
            ORDER BY q.path
        </quests_search>
        <serv_quest_status>
            select table_id as id, lang_text as text from ch_ksk.t_any_lang_text where table_name='t_ksk_status' and table_id != 2 and t_language_id=cast(? as int) order by table_id desc
        </serv_quest_status>
        <get_quest_ans_not_other>
          select t1.id, t2.lang_text, t1.ans_type
            from ch_ksk.t_serv_quest_ans t1, ch_ksk.t_any_lang_text t2
           where t1.quest_id=cast(? as bigint)
             and t1.is_quest=0
             and t1.status=1
             and t1.other_type is null
             and t1.id=t2.table_id
             and t2.table_name='t_serv_quest_ans'
             and t2.t_language_id=cast(? as int)
        </get_quest_ans_not_other>
        <get_serv_quest_by_serv>
            select t1.id, t2.lang_text, t1.ans_type
            from ch_ksk.t_serv_quest_ans t1, ch_ksk.t_any_lang_text t2
            where t1.t_services_id=cast(? as bigint)
            and t1.is_quest=1
            and t1.status=1
            and t1.id=t2.table_id
            and t2.table_name='t_serv_quest_ans'
            and t2.t_language_id=cast(? as int)
        </get_serv_quest_by_serv>
        <other_serv_quest_stat>
            select table_id as id, lang_text as text
              from ch_ksk.t_any_lang_text where table_name='other_serv_quest_stat' and t_language_id=cast(? as bigint)
            order by table_id
        </other_serv_quest_stat>
        <doc_search_comp>
            select d.id, s.lang_text as text
            from  ch_ksk.t_any_lang_text s , ch_ksk.t_company d
            where s.table_name = 't_company' and s.table_id = d.id
            and s.t_language_id  = ?
            and d.status = 1
        </doc_search_comp>
        <compInqs_search>
            with params as (select cast(? as bigint) as lang,cast(? as bigint) as comp)
            select dv.id as recid, tlt2.lang_text as compname, dv.t_company_id as comp_id, dv.doc_value as valinq, tlt.lang_text as typeinq, dc.code, tlt1.lang_text as status, dv.status as stat_id
            from ch_ksk.t_company_doc_value dv,
            ch_ksk.t_company_doc_type dc,
            ch_ksk.t_any_lang_text tlt,
            ch_ksk.t_any_lang_text tlt1,
            ch_ksk.t_any_lang_text tlt2,
            params p
            where dv.status = cast(? as bigint)
            and dv.cdt_id=dc.id
            and dc.code in ('OTHER_SERV','OTHER_QUES')
            and dc.id=tlt.table_id
            and tlt.table_name='t_company_doc_type'
            and tlt.t_language_id=p.lang
            and dv.status=tlt1.table_id
            and tlt1.table_name='other_serv_quest_stat'
            and tlt1.t_language_id=p.lang
            and dv.t_company_id=tlt2.table_id
            and tlt2.table_name='t_company'
            and tlt2.t_language_id=p.lang
            and case when p.comp = 0 then 1=1 else dv.t_company_id=p.comp end
            order by dv.t_company_id,dc.id
        </compInqs_search>
        <check_serv_reqs>
            select count(*) count_req
            from ch_ksk.t_serv_req_company sr,
            ch_ksk.t_company_services cs
            where cs.company_id=cast(? as bigint)
            and cs.id=sr.t_comp_serv_id
            and sr.status in (3,4,7)
        </check_serv_reqs>
        <get_all_comp_mail>
            select distinct dv.doc_value as text
            from ch_ksk.t_company c,
            ch_ksk.t_company_doc_type dc,
            ch_ksk.t_company_doc_value dv
            where c.id not in (cast(? as bigint))
            and c.status=1
            and c.id=dv.t_company_id
            and dv.cdt_id=dc.id
            and dc.code='EMAIL'
            and dv.status=1
        </get_all_comp_mail>
    <get_all_comp_mail_by_serv>
        select distinct dv.doc_value as text
        from ch_ksk.t_company_services cs,
        ch_ksk.t_company c,
        ch_ksk.t_company_doc_type dc,
        ch_ksk.t_company_doc_value dv
        where cs.serv_id in (WITH RECURSIVE q (id) AS (
        select ts.id
        FROM ch_ksk.t_services ts
        WHERE ts.to_ksk != 1
        AND ts.id=cast(? as bigint)
        UNION ALL
        select ts2.id
        from ch_ksk.t_services ts2,q
        WHERE q.id=ts2.serv_id
        )
        SELECT q.id
        FROM q)
        and cs.status=1
        and cs.company_id=c.id
        and c.status=1
        and c.id=dv.t_company_id
        and dv.status=1
        and dv.cdt_id=dc.id
        and dc.status=1
        and dc.code='EMAIL'
        and c.id not in (cast(? as bigint))
    </get_all_comp_mail_by_serv>
    <get_company_doc>
        <![CDATA[
      with param as (select  cast(? as bigint) as type_id)
    select tcv.id as recid,
	   tlt.lang_text as doctype,
	   tcv.doc_value as docvalue,
	   (select tlt2.lang_text from ch_ksk.t_any_lang_text tlt2 where tlt2.table_name='doc_sys_type' and tlt2.table_id=tct.sys_type and tlt2.t_language_id=tlt.t_language_id ) as sys_type
	from ch_ksk.t_company t,
	      ch_ksk.t_company_doc_value tcv,
	      ch_ksk.t_company_doc_type tct,
	      ch_ksk.t_any_lang_text tlt,
	      param p
        where t.id=tcv.t_company_id
	    and tcv.status=1
	    and tcv.cdt_id=tct.id
	    and tct.status=1
	    and tct.id=tlt.table_id
	    and tlt.table_name='t_company_doc_type'
	    and tct.sys_type in (0, 2)
	    and (select case when p.type_id=-1 then 1=1 else tct.id in (p.type_id) end)
	    and tlt.t_language_id=(select cast(? as bigint))
	    and t.id=(select cast(? as bigint))
        ]]>
    </get_company_doc>
    <get_doc_sys_type>
        <![CDATA[
    with param as (select ? as lang_id)
    select -1 as id,  (select lang_text from ch_ksk.t_any_lang_text  where  table_name='t_notification_status' and table_id=0 and t_language_id=p.lang_id) as text from param p
    union all
    select tct.id as id, tlt.lang_text||' ('||(select tlt2.lang_text from ch_ksk.t_any_lang_text tlt2 where tlt2.table_name='doc_sys_type' and tlt2.table_id=tct.sys_type and tlt2.t_language_id=tlt.t_language_id )||')'  as text
    from ch_ksk.t_company_doc_type tct,
    ch_ksk.t_any_lang_text tlt,
    param p2
    where tct.id = tlt.table_id
    and tlt.t_language_id =p2.lang_id
    and tlt.table_name='t_company_doc_type'
    and tct.status=1
        ]]>
    </get_doc_sys_type>
    <get_doc_type>
    <![CDATA[
    select tct.id as id, tlt.lang_text  as text
    from ch_ksk.t_company_doc_type tct,
    ch_ksk.t_any_lang_text tlt
    where tct.id = tlt.table_id
    and tlt.t_language_id =?
    and tlt.table_name='t_company_doc_type'
    and tct.status=1
    and tct.sys_type in (?)
    ]]>
    </get_doc_type>
        <check_exist_comp_by_serv>
            select count(cs.id) as count_comp from ch_ksk.t_company_services cs, ch_ksk.t_company c where cs.serv_id=cast(? as bigint) and cs.status=1 and cs.company_id=c.id and c.status=1
        </check_exist_comp_by_serv>
        <get_comp_balance>
           select balance from ch_ksk.t_comp_balance where t_company_id=cast(? as bigint);
        </get_comp_balance>
        <get_unpaid_payment>
            select p.t_company_id, p.order_id, p.session_id, p.amount
            from ch_ksk.t_pay p
            where p.status = 'CREATED'
            and not exists (select 1 from ch_ksk.t_pay p1 where p1.order_id=p.order_id and p1.session_id=p.session_id and p1.status not in ('CREATED'))
        </get_unpaid_payment>
        <repl_search>
            <![CDATA[
            with params as (select ? as lang, cast(? as bigint) as comp_id, cast(? as varchar) as d_beg, cast(? as varchar) as d_end, cast(? as varchar) as status, cast(? as varchar) as order)
            select p.order_id, p.date_oper, cast(p.amount as varchar), ps.description as status, p.card_num, p.card_owner
            from ch_ksk.t_pay p,
            ch_ksk.t_lang_pay_status ps,
            params p1
            where p.status=ps.code
            and ps.t_language_id=p1.lang
            and p.t_company_id=p1.comp_id
            and to_date(cast(p.date_oper as varchar(10)),'yyyy-mm-dd') between to_date(p1.d_beg, 'dd.mm.yyyy') and to_date(p1.d_end, 'dd.mm.yyyy')
            and case when p1.status = '0' then p.status != 'CREATED' when p1.status = 'CREATED' then p.status = '0' when p1.status = 'CANCELED' then p.status in ('CANCELED','EXPIRED') else p.status = p1.status end
            and case when p1.order = '0' then 1=1 else p.order_id = cast(p1.order as bigint) end
            union all
            select p.order_id, p.date_oper, cast(p.amount as varchar), ps.description as status, p.card_num, p.card_owner
            from ch_ksk.t_pay p,
            ch_ksk.t_lang_pay_status ps,
            params p1
            where p.status=ps.code
            and ps.t_language_id=p1.lang
            and p.t_company_id=p1.comp_id
            and to_date(cast(p.date_oper as varchar(10)),'yyyy-mm-dd') between to_date(p1.d_beg, 'dd.mm.yyyy') and to_date(p1.d_end, 'dd.mm.yyyy')
            and case when p1.status  in ('0','CREATED') then p.status = 'CREATED' else p.status = '0' end
            and case when p1.order = '0' then 1=1 else p.order_id = cast(p1.order as bigint) end
            and not exists (select 1 from ch_ksk.t_pay pp where pp.order_id=p.order_id and pp.session_id=p.session_id and pp.status not in ('CREATED'))
            order by date_oper desc
            ]]>
        </repl_search>
        <get_pay_status>
            select code as id, description as text from ch_ksk.t_lang_pay_status where code != 'EXPIRED' and t_language_id=? order by code
        </get_pay_status>
        <withdrawal_search>
            <![CDATA[
            with params as (select cast(? as bigint) as comp_id, cast(? as varchar) as d_beg, cast(? as varchar) as d_end, cast(? as varchar) as req)
            select t_request_id as req_id, tran_date, replace(cast(total_amount as varchar),'-','') as amount, balance, p2.note
            from ch_ksk.t_transaction p,
            params p1,
            ch_ksk.t_request p2
            where p.t_request_id is not null
            and p.t_company_id=p1.comp_id
            and to_date(cast(p.tran_date as varchar(10)),'yyyy-mm-dd') between to_date(p1.d_beg, 'dd.mm.yyyy') and to_date(p1.d_end, 'dd.mm.yyyy')
            and case when p1.req = '0' then 1=1 else p.t_request_id = cast(p1.req as bigint) end
            and p.t_request_id=p2.id
            order by tran_date desc
            ]]>
        </withdrawal_search>
        <oper_rep_search>
            <![CDATA[
	  WITH params as (select ? as lang, cast(? as bigint) as usr, cast(? as varchar) as d_beg, cast(? as varchar) as d_end),
            z AS
    (  select vm.text,
            vm.bin,
            vm.flats_count,
            vm.count_flat,
            cast(round(cast(vm.count_flat*100 as decimal(10,2))/cast(vm.flats_count as decimal(10,2)),2) as decimal(10,2))as percent,
            cast(round(cast(vm.count_flat*100 as decimal(10,2))/cast(vm.flats_count as decimal(10,2)),2) as varchar) || '%' as old_percent
            from (
            select tlt.lang_text as text, k.bin,
            (select dv.doc_value from ch_ksk.t_ksk_doc_value dv
            where dv.t_ksk_id=k.id and dv.kdt_id=(select id from ch_ksk.t_ksk_doc_type where code='FLAT_COUNT' and status=1) and dv.status=1) as flats_count,
            (select count(distinct t_flats_id) as count_flat from ch_ksk.t_relation r
            where t_flats_id in (select f.id from ch_ksk.t_flats f where f.t_building_id in (select t_building_id from ch_ksk.t_building_ksk where status=1 and t_ksk_id=k.id))
            and case when to_date(cast(r.date_start as varchar(10)),'yyyy-mm-dd')<(select min(tp.date_start) from ch_ksk.t_position tp where tp.t_ksk_id=k.id and
            tp.t_position_types_id in (select tpt.id from ch_ksk.t_position_types tpt where tpt.code in ('ds', 'bu', 'pr')))
            then
            ((select min(tp.date_start) from ch_ksk.t_position tp where tp.t_ksk_id=k.id and
            tp.t_position_types_id in (select tpt.id from ch_ksk.t_position_types tpt where tpt.code in ('ds', 'bu', 'pr')))
            between  to_date(p.d_beg, 'dd.mm.yyyy') and date_trunc( 'month', to_date(p.d_end, 'dd.mm.yyyy'))::date - 1)
            else
                     (to_date(cast(r.date_start as varchar(10)),'yyyy-mm-dd')>=to_date(p.d_beg, 'dd.mm.yyyy')
             and to_date(cast(r.date_start as varchar(10)),'yyyy-mm-dd') <= date_trunc( 'month', to_date(p.d_end, 'dd.mm.yyyy'))::date - 1)
            end
            and (r.date_end is null or to_date(cast(r.date_end as varchar(10)),'yyyy-mm-dd')>=to_date(p.d_end, 'dd.mm.yyyy')))
            from ch_ksk.t_ksk k,
            params,
            ch_ksk.t_any_lang_text tlt,
            ch_ksk.t_ksk_doc_value v,
            params p
            where k.id=tlt.table_id
            and tlt.table_name='t_ksk'
            and tlt.t_language_id=p.lang
            and k.status = 1
            and k.id=v.t_ksk_id
            and v.kdt_id=(select id from ch_ksk.t_ksk_doc_type where code='CHIEF_USER' and status=1)
            and cast(v.doc_value as bigint)=p.usr
            and v.status=1
            and (((select min(tp.date_start) from ch_ksk.t_position tp where tp.t_ksk_id=k.id
	    and tp.t_position_types_id in (select tpt.id from ch_ksk.t_position_types tpt where tpt.code in ('ds', 'bu', 'pr')))>= to_date(p.d_beg, 'dd.mm.yyyy'))
	    and
	    ((select min(tp.date_start) from ch_ksk.t_position tp where tp.t_ksk_id=k.id
	    and tp.t_position_types_id in (select tpt.id from ch_ksk.t_position_types tpt where tpt.code in ('ds', 'bu', 'pr')))<= to_date(p.d_end, 'dd.mm.yyyy'))
	    )
            ) as vm
    )

            select t.text,
            t.bin,
            t.flats_count,
            t.count_flat,
            T.DATE_START,
            T.DATE_START_P,
            (select case
            	 when T.DATE_START_P = 1 then 'color: blue'
            	 when T.DATE_START=1 then 'color: red'  end) as style,
            cast(round(cast(t.count_flat*100 as decimal(10,2))/cast(t.flats_count as decimal(10,2)),2) as decimal(10,2))as percent,
            cast(round(cast(t.count_flat*100 as decimal(10,2))/cast(t.flats_count as decimal(10,2)),2) as varchar)|| '%'as percent,
            z.old_percent,
            cast(round(cast(t.count_flat*100 as decimal(10,2))/cast(t.flats_count as decimal(10,2)),2) - z.percent as varchar)||'%' as growth
            from (
            select tlt.lang_text as text, k.bin,
            (select dv.doc_value from ch_ksk.t_ksk_doc_value dv
            where dv.t_ksk_id=k.id and dv.kdt_id=(select id from ch_ksk.t_ksk_doc_type where code='FLAT_COUNT' and status=1) and dv.status=1) as flats_count,
            (select count(distinct t_flats_id) as count_flat from ch_ksk.t_relation r
            where t_flats_id in (select f.id from ch_ksk.t_flats f where f.t_building_id in (select t_building_id from ch_ksk.t_building_ksk where status=1 and t_ksk_id=k.id))
            and case when to_date(cast(r.date_start as varchar(10)),'yyyy-mm-dd')<(select min(tp.date_start) from ch_ksk.t_position tp where tp.t_ksk_id=k.id and
            tp.t_position_types_id in (select tpt.id from ch_ksk.t_position_types tpt where tpt.code in ('ds', 'bu', 'pr')))
            then
            ((select min(tp.date_start) from ch_ksk.t_position tp where tp.t_ksk_id=k.id and
            tp.t_position_types_id in (select tpt.id from ch_ksk.t_position_types tpt where tpt.code in ('ds', 'bu', 'pr')))
            between  to_date(p.d_beg, 'dd.mm.yyyy') and to_date(p.d_end, 'dd.mm.yyyy'))
             else
                     (to_date(cast(r.date_start as varchar(10)),'yyyy-mm-dd')>=to_date(p.d_beg, 'dd.mm.yyyy')
             and to_date(cast(r.date_start as varchar(10)),'yyyy-mm-dd')<=to_date(p.d_end, 'dd.mm.yyyy'))
            end
            and (r.date_end is null or to_date(cast(r.date_end as varchar(10)),'yyyy-mm-dd')>=to_date(p.d_end, 'dd.mm.yyyy'))),
             (select (CASE WHEN COUNT(r.DATE_START) >= 1 THEN 1 ELSE 0 END) AS DATE_START /*HERE*/
            from ch_ksk.t_relation r
            where t_flats_id in (select f.id
            					from ch_ksk.t_flats f ,
                                ch_ksk.t_building_ksk tbk
                                where f.t_building_id=tbk.t_building_id
            					and tbk.status=1
                                 and tbk.t_ksk_id=k.id)
            and case when to_date(r.date_start::varchar(10),'yyyy-mm-dd')<(select min(tp.date_start)
            																		from ch_ksk.t_position tp,
                                                                                    ch_ksk.t_position_types tpt
                                                                                    where tp.t_ksk_id=k.id
                                                                                    and tp.t_position_types_id=tpt.id
                                                                                    and tpt.code in ('ds', 'bu', 'pr'))
            then
            ((select min(tp.date_start)
            	from ch_ksk.t_position tp,
                ch_ksk.t_position_types tpt
                where tp.t_ksk_id=k.id
                and tp.t_position_types_id=tpt.id
                and tpt.code in ('ds', 'bu', 'pr'))
            between  to_date(p.d_beg, 'dd.mm.yyyy') and to_date(p.d_end, 'dd.mm.yyyy'))
            else
                     (to_date(cast(r.date_start as varchar(10)),'yyyy-mm-dd')>=to_date(p.d_beg, 'dd.mm.yyyy')
             and to_date(cast(r.date_start as varchar(10)),'yyyy-mm-dd')<=to_date(p.d_end, 'dd.mm.yyyy'))
            end
            and (r.date_end is null or to_date(cast(r.date_end as varchar(10)),'yyyy-mm-dd')>=to_date(p.d_end, 'dd.mm.yyyy'))
            AND DATE_START > date_trunc( 'month', to_date(p.d_end, 'dd.mm.yyyy')::date - 1)
            ),

            (select (CASE when min(tp.DATE_START) > date_trunc( 'month', to_date(p.d_end, 'dd.mm.yyyy')::date - 1 ) then 1 else 0 end)  as DATE_START_P
            /*(select (CASE WHEN COUNT(r.DATE_START) >= 1 THEN 1 ELSE 0 END) AS DATE_START*/

            	from ch_ksk.t_position tp,
                 ch_ksk.t_position_types tpt
                where tp.t_ksk_id=k.id
                and tp.t_position_types_id=tpt.id
                and tpt.code in ('ds', 'bu', 'pr')
                having min(tp.DATE_START) > date_trunc( 'month', to_date(p.d_end, 'dd.mm.yyyy')::date - 1)
            )

            from ch_ksk.t_ksk k,
            ch_ksk.t_any_lang_text tlt,
            ch_ksk.t_ksk_doc_value v,
            params p
            where k.id=tlt.table_id
            and tlt.table_name='t_ksk'
            and tlt.t_language_id=p.lang
            and k.status = 1
            and k.id=v.t_ksk_id
            and v.kdt_id=(select id from ch_ksk.t_ksk_doc_type where code='CHIEF_USER' and status=1)
            and cast(v.doc_value as bigint)=p.usr
            and v.status=1
            and (((select min(tp.date_start) from ch_ksk.t_position tp where tp.t_ksk_id=k.id
	    and tp.t_position_types_id in (select tpt.id from ch_ksk.t_position_types tpt where tpt.code in ('ds', 'bu', 'pr')))>= to_date(p.d_beg, 'dd.mm.yyyy'))
	    and
	    ((select min(tp.date_start) from ch_ksk.t_position tp where tp.t_ksk_id=k.id
	    and tp.t_position_types_id in (select tpt.id from ch_ksk.t_position_types tpt where tpt.code in ('ds', 'bu', 'pr')))<= to_date(p.d_end, 'dd.mm.yyyy'))
	    )
            ) as t
             FULL JOIN z
      ON  z.bin = t.bin
            ]]>
        </oper_rep_search>
        <oper_rep_search1>
            select  ksk.description, r.note, r.rate_val from ch_ksk.t_request r
            inner join ch_ksk.t_flats f on
            f.id = r.t_flats_id
            inner join ch_ksk.t_building b on
            b.id = f.t_building_id
            inner join ch_ksk.t_building_ksk tksk on
            tksk.t_building_id = b.id
            inner join ch_ksk.t_ksk ksk on
            ksk.id = tksk.t_ksk_id
            where r.rate_val > 0    
        </oper_rep_search1>
        <cit_vote_status>
            select 0 as id, '...' as text
            union all
            select table_id as id, lang_text as text
            from ch_ksk.t_any_lang_text
            where table_name='t_vote_send_status'
            and t_language_id=?
            order by 1
        </cit_vote_status>
        <cit_vote_search>
            with params as (select cast(? as bigint) as v_num, cast(? as bigint) as lang, cast(? as bigint) as status, cast(? as bigint) as usr, cast(? as varchar) as d_beg, cast(? as varchar) as d_end)
            select vs.id as recid, v.id as vote_num, tlt.lang_text as lang_text, v.date_start, v.date_end,
            coalesce((select lang_text from ch_ksk.t_any_lang_text where table_id=v.t_ksk_id and t_language_id=p.lang and table_name='t_ksk'),
            (select lang_text from ch_ksk.t_any_lang_text where table_id=v.t_org_id and t_language_id=p.lang and table_name='t_org')) as org,
            tlt1.lang_text as status,
            vs.status as stat_id
            from ch_ksk.t_vote_send vs,
            ch_ksk.t_vote v,
            params p,
            ch_ksk.t_any_lang_text tlt,
            ch_ksk.t_any_lang_text tlt1
            where case when p.status = -1 then 1=1 else vs.status=p.status end
            and t_relation_id in (select id from ch_ksk.t_relation where t_user_id=p.usr and status = 1)
            and vs.t_vote_id=v.id
            and v.id=tlt.table_id
            and tlt.table_name='t_vote'
            and tlt.t_language_id=p.lang
            and case when p.v_num = -1 then 1=1 else v.id = p.v_num end
            and vs.status=tlt1.table_id
            and tlt1.table_name='t_vote_send_status'
            and tlt1.t_language_id=p.lang
            and to_date(cast(v.date_start as varchar(10)),'yyyy-mm-dd') between to_date(p.d_beg, 'dd.mm.yyyy') and to_date(p.d_end, 'dd.mm.yyyy')
        </cit_vote_search>
        <get_vote_quests>
            with params as (select ? as lang)
            select q.id, ql.lang_text, q.n_radio
            from ch_ksk.t_vote_ques q,
            ch_ksk.t_any_lang_text ql,
            params p
            where q.t_vote_id=cast(? as bigint)
            and q.id=ql.table_id
            and ql.table_name='t_vote_ques'
            and ql.t_language_id=p.lang
        </get_vote_quests>
        <get_vote_answers>
            with params as (select ? as lang)
            select a.id as ans_id, al.lang_text as ans_text
            from ch_ksk.t_vote_answ a,
            ch_ksk.t_any_lang_text al,
            params p
            where a.t_vote_ques_id=cast(? as bigint)
            and a.id=al.table_id
            and al.table_name='t_vote_answ'
            and al.t_language_id=p.lang
            order by n_order
        </get_vote_answers>
        <check_vote_send_res>
            select t_vote_answ_id as ans_id from ch_ksk.t_vote_res where t_vote_send_id=cast(? as bigint)
        </check_vote_send_res>
        <get_building_doc_type>
            WITH RECURSIVE q (id, sid ,lang_text, path, lang, folder, level,code) AS (
            select dt.id,dt.sid, tlt.lang_text as text, ltrim(cast(dt.id as varchar)) as path,tlt.t_language_id as lang, dt.folder,1 as level, dt.code
            FROM ch_ksk.t_building_doc_type dt, ch_ksk.t_any_lang_text tlt
            WHERE dt.id=tlt.table_id
            AND tlt.table_name='t_building_doc_type'
            AND tlt.t_language_id=cast(? as bigint)
            AND dt.status=1
            AND dt.sid in (select id from ch_ksk.t_building_doc_type where code=?)
            UNION ALL
            select dt1.id,dt1.sid, tlt2.lang_text as text, ltrim(cast(q.path||dt1.id as varchar)) as path, q.lang, dt1.folder, q.level + 1 as level, dt1.code
            from ch_ksk.t_building_doc_type dt1, ch_ksk.t_any_lang_text tlt2,q
            WHERE dt1.id=tlt2.table_id
            AND tlt2.table_name='t_building_doc_type'
            AND dt1.status=1
            AND tlt2.t_language_id=q.lang
            and q.id=dt1.sid
            )
            SELECT q.id, q.sid,q.lang_text as text, q.path, q.folder, q.level, q.code
            FROM q
            ORDER BY q.path
        </get_building_doc_type>
        <get_building_doc_value>
            select dv.id as doc_id, dv.doc_value as doc_val
            from ch_ksk.t_building_doc_value dv,
            ch_ksk.t_building_doc_type dt
            where dv.t_building_id=cast(? as bigint)
            and dv.bdt_id=dt.id
            and dt.code=?
            and dv.status=1
            and dt.status=1
            limit 1
        </get_building_doc_value>
        <build_doc_types_menu>
            select t1.id, t1.code, t2.lang_text as text
            from ch_ksk.t_building_doc_type t1, ch_ksk.t_any_lang_text t2
            where t1.sid is null and t1.status=1 and t1.sys_type=0 and t1.id=t2.table_id and t2.table_name='t_building_doc_type' and t2.t_language_id=cast(? as bigint)
        </build_doc_types_menu>
        <cit_cars_search>
            select dv.id as recid,
            (select doc_value from ch_ksk.t_user_doc_value where t_user_id=dv.t_user_id and sid=dv.id and udt_id=(select id from ch_ksk.t_user_doc_type where code='MARKA' and status=1)) as marka,
            (select doc_value from ch_ksk.t_user_doc_value where t_user_id=dv.t_user_id and sid=dv.id and udt_id=(select id from ch_ksk.t_user_doc_type where code='MODEL' and status=1)) as model,
            (select doc_value from ch_ksk.t_user_doc_value where t_user_id=dv.t_user_id and sid=dv.id and udt_id=(select id from ch_ksk.t_user_doc_type where code='GOV_NUM' and status=1)) as gov_num,
            (select doc_value from ch_ksk.t_user_doc_value where t_user_id=dv.t_user_id and sid=dv.id and udt_id=(select id from ch_ksk.t_user_doc_type where code='COLOR' and status=1)) as color
            from ch_ksk.t_user_doc_value dv,
            ch_ksk.t_user_doc_type dc
            where dv.udt_id=dc.id
            and dc.code='CAR'
            and dv.t_user_id=cast(? as bigint)
            and dv.status=1
        </cit_cars_search>
        <get_user_doc_type>
            WITH RECURSIVE q (id, sid ,lang_text, path, lang, folder, level,code, mask) AS (
            select dt.id,dt.sid, tlt.lang_text as text, ltrim(cast(dt.id as varchar)) as path,tlt.t_language_id as lang, dt.folder,1 as level, dt.code, dt.mask
            FROM ch_ksk.t_user_doc_type dt, ch_ksk.t_any_lang_text tlt
            WHERE dt.id=tlt.table_id
            AND tlt.table_name='t_user_doc_type'
            AND tlt.t_language_id=cast(? as bigint)
            AND dt.status=1
            AND dt.sid in (select id from ch_ksk.t_user_doc_type where code=?)
            UNION ALL
            select dt1.id,dt1.sid, tlt2.lang_text as text, ltrim(cast(q.path||dt1.id as varchar)) as path, q.lang, dt1.folder, q.level + 1 as level, dt1.code, dt1.mask
            from ch_ksk.t_user_doc_type dt1, ch_ksk.t_any_lang_text tlt2,q
            WHERE dt1.id=tlt2.table_id
            AND tlt2.table_name='t_user_doc_type'
            AND dt1.status=1
            AND tlt2.t_language_id=q.lang
            and q.id=dt1.sid
            )
            SELECT q.id, q.sid,q.lang_text as text, q.path, q.folder, q.level, q.code, q.mask
            FROM q
            ORDER BY q.path
        </get_user_doc_type>
        <get_user_doc_value>
            select dv.id as doc_id, dv.doc_value as doc_val
            from ch_ksk.t_user_doc_value dv,
            ch_ksk.t_user_doc_type dt
            where dv.t_user_id=cast(? as bigint)
            and dv.udt_id=dt.id
            and dt.code=?
            and dv.status=1
            and dt.status=1
            and dv.sid=cast(? as bigint)
            limit 1
        </get_user_doc_value>
        <get_enity_types>
            <![CDATA[
            select code as id, text from topcore.entity_types_v where lang='RU' and client_code='BAS'
            ]]>
        </get_enity_types>
        <get_entity_props>
            <![CDATA[
           select property_code as id, text, client_code from topcore.entity_properties_v where lang='RU' and client_code='BAS' and entity_type_code = ?
            ]]>
        </get_entity_props>
        <get_entityies>
            <![CDATA[
            select  t1.id as recid,t1.entity_type_code,t1.client_code,string_agg(text,'~') as array1, string_agg(value,'~') as array2, string_agg(key,'~') as array3
                    from topcore.entities_v t1
                    where t1.lang='RU' and t1.entity_type_code=?
                    group by t1.id,t1.entity_type_code, t1.client_code
            ]]>
        </get_entityies>
        <get_cit_mail_by_build>
            select distinct u.usermail1 as text
            from ch_ksk.t_relation r, ch_ksk.t_flats f, ch_ksk.t_user u
            where r.t_flats_id=f.id
            and f.t_building_id=?::bigint
            and r.status in (1)
            and r.t_user_id=u.id
        </get_cit_mail_by_build>
        <get_name_ksk_as_text>
            select tlt.lang_text as text
            from ch_ksk.t_ksk tk,
            ch_ksk.t_any_lang_text tlt
            where tk.id=tlt.table_id
            and tlt.table_name='t_ksk'
            and tlt.t_language_id=cast(? as int)
            and tk.id=?
        </get_name_ksk_as_text>
        <get_rate_of_last_request_by_user2>
            with params as (select ?::bigint as userId, ?::bigint as param1,
                            ?::bigint as param2,?::bigint as param3,?::bigint as param4,
                            ?::date as s_date,?::bigint as rel_status)
            select req.id as req_id, req.t_services_id,req.t_req_priority_id, req.dead_line,
                    req.t_flats_id, req.note, req.t_user_id,req.dat_close,req.rate_val,req.rate_text,
                    req.show,tr.id as real_id,tr.date_start,tr.date_end, tr.t_relation_type_id,
                    tr.status as rel_status,tr.reason_text
            from ch_ksk.t_request req,ch_ksk.t_relation tr,params
            where req.t_user_id = params.userId
            and tr.t_flats_id=req.t_flats_id
            and tr.t_user_id=req.t_user_id
            and tr.status not in (params.rel_status)
            and req.t_req_status_id in (params.param1,params.param2,params.param3,params.param4)
            and req.dat_reg >= params.s_date
        </get_rate_of_last_request_by_user2>
        <get_rating_list_ksk>
            with params as (select ?::bigint as kskId,?::bigint as lang,?::bigint as city ,
                            ?::character varying as tcode
                            )
            select count (distinct req.id) as count_req,tlt.lang_text as ksk_name, round(avg(req.rate_val),2) as rate_value
            ,avg(req.dat_close-req.dat_reg) as avg_time_exec
            from ch_ksk.t_request req,ch_ksk.t_flats tf,ch_ksk.t_building_ksk tbk,ch_ksk.t_building b,
            ch_ksk.t_street s,
            ch_ksk.t_any_lang_text tlt,ch_ksk.t_ksk_doc_value kdv,ch_ksk.t_regions reg, params
            where req.t_flats_id=tf.id
            and tf.t_building_id = tbk.t_building_id
            and tlt.table_id = tbk.t_ksk_id
            and tlt.table_name = 't_ksk'
            and tlt.t_language_id = params.lang
            and req.rate_val not in (0)
            and tbk.status in (1,2)
            and tbk.t_ksk_id = coalesce(params.kskId, tbk.t_ksk_id)
            and kdv.kdt_id=5
            and kdv.doc_value in (coalesce(params.tcode, kdv.doc_value))
            and kdv.t_ksk_id=tbk.t_ksk_id
            and b.id=tbk.t_building_id
            and s.id=b.t_street_id
            and s.t_city_id = coalesce(params.city,s.t_city_id)
            GROUP BY tlt.lang_text
            order by count_req desc
        </get_rating_list_ksk>
        <get_kdt_id>
            select id from ch_ksk.t_ksk_doc_type
            where code = ?::character varying
        </get_kdt_id>
        <get_address_list_ksk>
            with params as (select ? as al, ?::int as lang, ?::bigint as ksk_id)
            SELECT 0 as id, '...' as text from params WHERE 1=params.al
            union all
            select b.id as id, ch_ksk.f_get_lang_text('t_city',s.t_city_id,params.lang)||', '||ch_ksk.f_street(s.id::int,params.lang,1::int)
            ||' '||b.building_num||(select  coalesce( '/'||coalesce(b.build_subunit,null),'' ) )
            from params,ch_ksk.t_building_ksk bk, ch_ksk.t_building b, ch_ksk.t_street s
            where bk.t_ksk_id = params.ksk_id
            and bk.status = 1
            and b.id=bk.t_building_id
            and b.t_street_id = s.id
        </get_address_list_ksk>
        <get_building_list_user>
            with params as (select ? as al, ?::int as lang, ? as userId)
            SELECT 0 as id, '...' as text from params WHERE 1=params.al
            UNION ALL
            select distinct f.t_building_id as id, ch_ksk.f_get_lang_text('t_city',s.t_city_id,params.lang)||', '
            ||ch_ksk.f_street(s.id::int,params.lang,1)||' '||b.building_num||
            (select  coalesce('/'||coalesce(b.build_subunit,null),'') ) as text
            from ch_ksk.t_relation r, ch_ksk.t_flats f, ch_ksk.t_building b, ch_ksk.t_street s,params
            where r.t_user_id = params.userId
            and r.status=1
            and f.id=r.t_flats_id
            and f.t_building_id = b.id
            and b.t_street_id=s.id
        </get_building_list_user>
        <get_t_relation>
            select * from ch_ksk.t_relation
            where t_flats_id=?
            and status=1
        </get_t_relation>
        <get_vote_particular_building>
            select id, description, date_start
                    , date_end, t_ksk_id, t_org_id, status
                    , t_user_id, target_building::text
            from ch_ksk.t_vote
            where ?=any(target_building)
            and status=2
        </get_vote_particular_building>
        <building_id_by_flat>
            select t_building_id
            from ch_ksk.t_flats
            where id=?
        </building_id_by_flat>
    </sprav>
    <requests>
        <cm>
            <insert_obj>
                <![CDATA[
                 INSERT INTO
                  cm.t_objects
                (
                  description,
                  status,
                  code,
                  t_objects_id,
                  disabled,
                  expanded,
                  f_onclick
                )
                VALUES (
                cast(? as varchar),
                cast(? as integer),
                cast(? as varchar),
                cast(? as bigint),
                cast(? as boolean),
                cast(? as boolean),
                cast(? as varchar)
                );
            ]]>
            </insert_obj>
            <update_obj>
                <![CDATA[
                 UPDATE cm.t_objects SET
                  description = (select cast(? as varchar)),
                  status = (select cast(? as integer)),
                  code = (select cast(? as varchar)),
                  disabled = (select cast(? as boolean)),
                  expanded = (select cast(? as boolean)),
                  f_onclick = (select cast(? as varchar))
                 WHERE id = (select cast(? as int));
            ]]>
            </update_obj>
            <delete_obj>
                <![CDATA[
                delete from cm.t_objects
                where id = (select cast (? as int));
              ]]>
            </delete_obj>
            <insert_canvas>
                <![CDATA[
                 INSERT INTO
                  cm.t_obj_canvas
                (
                  title1,
                  mainheight,
                  prev1height,
                  layout_type,
                  leftsidewidth,
                  t_objects_id
                )
                VALUES (
                  cast(? as varchar),
                  cast(? as integer),
                  cast(? as integer),
                  cast(? as integer),
                  cast(? as integer),
                  cast(? as bigint)
                );
            ]]>
            </insert_canvas>
            <update_canvas>
                <![CDATA[
                 UPDATE cm.t_obj_canvas SET
                  title1 = (select cast(? as varchar)),
                  mainheight = (select cast(? as integer)),
                  prev1height = (select cast(? as integer)),
                  layout_type = (select cast(? as integer)),
                  leftsidewidth = (select cast(? as integer))
                WHERE id = (select cast(? as int));
            ]]>
            </update_canvas>
            <delete_canvas>
                <![CDATA[
                delete from cm.t_obj_canvas
                where id = (select cast (? as int));
                ]]>
            </delete_canvas>
            <insert_grid>
                <![CDATA[
                 INSERT INTO cm.t_canvas_grids
                    (
                  t_canvas_id,
                  grid_num,
                  header,
                  showheader,
                  lang_filter,
                  user_filter,
                  showfilter,
                  showtoolbar,
                  toolbarrighttext,
                  f_onrender,
                  f_onclick,
                  f_contextmenu_click,
                  f_toolbar_click,
                  data_url,
                  sqlpath
                    )
                 VALUES (
                 cast(? as bigint),
                 cast(? as integer),
                 cast(? as varchar),
                 cast(? as boolean),
                 cast(? as boolean),
                 cast(? as boolean),
                 cast(? as boolean),
                 cast(? as boolean),
                 cast(? as varchar),
                 cast(? as varchar),
                 cast(? as varchar),
                 cast(? as varchar),
                 cast(? as varchar),
                 cast(? as varchar),
                 cast(? as varchar)
                );
            ]]>
            </insert_grid>
            <update_grid>
                <![CDATA[
                UPDATE cm.t_canvas_grids SET
                 t_canvas_id = (select cast(? as bigint)),
                 grid_num = (select cast(? as integer)),
                 header = (select cast(? as varchar)),
                 showheader = (select cast(? as boolean)),
                 lang_filter = (select cast(? as boolean)),
                 user_filter = (select cast(? as boolean)),
                 showfilter = (select cast(? as boolean)),
                 showtoolbar = (select cast(? as boolean)),
                 toolbarrighttext = (select cast(? as varchar)),
                 f_onrender = (select cast(? as varchar)),
                 f_onclick = (select cast(? as varchar)),
                 f_contextmenu_click = (select cast(? as varchar)),
                 f_toolbar_click = (select cast(? as varchar)),
                 data_url = (select cast(? as varchar)),
                 sqlpath = (select cast(? as varchar))
                WHERE id = (select cast(? as int));
        ]]>
            </update_grid>
            <delete_grid>
                <![CDATA[
                delete from cm.t_canvas_grids
                where id = (select cast (? as int));
                ]]>
            </delete_grid>
            <insert_g_columns>
                <![CDATA[
                 INSERT INTO cm.t_grid_columns
                (
                  name,
                  caption,
                  size,
                  cnumber,
                  render,
                  t_grids_id
                )
                 VALUES (
                 cast(? as varchar),
                 cast(? as varchar),
                 cast(? as integer),
                 cast(? as integer),
                 cast(? as varchar),
                 cast(? as bigint)
                );
            ]]>
            </insert_g_columns>
            <update_g_columns>
                <![CDATA[
                UPDATE cm.t_grid_columns SET
                 name = (select cast(? as varchar)),
                 caption = (select cast(? as varchar)),
                 size = (select cast(? as integer)),
                 cnumber = (select cast(? as integer)),
                 render = (select cast(? as varchar))
				WHERE id = (select cast(? as int));
        ]]>
            </update_g_columns>
            <delete_g_columns>
                <![CDATA[
                delete from cm.t_grid_columns
                where id = (select cast (? as int));
              ]]>
            </delete_g_columns>
            <insert_form>
                <![CDATA[
                 INSERT INTO cm.t_canvas_forms
                 (
                  title,
                  form_type,
                  act_caption,
                  act_class,
                  act_fclick,
                  clear_caption,
                  clear_class,
                  clear_fclick,
                  data_url,
                  sql_path,
                  f_onchange,
                  f_onrender,
                  t_canvas_id,
                  t_grids_id,
                  form_url
                )
                 VALUES (
                 cast(? as varchar),
                 cast(? as varchar),
                 cast(? as varchar),
                 cast(? as varchar),
                 cast(? as varchar),
                 cast(? as varchar),
                 cast(? as varchar),
                 cast(? as varchar),
                 cast(? as varchar),
                 cast(? as varchar),
                 cast(? as varchar),
                 cast(? as varchar),
                 cast(? as integer),
                 cast(? as integer),
                 cast(? as varchar)
                );
            ]]>
            </insert_form>
            <update_form>
                <![CDATA[
                 UPDATE cm.t_canvas_forms SET
                 title = (select cast(? as varchar)),
                 form_type = (select cast(? as varchar)),
                 act_caption = (select cast(? as varchar)),
                 act_class = (select cast(? as varchar)),
                 act_fclick = (select cast(? as varchar)),
                 clear_caption = (select cast(? as varchar)),
                 clear_class = (select cast(? as varchar)),
                 clear_fclick = (select cast(? as varchar)),
                 data_url = (select cast(? as varchar)),
                 sql_path = (select cast(? as varchar)),
                 f_onchange = (select cast(? as varchar)),
                 f_onrender = (select cast(? as varchar)),
                 t_canvas_id = (select cast(? as integer)),
                 t_grids_id = (select cast(? as integer)),
                 form_url = (select cast(? as varchar))
                 WHERE id = (select cast(? as int));
            ]]>
            </update_form>
            <delete_form>
                <![CDATA[
                delete from cm.t_canvas_forms
                where id = (select cast (? as int));
              ]]>
            </delete_form>
            <insert_f_columns>
                <![CDATA[
                 insert into cm.t_form_columns (
                  name,
                  type,
                  required,
                  caption,
                  attr,
                  format,
                  items_dataurl,
                  match,
                  text,
                  cnumber,
                  defval,
                  if_null,
                  items_sqlpath,
                  field_mask,
                  data_type,
                  parent_item,
                  t_form_id
                )
                 VALUES (
                  cast(? as varchar),
                  cast(? as varchar),
                  cast(? as boolean),
                  cast(? as varchar),
                  cast(? as varchar),
                  cast(? as varchar),
                  cast(? as varchar),
                  cast(? as varchar),
                  cast(? as varchar),
                  cast(? as integer),
                  cast(? as varchar),
                  cast(? as varchar),
                  cast(? as varchar),
                  cast(? as varchar),
                  cast(? as varchar),
                  cast(? as varchar),
                  cast(? as integer)
                );
            ]]>
            </insert_f_columns>
            <update_f_columns>
                <![CDATA[
                 UPDATE cm.t_form_columns SET
                  name = (select cast(? as varchar)),
                  type = (select cast(? as varchar)),
                  required = (select cast(? as boolean)),
                  caption = (select cast(? as varchar)),
                  attr = (select cast(? as varchar)),
                  format = (select cast(? as varchar)),
                  items_dataurl = (select cast(? as varchar)),
                  match = (select cast(? as varchar)),
                  text = (select cast(? as varchar)),
                  cnumber = (select cast(? as integer)),
                  defval = (select cast(? as varchar)),
                  if_null = (select cast(? as varchar)),
                  items_sqlpath = (select cast(? as varchar)),
                  field_mask = (select cast(? as varchar)),
                  data_type = (select cast(? as varchar)),
                  parent_item = (select cast(? as varchar))
                WHERE id = (select cast(? as int));
            ]]>
            </update_f_columns>
            <delete_f_columns>
                <![CDATA[
                delete from cm.t_form_columns
                where id = (select cast (? as int));
              ]]>
            </delete_f_columns>
            <insert_g_menu>
                <![CDATA[
                 INSERT INTO cm.t_grid_menu
                (
                  t_grids_id,
                  menu_id,
                  menu_text,
                  icon,
                  disabled,
                  tooltip,
                  istoolbar,
                  toolbartype,
                  action_type
                )
                 VALUES (
                 cast(? as integer),
                 cast(? as integer),
                 cast(? as varchar),
                 cast(? as varchar),
                 cast(? as boolean),
                 cast(? as varchar),
                 cast(? as boolean),
                 cast(? as varchar),
                 cast(? as varchar)
                );
            ]]>
            </insert_g_menu>
            <update_g_menu>
                <![CDATA[
                 UPDATE cm.t_grid_menu SET
                 t_grids_id = (select cast(? as integer)),
                 menu_id = (select cast(? as integer)),
                 menu_text = (select cast(? as varchar)),
                 icon = (select cast(? as varchar)),
                 disabled = (select cast(? as boolean)),
                 tooltip = (select cast(? as varchar)),
                 istoolbar = (select cast(? as boolean)),
                 toolbartype = (select cast(? as varchar)),
                 action_type = (select cast(? as varchar))
                WHERE id = (select cast(? as int));
            ]]>
            </update_g_menu>
            <delete_g_menu>
                <![CDATA[
                delete from cm.t_grid_menu
                where id = (select cast (? as int));
              ]]>
            </delete_g_menu>
        </cm>
        <tophr>
            <insert_staff>
                <![CDATA[
                 INSERT INTO
                  topcore.tmp_staff
                (
                  lname,
                  fname,
                  mname,
                  phone,
                  mail,
                  address,
                  position_id,
                  division_id
                )
                VALUES (
                  cast(? as varchar),
                  cast(? as varchar),
                  cast(? as varchar),
                  cast(? as varchar),
                  cast(? as varchar),
                  cast(? as varchar),
                  cast(? as bigint),
                  cast(? as bigint)
                );
            ]]>
            </insert_staff>
            <update_staff>
                <![CDATA[
                 UPDATE
                  topcore.tmp_staff
                SET
                  lname = (select cast(? as varchar)),
                  fname = (select cast(? as varchar)),
                  mname = (select cast(? as varchar)),
                  phone = (select cast(? as varchar)),
                  mail = (select cast(? as varchar)),
                  address = (select cast(? as varchar)),
                  position_id = (select cast(? as integer)),
                  division_id = (select cast(? as integer))
                WHERE
                  id = (select cast(? as int));
            ]]>
            </update_staff>
            <delete_staff>
                <![CDATA[
                delete from topcore.tmp_staff
                where id = (select cast(? as int));
              ]]>
            </delete_staff>
        </tophr>
        <tmp_street_ins>
            <![CDATA[
                INSERT INTO ch_ksk.tmp_street (name1,name2,tstr,status)
                 VALUES (
                 (select cast (upper(trim(?)) as text)),
                 (select cast (upper(trim(?)) as text)),
                 (select cast (? as text)),
                 (select cast (? as int))
                  );
        ]]>
        </tmp_street_ins>
        <tmp_street_upd>
            <![CDATA[
                update ch_ksk.tmp_street
                set tstr = (select cast (? as text))
                where id = (select cast (? as int));
        ]]>
        </tmp_street_upd>
        <tmp_street_del>
            <![CDATA[
                delete from ch_ksk.tmp_street
                where id = (select cast (? as int));
        ]]>
        </tmp_street_del>
        <activate_ksk>
            update
            ch_ksk.t_ksk
            set
            status=1
            where id=?
        </activate_ksk>
        <deactivate_ksk>
            update
            ch_ksk.t_ksk
            set
            status=0
            where id=?
        </deactivate_ksk>
        <deactivate_ksk_building>
            update
            ch_ksk.t_building_ksk
            set
            status=4
            where t_ksk_id=?
        </deactivate_ksk_building>
        <upd_t_enter_log>
            update
            ch_ksk.t_enter_log
            set
            table_id=1
            where
            entry_date between  (select now() -INTERVAL '30 minute') and  now()
            and id in (select tlv.t_enter_log_id from ch_ksk.t_log_fields_value tlv where tlv.field_value=?)
        </upd_t_enter_log>
        <insert_session_log>
            insert into ch_ksk.tmp(status)
                VALUES((select ch_ksk.f_attempts_for_log (?, ?)))
        </insert_session_log>
        <view_notification>
            update
            ch_ksk.t_notification
            set
            status=2
            where
            id=?
            and t_user_id=?
        </view_notification>
        <insert_t_notification>
			insert into ch_ksk.tmp(status) VALUES( ( select ch_ksk.insert_notification ((select cast(? as int)),CURRENT_DATE, ?, ?, (select cast(? as int)), (select cast(? as int)), (select cast(? as int)),(select cast(? as int)),(select cast(? as int)), (select cast(? as int)) )))
        </insert_t_notification>
        <insert_t_ksk_msg>
        insert into ch_ksk.t_ksk_message (msg_date, t_position_id, status) VALUES (now(), (select max(tp.id) from ch_ksk.t_position tp where tp.t_ksk_id=? and tp.t_user_id=? and tp.date_end is null), 1)
        </insert_t_ksk_msg>
		<activate_relation>
            update
            ch_ksk.t_relation
            set
            status= (select cast(? as int)),
            date_end= case when (select cast(? as int) = 4) then now() else null end
            where
            id= (select cast(? as int))
            and t_user_id= (select cast(? as int))
        </activate_relation>
        <activateAddres>
            update
            ch_ksk.t_relation
            set
            status=(select cast(? as int))
            where
            t_flats_id=(select cast(? as int))
            and
            t_user_id=(select cast(? as int))
        </activateAddres>
        <create_flat>
            <![CDATA[
            insert into ch_ksk.tmp(status) VALUES((select ch_ksk.create_user_inf((select cast(? as int)),
            (select cast(? as int)),
            (select cast(? as int)),
            ?,
            (select cast(? as int)),
            ?,
            (select cast(? as int)),
            (select cast(? as int)))))
            ]]>
        </create_flat>
        <update_flat>
            <![CDATA[
           insert into ch_ksk.tmp(status) VALUES(
           (select ch_ksk.update_user_inf((select cast(? as int)),
            (select cast(? as int)),
            (select cast(? as int)),
            (select cast(? as text)) ,
            (select cast(? as int)),
            (select cast(? as text)) ,
            (select cast(? as int)),
            (select cast(? as int)),
            (select cast(? as int)))))
            ]]>
        </update_flat>
        <update_user_info>
            <![CDATA[
            update
            ch_ksk.t_user
            set
            firstname=trim(translate(?,'<>&','')),
            lastname=trim(translate(?,'<>&','')),
            middlename=trim(translate(?,'<>&','')),
            birthday=to_date(?,'yyyy.mm.dd'),
            iin=?,
            mobile_phone=?,
            home_phone=?
            where
            id=?
             ]]>
        </update_user_info>
        <req_after_auth>

            INSERT INTO ch_ksk.one_time_codes ( code, email, user_id ) VALUES (?,lower(?) , (select ch_ksk.login_codes (?, lower(?))));
        </req_after_auth>
        <insert_cit_req>
            <![CDATA[
INSERT INTO ch_ksk.t_request(t_services_id, t_req_priority_id, t_flats_id, note, t_user_id, t_req_status_id, dead_line)
VALUES (?, 2, ?, translate(?,'<>&',''), ?, ?, ?)
            ]]>
        </insert_cit_req>
        <insert_cit_req_serv>
            <![CDATA[
insert into ch_ksk.tmp(status)
                VALUES((select ch_ksk.create_req_serv (cast(? as bigint), cast(? as bigint), translate(?,'<>&',''), cast(? as int),?,cast(? as bigint),?,?,?,cast(? as bigint))))
            ]]>
        </insert_cit_req_serv>
        <insert_req>
            <![CDATA[
insert into ch_ksk.tmp(status)
                VALUES((select ch_ksk.create_req (cast(? as bigint), cast(? as bigint), cast(? as bigint), cast(? as int), translate(?,'<>&',''), translate(?,'<>&',''), cast(? as bigint), cast(? as bigint), to_date(?,'yyyy-mm-dd'))))
            ]]>
        </insert_req>
        <insert_req_his>
            <![CDATA[
INSERT INTO ch_ksk.t_oper_history(d_history, t_request_id, t_position_id, t_req_status_id, note, sid)
VALUES (?, ?, ?, ?, translate(?,'<>&',''), ?)
            ]]>
        </insert_req_his>
        <insert_req_his_rej>
            <![CDATA[
INSERT INTO ch_ksk.t_oper_history(t_request_id, t_position_id, t_req_status_id, note)
VALUES (?, ?, ?, translate(?,'<>&',''))
            ]]>
        </insert_req_his_rej>
        <insert_req_his_by_user>
            <![CDATA[
INSERT INTO ch_ksk.t_oper_history(t_request_id, t_position_id, t_req_status_id, note, t_user_id)
VALUES (?, ?, ?, translate(?,'<>&',''), ?)
            ]]>
        </insert_req_his_by_user>
        <insert_req_his_by_other_user>
            <![CDATA[
INSERT INTO ch_ksk.t_oper_history(d_history, t_request_id, t_position_id, t_req_status_id, note, sid,t_user_id)
VALUES (?, ?, ?, ?, translate(?,'<>&',''), ?, ?)
            ]]>
        </insert_req_his_by_other_user>
        <update_close_req_ksk>
            insert into ch_ksk.tmp (status) values ((select ch_ksk.f_close_request(?, ?, ?)))
        </update_close_req_ksk>
        <update_req>
            <![CDATA[
UPDATE ch_ksk.t_request SET t_req_priority_id=?, dead_line=?, t_req_status_id=?
 WHERE id=?
            ]]>
        </update_req>
        <update_req_status>
            <![CDATA[
UPDATE ch_ksk.t_request SET t_req_status_id=?
 WHERE id=?
            ]]>
        </update_req_status>
        <update_req_close>
            <![CDATA[
UPDATE ch_ksk.t_request SET t_req_status_id=?, dat_close=now(),rate_val=?, rate_text=translate(?,'<>&','')
 WHERE id=?
            ]]>
        </update_req_close>
        <update_req_reject>
            <![CDATA[
UPDATE ch_ksk.t_request SET t_req_status_id=?, dat_close=now(),t_req_reasons_id=?
 WHERE id=?
            ]]>
        </update_req_reject>
        <update_req_his_del>
            <![CDATA[
UPDATE ch_ksk.t_oper_history SET del=?
 WHERE id=?
            ]]>
        </update_req_his_del>
        <update_req_his_del_by_req>
            <![CDATA[
UPDATE ch_ksk.t_oper_history SET del=?
 WHERE t_request_id=? and del=?
            ]]>
        </update_req_his_del_by_req>
        <update_ksk>
            insert into ch_ksk.tmp (status) values
            ((select ch_ksk.f_upd_ksk(?, ?, ?, cast(? as bigint), cast(? as int), ?, ?, cast(? as bigint), cast(? as bigint), cast(? as bigint), cast(? as bigint), ?, ?)))

        </update_ksk>
        <update_ksk_info>
            <![CDATA[
            insert into ch_ksk.tmp (status) values
            ((select ch_ksk.update_ksk_info(?,?,cast(? as bigint),cast(? as int),coalesce(?,null),?,?,cast(? as bigint))))
			]]>
        </update_ksk_info>
        <update_report_info>
            <![CDATA[
            insert into ch_ksk.tmp (status) values
             ((select ch_ksk.update_report_info(cast(? as text),cast(? as text), cast(? as bigint), cast(? as text), cast(? as text), cast(? as int), cast(? as text), cast(? as bigint), cast(? as bigint), cast(? as text), cast(? as bigint))))
			]]>
        </update_report_info>
        <ins_build_ksk>
            insert into ch_ksk.tmp (status) values(
            (select ch_ksk.ins_build_ksk(
            cast(? as bigint),
            cast(? as bigint),
            cast(? as int),
            coalesce(?,null),
            cast(? as int),
            cast(? as int),
            cast(? as bigint),
            cast(? as int),
            cast(? as bigint))));
        </ins_build_ksk>
        <upd_build_ksk>
            insert into ch_ksk.tmp (status) values(
            (select ch_ksk.upd_build_ksk(
            cast(? as bigint),
            cast(? as bigint),
            cast(? as int),
            coalesce(?,null),
            cast(? as int),
            cast(? as int),
            cast(? as bigint),
            cast(? as int),
            cast(? as bigint),
            cast(? as bigint),
            cast(? as bigint),
            ?)));
        </upd_build_ksk>
        <upd_addr_deactiv_by_moderator>
            update ch_ksk.t_building_ksk
            set status=cast(? as int)
            where id=cast(? as int)
        </upd_addr_deactiv_by_moderator>
        <upd_addr_activ_by_moderator>
            update ch_ksk.t_building_ksk
            set status=cast(? as int)
            where id=cast(? as int)
        </upd_addr_activ_by_moderator>
        <upd_addr_for_active_deactive>
            update ch_ksk.t_building_ksk
            set status=cast(? as int)
            where id=cast(? as int)
        </upd_addr_for_active_deactive>
        <upd_rel_flats_status>
            update ch_ksk.t_relation
            set status=cast(? as int)
            where id in (select r.id from ch_ksk.t_relation r, ch_ksk.t_flats f
            where r.t_flats_id=f.id and r.status=0 and f.t_building_id=(select t_building_id from ch_ksk.t_building_ksk where t_building_id=cast(? as bigint) and status=1 and t_ksk_id=cast(? as bigint)))
        </upd_rel_flats_status>
        <insert_guest_feeedback>
            <![CDATA[
            INSERT INTO ch_ksk.t_guestfeedback (flname,phone,mail,note,g_ip) VALUES (?, ?, ?, ?, ?);
         ]]>
        </insert_guest_feeedback>
        <insert_ksk>
        <![CDATA[
             insert into ch_ksk.tmp (status) values
            ((select ch_ksk.f_add_ksk(?,?,?,1,cast(? as bigint), cast(? as int), coalesce(?,null), ?, ?, cast(? as int), cast(? as int), cast(? as int) ,cast(? as int), ?, ?, cast(? as int)  )))
        ]]>
        </insert_ksk>
        <insert_lang_text>
            <![CDATA[
INSERT INTO ch_ksk.t_any_lang_text (table_id, table_name, t_language_id, lang_text)
    VALUES (?, ?, ?, translate(?,'<>&',''));
        ]]>
        </insert_lang_text>
        <insert_position>
            <![CDATA[
INSERT INTO ch_ksk.t_position (t_position_types_id, t_ksk_id, date_start, t_user_id)
    VALUES (?, ?, now(), ?);
        ]]>
        </insert_position>
        <cit_close_relation>
            <![CDATA[
UPDATE ch_ksk.t_relation SET date_end=?, status=?, t_req_reasons_id=?, reason_text=translate(?,'<>&','')
 WHERE id=?;
        ]]>
        </cit_close_relation>
        <upd_relation_stat>
            <![CDATA[
UPDATE ch_ksk.t_relation SET status=?
 WHERE id=?;
        ]]>
        </upd_relation_stat>
		<ins_employees_ksk>
            insert into ch_ksk.tmp (status)
            values ((select ch_ksk.ins_employees(cast(? as bigint),?,?,?,?,?,?,?,cast(? as bigint))))
        </ins_employees_ksk>
        <ins_employees_serv>
            insert into ch_ksk.tmp (status)
            values ((select ch_ksk.ins_serv_employees(cast(? as bigint),?,?,?,?,?,?,?,cast(? as bigint))))
        </ins_employees_serv>
		<upd_employees>
		 insert into ch_ksk.tmp (status)
            values ((select ch_ksk.upd_employees(?,?,?,?,?,?,cast(? as bigint),cast(? as bigint),?,cast(? as int))))
		</upd_employees>
        <upd_serv_employees>
            insert into ch_ksk.tmp (status)
            values ((select ch_ksk.upd_serv_employees(?,?,?,?,?,?,cast(? as bigint),cast(? as bigint),?,cast(? as int),cast(? as bigint))))
        </upd_serv_employees>
        <change_disp_addr_reqs>
            insert into ch_ksk.tmp (status)
            values ((select ch_ksk.change_disp_addr_reqs(cast(? as bigint),cast(? as bigint),cast(? as bigint),?)))

        </change_disp_addr_reqs>
        <change_serv_reqs>
            <![CDATA[
            insert into ch_ksk.tmp (status)
            values ((select ch_ksk.change_serv_reqs(cast(? as bigint),cast(? as bigint),?,cast(? as bigint))))
            ]]>
        </change_serv_reqs>
        <insert_t_notification_for_mod>
            insert into ch_ksk.tmp(status) VALUES( ( select ch_ksk.insert_notification_for_mod ((select cast(? as int)),CURRENT_DATE, ?, ?, (select cast(? as int)), (select cast(? as int)), (select cast(? as int)),(select cast(? as int)),(select cast(? as int)), (select cast(? as int)), ?, ?, ? )))
        </insert_t_notification_for_mod>
        <update_offerta_agreement>
        <![CDATA[
        update
        ch_ksk.t_ksk_doc_value tkv2
        set
        doc_value='1'
        where
        tkv2.id=(
        select tkv.id from  ch_ksk.t_ksk_doc_value tkv , ch_ksk.t_ksk tk,ch_ksk.t_ksk_doc_type tkd, ch_ksk.t_position tp, ch_ksk.t_position_types tpt
        where
        tk.id=tkv.t_ksk_id
                        and tk.id=tp.t_ksk_id
                        and tkv.kdt_id=tkd.id
                        and tk.status=1
                        and tp.t_position_types_id=tpt.id
                        and tpt.code='pr'
                        and tpt.status=1
                        and tkd.code='AFR'
                        and tp.date_end is null
                        and tkd.status=1
                        and tkv.status=1
                        and tkv.doc_value='0'
                        and tk.id=?
                        and tp.t_user_id=?)
            ]]>
        </update_offerta_agreement>
        <insert_doc_value>
            INSERT INTO ch_ksk.t_company_doc_value (doc_value, t_company_id, cdt_id, status)
            values ( ? , cast (? as bigint), cast (? as bigint), 1)
        </insert_doc_value>
        <update_doc_value>
            update ch_ksk.t_company_doc_value
            set doc_value = ?,
            status=?
            where id = ?
        </update_doc_value>
        <reject_other_inqs>
            update ch_ksk.t_company_doc_value
            set status=2,
            doc_value=?||''||chr(13)||''||?||': '||?
            where id=cast(? as bigint)
        </reject_other_inqs>
        <ins_serv_doc_value>
            <![CDATA[
            INSERT INTO ch_ksk.t_company_doc_value(doc_value, t_company_id, cdt_id, status) VALUES (?, cast(? as bigint), cast(? as bigint), 1)
            ]]>
        </ins_serv_doc_value>
        <del_doc_val>
            <![CDATA[
            delete from ch_ksk.t_company_doc_value where id=?
            ]]>
        </del_doc_val>
        <insert_t_pay>
            insert into ch_ksk.t_pay (t_company_id,order_id,amount,status,session_id,card_num,card_owner)
            values (cast(? as bigint), cast(? as bigint), cast(? as numeric(10,2)),?,?,?,?)
        </insert_t_pay>
        <vote_upd_target>
            UPDATE ch_ksk.t_vote SET target_building=?::int[]
            WHERE id=?;
        </vote_upd_target>
    </requests>
    <reports>
        <rep_ins>
            <![CDATA[
INSERT INTO ch_ksk.t_reports (t_rep_type_id, t_ksk_id, t_user_id, t_rep_status_id, t_buk, t_ruk, t_build, date_start, date_end)
    VALUES (?, ?, ?, 1, ?, ?, ?, ?, ?);
        ]]>
        </rep_ins>
        <rep_line_val_ins>
            <![CDATA[
INSERT INTO ch_ksk.t_rep_line_val (t_reports_id, t_rep_line_id, s_value)
    VALUES (?, (select id from ch_ksk.t_rep_line where code=?), ?);
        ]]>
        </rep_line_val_ins>
        <rep_upd>
            <![CDATA[
            UPDATE ch_ksk.t_reports SET t_user_id=?, t_buk=?, t_ruk=?, t_build=?, date_start=?, date_end=?
            WHERE id=?;
        ]]>
        </rep_upd>
        <rep_upd_status>
            <![CDATA[
            UPDATE ch_ksk.t_reports SET t_rep_status_id=?
            WHERE id=?;
        ]]>
        </rep_upd_status>
        <rep_line_val_del>
            <![CDATA[
DELETE FROM ch_ksk.t_rep_line_val WHERE t_reports_id=?;
        ]]>
        </rep_line_val_del>
        <rep_doc_val_ins>
            <![CDATA[
INSERT INTO ch_ksk.t_ksk_doc_value (doc_value, t_ksk_id, kdt_id, status, date_start, date_end)
    VALUES (?, ?, ?, 1, ?, ?);
        ]]>
        </rep_doc_val_ins>
        <rep_doc_val_with_link_ins>
            <![CDATA[
INSERT INTO ch_ksk.t_ksk_doc_value (doc_value, t_ksk_id, kdt_id, status,date_start, date_end, link)
    VALUES (?, ?, ?, 1, ?, ?, ?::bigint);
        ]]>
        </rep_doc_val_with_link_ins>
        <rep_doc_val_upd>
            <![CDATA[
UPDATE ch_ksk.t_ksk_doc_value SET status=?, doc_value=coalesce(?, doc_value)
 WHERE id=?;
        ]]>
        </rep_doc_val_upd>
    </reports>
    <votes>
        <vote_ins>
            <![CDATA[
INSERT INTO ch_ksk.t_vote (description, date_start, date_end, t_ksk_id, t_org_id, status, t_user_id)
    VALUES (?, ?, ?, ?, ?, ?, ?);
        ]]>
        </vote_ins>
        <vote_ques_ins>
            <![CDATA[
INSERT INTO ch_ksk.t_vote_ques (t_vote_id, n_radio)
    VALUES (?, ?);
            ]]>
        </vote_ques_ins>
        <vote_ans_ins>
            <![CDATA[
INSERT INTO ch_ksk.t_vote_answ (t_vote_ques_id, n_order)
    VALUES (?, ?);
            ]]>
        </vote_ans_ins>
        <vote_upd>
            <![CDATA[
            UPDATE ch_ksk.t_vote SET status=?
            WHERE id=?;
        ]]>
        </vote_upd>
        <vote_send_ins>
            <![CDATA[
INSERT INTO ch_ksk.t_vote_send (t_vote_id, date_ins, t_relation_id, status)
    VALUES (?, now(), ?, 1);
            ]]>
        </vote_send_ins>
        <vote_res_ins>
            insert into ch_ksk.tmp(status)
            VALUES((select ch_ksk.vote_res_ins (cast(? as bigint), cast(? as int), ?)))
        </vote_res_ins>
    </votes>
    <messages>
        <get>
            <![CDATA[SELECT message FROM auction.messages WHERE code = ? AND language = ?]]>
        </get>
    </messages>
    <file>
        <get>
            <![CDATA[
SELECT file_id, file_name, file_type, file_size, path, owner, hash_value, copied_file_id, is_system_generated
  FROM auction.files
 WHERE file_id = cast(? as bigint)]]>
        </get>
        <get_by_attr>
            <![CDATA[
SELECT f.file_id, f.file_name, f.file_type, f.file_size, f.path, f.owner, f.hash_value,
       concat_ws(' ', p.first_name, p.last_name) owner_name, fa2.value doc_type, f.copied_file_id,
       f.is_system_generated, f.created_by
  FROM auction.files f
  JOIN auction.file_attributes fa
    ON f.file_id = fa.file_id
  LEFT JOIN auction.users u
    ON f.owner = u.user_id
  LEFT JOIN auction.persons p
    ON u.person_id = p.person_id
  LEFT JOIN auction.file_attributes fa2
    ON f.file_id = fa2.file_id
   AND fa2.name = 'file_type'
 WHERE fa.name = ?
   AND fa.value= ?]]>
        </get_by_attr>
        <get_by_attr_without_protocols>
            <![CDATA[
SELECT f.file_id, f.file_name, f.file_type, f.file_size, f.path, f.owner, f.hash_value,
       f.is_system_generated, f.copied_file_id, f.created_by
  FROM auction.files f
  JOIN auction.file_attributes fa
    ON f.file_id = fa.file_id
 WHERE fa.name = ?
   AND fa.value = ?::text
   AND NOT EXISTS(SELECT 1
                    FROM auction.file_attributes fa2
                   WHERE fa2.file_id = f.file_id
                     AND fa2.name = 'file_type'
                     AND fa2.value IN ('NEG_PUBLISH_REPORT', 'NEG_OPENING_REPORT_STAGE1',
                                       'NEG_OPENING_REPORT', 'NEG_PUBLISH_REPORT_STAGE1',
                                       'NEG_RESUME_REPORT', 'NEG_RESUME_REPORT_STAGE1',
                                       'BID_REPORT', 'BID_PARTICIPATION_APPL'))]]>
        </get_by_attr_without_protocols>
        <get_fileid_by_attr>
            <![CDATA[
SELECT a1.file_id
  FROM auction.file_attributes a1
  JOIN auction.file_attributes a2
    ON a1.file_id = a2.file_id
 WHERE a1.name = ?
   AND a1.value = ?
   AND a2.name = ?
   AND a2.value = ?]]>
        </get_fileid_by_attr>
        <get_fileids_by_attr>
            <![CDATA[
SELECT a1.file_id
  FROM auction.file_attributes a1
  JOIN auction.file_attributes a2
    ON a1.file_id = a2.file_id
 WHERE a1.name = ?
   AND a1.value = ?
   AND a2.name = ?
   AND a2.value = ?]]>
        </get_fileids_by_attr>
        <get_files_for_copy>
            <![CDATA[
SELECT f1.file_id source_id, f1.path source_path, f2.file_id target_id, f2.path target_path
  FROM auction.files f1
  JOIN auction.files f2
    ON f1.file_id= f2.copied_file_id
  JOIN auction.file_attributes fa
    ON fa.file_id = f2.file_id
 WHERE fa.name = ?
   AND fa.value= ?]]>
        </get_files_for_copy>
        <unsigned_file_exists>
            <![CDATA[
SELECT 1
  FROM auction.file_attributes a
 WHERE name = ?
   AND value = ?::text
   AND NOT EXISTS(SELECT 1 FROM auction.file_signatures s WHERE a.file_id = s.file_id)
   AND file_id NOT IN (SELECT file_id
                         FROM auction.file_attributes
                        WHERE file_id = a.file_id
                          AND name = 'file_type'
                          AND value IN ('NEG_OPENING_REPORT', 'NEG_OPENING_REPORT_STAGE1'))
 LIMIT 1]]>
        </unsigned_file_exists>
        <insert>
            <![CDATA[
INSERT INTO auction.files(file_name, file_type, file_size, path, owner, hash_value, is_system_generated, copied_file_id,
            creation_date, created_by, last_updated_date, last_updated_by, req_id, table_name)
VALUES (?, ?, ?, ?, ?, ?, ?, ?, now(), ?, now(), ?, ?, ?)]]>
        </insert>
        <insert_notif_file>
            <![CDATA[
INSERT INTO auction.files(file_name, file_type, file_size, path, owner, hash_value, is_system_generated, copied_file_id,
            creation_date, created_by, last_updated_date, last_updated_by, msg_id)
VALUES (?, ?, ?, ?, ?, ?, ?, ?, now(), ?, now(), ?, (select max(id) from ch_ksk.t_ksk_message where t_position_id in (select p.id from ch_ksk.t_position p where p.t_user_id=? and p.date_end is null)))]]>
        </insert_notif_file>
        <delete>
            <![CDATA[DELETE FROM auction.files WHERE file_id = ?]]>
        </delete>
        <get_for_integra>
            <![CDATA[
SELECT fa.value neg_id, f.file_id, f.file_name, f.file_type, f.hash_value
FROM auction.file_attributes fa
  JOIN auction.file_attributes fa2
    ON fa2.file_id = fa.file_id
  JOIN auction.files f
    ON fa.file_id = f.file_id
  JOIN auction.pd_neg_header h
    ON fa.value = h.neg_id::text
WHERE fa.value = ?::text
      AND fa.name = 'neg_id'
      AND fa2.name = 'file_type'
      AND (fa2.value = 'NEG_PUBLISH_REPORT'
          OR (fa2.value = 'NEG_RESUME_REPORT'
              AND EXISTS(SELECT 1
                         FROM auction.customer_settings cs
                         WHERE cs.customer_id = h.customer_id
                               AND cs.integration_send_award = true)))
      AND NOT EXISTS(SELECT 1
                     FROM auction.file_attributes fa3
                     WHERE fa3.file_id = f.file_id
                           AND fa3.name = 'integration'
                           AND fa3.value = 'N')
      AND h.neg_status in ('PUBLISHED', 'NEG_FAILED', 'AWARDED')]]>
        </get_for_integra>
        <get_files_for_public_access>
            <![CDATA[
SELECT fa.value neg_id, fa2.value file_type, f.file_id, f.path, f.file_name
  FROM auction.files f
  JOIN auction.file_attributes fa
    ON fa.file_id = f.file_id
  JOIN auction.file_attributes fa2
    ON fa2.file_id = f.file_id
 WHERE fa.name = ?
   AND fa.value = ?
   AND fa2.name = ?
   AND fa2.value = ?]]>
        </get_files_for_public_access>
        <get_file_list>
            <![CDATA[
with params as (select ?::bigint as lang, ?::bigint as userId, ?::bigint as status, ?::date as cr_start, ?::timestamp as cr_end,
                ?::date as date_start, ?::date as date_end, ?::bigint as build_id, ?::bigint as kdt_id)
SELECT tdv.id as recid, tdv.doc_value, ch_ksk.f_get_lang_text('t_ksk_doc_type',tdv.kdt_id,params.lang) as sdoc_type,
        fl.file_id, fl.file_name, fl.creation_date,
        tdv.date_start,
        tdv.date_end
	,tdv.t_ksk_id as ksk_id
        ,ch_ksk.f_get_lang_text('t_ksk',tdv.t_ksk_id,params.lang) as ksk_name
        ,tdv2.doc_value::bigint as building_id
            ,ch_ksk.f_get_lang_text('t_city',s.t_city_id,params.lang)||', '||
		ch_ksk.f_street(b.t_street_id::integer,1,1)||' '|| b.building_num
        ||(select  coalesce( '/'||coalesce(b.build_subunit,null),'' )) as address
  FROM params,ch_ksk.t_ksk_doc_value as tdv
       LEFT JOIN auction.files fl on fl.req_id=tdv.id and fl.table_name='t_ksk_doc_value'
       LEFT JOIN ch_ksk.t_ksk_doc_value tdv2 on tdv2.link=tdv.id
       LEFT JOIN ch_ksk.t_building b on b.id=tdv2.doc_value::bigint
       LEFT JOIN ch_ksk.t_street s on s.id=b.t_street_id
 WHERE tdv.kdt_id in (select tdt.id from ch_ksk.t_ksk_doc_type as tdt where tdt.sys_type=2)
   AND tdv.t_ksk_id in (select tb1.t_ksk_id
                        from ch_ksk.t_relation tr1, ch_ksk.t_flats tf1, ch_ksk.t_building_ksk tb1
                        where t_user_id=params.userId
                        and tr1.status=1
                        and tr1.t_flats_id=tf1.id
                        and tf1.t_building_id=tb1.t_building_id)
   AND tdv.status = params.status
   AND fl.creation_date>=coalesce(params.cr_start, fl.creation_date)
   AND fl.creation_date<=coalesce(params.cr_end, fl.creation_date)
   AND tdv.kdt_id=coalesce(params.kdt_id, tdv.kdt_id)
   AND coalesce(tdv.date_start, '1111-01-01')>=coalesce(params.date_start, tdv.date_start, '1111-01-01')
   AND coalesce(tdv.date_end, '1111-01-01')>=coalesce(params.date_end, tdv.date_end, '1111-01-01')
   AND coalesce(b.id,'111') = (coalesce(params.build_id,b.id,'111'))
except
--исключаем те записи где адреса указаны и не совпадают с адресами жителя
SELECT tdv.id as recid, tdv.doc_value, ch_ksk.f_get_lang_text('t_ksk_doc_type',tdv.kdt_id, params.lang) as sdoc_type,
        fl.file_id, fl.file_name, fl.creation_date,
        tdv.date_start,
        tdv.date_end
        ,tdv.t_ksk_id as ksk_id
	,ch_ksk.f_get_lang_text('t_ksk',tdv.t_ksk_id,params.lang) as ksk_name
        ,tdv2.doc_value::bigint as building_id
            ,ch_ksk.f_get_lang_text('t_city',s.t_city_id,params.lang)||', '||
            ch_ksk.f_street(b.t_street_id::integer,1,1)||' '|| b.building_num
        ||(select  coalesce( '/'||coalesce(b.build_subunit,null),'' )) as address
  FROM params,ch_ksk.t_ksk_doc_value as tdv
       LEFT JOIN auction.files fl on fl.req_id=tdv.id and fl.table_name='t_ksk_doc_value'
       LEFT JOIN ch_ksk.t_ksk_doc_value tdv2 on tdv2.link=tdv.id
       LEFT JOIN ch_ksk.t_building b on b.id=tdv2.doc_value::bigint
       LEFT JOIN ch_ksk.t_street s on s.id=b.t_street_id
 WHERE tdv.kdt_id in (select tdt.id from ch_ksk.t_ksk_doc_type as tdt where tdt.sys_type=2)
   AND tdv.t_ksk_id in (select tb1.t_ksk_id
                        from ch_ksk.t_relation tr1, ch_ksk.t_flats tf1, ch_ksk.t_building_ksk tb1
                        where t_user_id=params.userId
                        and tr1.status=1
                        and tr1.t_flats_id=tf1.id
                        and tf1.t_building_id=tb1.t_building_id)
   AND tdv.status = params.status
   AND fl.creation_date>=coalesce(params.cr_start, fl.creation_date)
   AND fl.creation_date<=coalesce(params.cr_end, fl.creation_date)
   AND tdv.kdt_id=coalesce(params.kdt_id, tdv.kdt_id)
   AND coalesce(tdv.date_start, '1111-01-01')>=coalesce(params.date_start, tdv.date_start, '1111-01-01')
   AND coalesce(tdv.date_end, '1111-01-01')>=coalesce(params.date_end, tdv.date_end, '1111-01-01')
   AND (b.id not in (select f.t_building_id
                        from ch_ksk.t_relation r,ch_ksk.t_flats f
                        where r.t_flats_id=f.id
                        and r.t_user_id = params.userId
                        and r.status=1)
	)
 order by 1
]]>
        </get_file_list>
        <get_file_list_ksk>
            <![CDATA[
with params as (select ?::bigint as lang, ?::bigint as ksk_id, ?::bigint as status, ?::date as cr_start, ?::timestamp as cr_end,
                 ?::date as date_start, ?::date as date_end, ?::bigint as build_id,?::bigint as kdt_id)
SELECT tdv.id as recid, tdv.doc_value, ch_ksk.f_get_lang_text('t_ksk_doc_type',tdv.kdt_id, lang.id) as sdoc_type,
        fl.file_id, fl.file_name, fl.creation_date, tdv.status,
        ch_ksk.f_get_lang_text('t_rep_status', tdv.status, lang.id) as doc_stat,
        (select status from ch_ksk.t_ksk_doc_type where id=tdv.kdt_id) as npublish,
        tdv.date_start,
        tdv.date_end
        ,tdv2.doc_value::bigint as building_id
        ,ch_ksk.f_get_lang_text('t_city',s.t_city_id,params.lang)||', '||
            ch_ksk.f_street(b.t_street_id::integer,1,1)||' '|| b.building_num
	        ||(select  coalesce( '/'||coalesce(b.build_subunit,null),'' )) as address
  FROM params,ch_ksk.t_language lang, ch_ksk.t_ksk_doc_value as tdv
       LEFT JOIN auction.files fl on fl.req_id=tdv.id and fl.table_name='t_ksk_doc_value'
       LEFT JOIN ch_ksk.t_ksk_doc_value tdv2 on tdv2.link=tdv.id
       LEFT JOIN ch_ksk.t_building b on b.id=tdv2.doc_value::bigint
       LEFT JOIN ch_ksk.t_street s on s.id=b.t_street_id
 WHERE lang.id=params.lang
   AND tdv.kdt_id in (select tdt.id from ch_ksk.t_ksk_doc_type as tdt where tdt.sys_type=2)
   AND tdv.t_ksk_id  = params.ksk_id
   AND tdv.status != params.status
   AND fl.creation_date>=coalesce(params.cr_start, fl.creation_date)
   AND fl.creation_date<=coalesce(params.cr_end, fl.creation_date)
   AND tdv.kdt_id=coalesce(params.kdt_id, tdv.kdt_id)
   AND coalesce(tdv.date_start, '1111-01-01')>=coalesce(params.date_start, tdv.date_start, '1111-01-01')
   AND coalesce(tdv.date_end, '1111-01-01')>=coalesce(params.date_end, tdv.date_end, '1111-01-01')
   AND coalesce(b.id,'111') = (coalesce(params.build_id,b.id,'111'))
 order by 1
]]>
        </get_file_list_ksk>
    </file>
    <file_attr>
        <get_file_attrs>
            <![CDATA[
SELECT attribute_id, file_id, name, value
  FROM auction.file_attributes
 WHERE file_id = ?]]>
        </get_file_attrs>
        <insert>
            <![CDATA[
INSERT INTO auction.file_attributes(file_id, name, value, creation_date, created_by, last_updated_date, last_updated_by)
VALUES (?, ?, ?, now(), ?, now(), ?)]]>
        </insert>
        <insert2>
            <![CDATA[
INSERT INTO auction.file_attributes(file_id, name, value, creation_date, created_by, last_updated_date, last_updated_by)
SELECT file_id, ?, ?, now(), ?, now(), ?
  FROM auction.file_attributes a
 WHERE name = ?
   AND value = ?]]>
        </insert2>
        <delete>
            <![CDATA[
DELETE FROM auction.file_attributes
 WHERE name = ?
   AND value = ?
   AND file_id IN (SELECT file_id FROM auction.file_attributes WHERE name = ? AND value = ?)]]>
        </delete>
        <delete_file_attrs>
            <![CDATA[DELETE FROM auction.file_attributes WHERE file_id = ?]]>
        </delete_file_attrs>
    </file_attr>
    <file_perms>
        <get_all>
            <![CDATA[
SELECT permission_id, attribute, value, customer_read, customer_sign, customer_remove, supplier_read, supplier_sign, supplier_remove
  FROM auction.file_permissions
 ORDER BY attribute]]>
        </get_all>
        <update>
            <![CDATA[
UPDATE auction.file_permissions
   SET attribute = ?,
       value = ?,
       customer_read = ?,
       customer_sign = ?,
       customer_remove = ?,
       supplier_read = ?,
       supplier_sign = ?,
       supplier_remove = ?,
       last_updated_date = now(),
       last_updated_by = ?
 WHERE permission_id = ?]]>
        </update>
    </file_perms>
    <cert>
        <find_id_by_serialnum>
            <![CDATA[
SELECT certificate_id
  FROM auction.user_certificates
 WHERE user_id = ?
   AND serial_number = ?]]>
        </find_id_by_serialnum>
        <find_userid>
            <![CDATA[SELECT user_id FROM auction.user_certificates WHERE certificate_id = ?]]>
        </find_userid>
        <insert>
            <![CDATA[INSERT INTO auction.user_certificates(user_id, serial_number) VALUES (?, ?)]]>
        </insert>
        <trusted_root_certs>
            <![CDATA[SELECT body FROM auction.core_cert_store WHERE is_root = 'Y' AND is_trusted = 'Y']]>
        </trusted_root_certs>
    </cert>
    <signature>
        <list>
            <![CDATA[
SELECT fs.signature_id, fs.file_id, u.user_id, fs.certificate_id, fs.signature,
       concat_ws(' ', p.first_name, p.last_name) full_name, fs.creation_date, fs.created_by
  FROM auction.file_signatures fs
  JOIN auction.user_certificates uc
    ON fs.certificate_id = uc.certificate_id
  JOIN auction.users u
    ON uc.user_id = u.user_id
  JOIN auction.persons p
    ON u.person_id = p.person_id
 WHERE fs.file_id = ?]]>
        </list>
        <get_signature_body>
            <![CDATA[SELECT signature FROM auction.file_signatures WHERE signature_id = ?]]>
        </get_signature_body>
        <insert>
            <![CDATA[
INSERT INTO auction.file_signatures(file_id, certificate_id, signature,
       creation_date, created_by, last_updated_date, last_updated_by)
VALUES (?, ?, ?, now(), ?, now(), ?)]]>
        </insert>
        <delete>
            <![CDATA[DELETE FROM auction.file_signatures WHERE file_id = ?]]>
        </delete>
    </signature>
    <currency>
        <currency_list>
            <![CDATA[
SELECT code, name, active, functional_currency
  FROM auction.currencies
 ORDER BY functional_currency DESC, name]]>
        </currency_list>
        <update>
            <![CDATA[
UPDATE auction.currencies
   SET active = ?,
       last_updated_date = now(),
       last_updated_by = ?
 WHERE code = ?]]>
        </update>
    </currency>
    <exchange_rate>
        <get_exchange_rates>
            <![CDATA[
SELECT from_currency, to_currency, active_date, round(rate / COALESCE(quant, 1), 2) rate
  FROM auction.curr_exchange_rates
 WHERE to_currency = ?
   AND active_date BETWEEN ? AND ?
 ORDER BY active_date DESC]]>
        </get_exchange_rates>
        <get_rate>
            <![CDATA[
SELECT rate
  FROM auction.curr_exchange_rates_v
 WHERE to_currency = ?
   AND from_currency = 'KZT']]>
        </get_rate>
        <get_rate_max_date>
            <![CDATA[SELECT MAX(active_date) active_date FROM auction.curr_exchange_rates]]>
        </get_rate_max_date>
        <insert>
            <![CDATA[
INSERT INTO auction.curr_exchange_rates (from_currency, to_currency, active_date, rate, quant,
       creation_date, created_by, last_updated_date, last_updated_by)
VALUES(?, ?, ?, ?, ?, now(), ?, now(), ?)]]>
        </insert>
    </exchange_rate>
    <work_day>
        <find_is_working_day>
            <![CDATA[SELECT is_working FROM auction.work_days WHERE day = DATE(?)]]>
        </find_is_working_day>
        <find_work_days>
            <![CDATA[
SELECT day_id, day, is_working, description
   FROM auction.work_days
 WHERE EXTRACT(YEAR FROM day) = ?
  AND EXTRACT(MONTH FROM day) = ?]]>
        </find_work_days>
        <insert>
            <![CDATA[
INSERT INTO auction.work_days (day, is_working, description,
       creation_date, created_by, last_updated_date, last_updated_by)
VALUES(?, ?, ?, now(), ?, now(), ?)]]>
        </insert>
        <update>
            <![CDATA[
UPDATE auction.work_days
        SET
         day = ?,
         is_working = ?,
         description = ?,
         last_updated_date = now(),
         last_updated_by = ?
    WHERE day_id = ?]]>
        </update>
    </work_day>
    <comments>
        <find_comments>
            <![CDATA[
SELECT comment_id, parent_id, neg_id, text, is_customer, creation_date, created_by
   FROM auction.comments
 WHERE neg_id = ?
  AND parent_id=0]]>
        </find_comments>
        <find_children>
            <![CDATA[
SELECT comment_id, parent_id, neg_id, text, is_customer, creation_date, created_by
   FROM auction.comments
 WHERE parent_id = ?]]>
        </find_children>
        <get>
            <![CDATA[
SELECT comment_id, parent_id, neg_id, text, is_customer, creation_date, created_by
   FROM auction.comments
 WHERE comment_id = ?]]>
        </get>
        <insert>
            <![CDATA[
INSERT INTO auction.comments (parent_id, neg_id, text, is_customer, creation_date, created_by)
VALUES(?, ?, ?, ?, now(), ?)]]>
        </insert>
        <update>
            <![CDATA[
UPDATE auction.comments
        SET
         parent_id = ?,
         neg_id = ?,
         text = ?,
         is_customer = ?
    WHERE comment_id = ?]]>
        </update>
    </comments>
    <auth>
        <is_main>
            select ta.code||(select case when count(1)=0 then 'notexists' else '' end from ch_ksk.t_user tu, ch_ksk.t_relation tr where tu.usermail1=ta.email and tr.t_user_id=tu.id)  from ch_ksk.one_time_codes ta where ta.email=lower(?) and ta.user_id=-1

        </is_main>
        <getSnPass>
            select fbpass from ch_ksk.t_user_sn_pass where usermail1=?
        </getSnPass>
        <get_user_id_by_email>
            select id from ch_ksk.t_user where usermail1=?
        </get_user_id_by_email>
        <get_relation_count>
            select case when count(1)=0 then 'noteexists' else '' end from ch_ksk.t_user tu, ch_ksk.t_relation tr where tu.usermail1=? and tr.t_user_id=tu.id
        </get_relation_count>
        <cur_pos_type>
            with usr as (select cast(? as varchar) as email)
            select
            ((select count(1) as count from ch_ksk.t_position tp, usr ur where tp.t_user_id=(select tu.id from ch_ksk.t_user tu where tu.usermail1=ur.email) and tp.date_end is null)
            +
            (select count(1) as count from ch_ksk.t_comp_position tp, usr ur where tp.t_user_id=(select tu.id from ch_ksk.t_user tu where tu.usermail1=ur.email) and tp.date_end is null)
            +
            (select count(1) as count from ch_ksk.t_org_position tp, usr ur where tp.t_user_id=(select tu.id from ch_ksk.t_user tu where tu.usermail1=ur.email) and tp.date_end is null)
            +
            (select count(1) from ch_ksk.t_moderators tm, usr ur  where tm.t_user_id=(select tu.id from ch_ksk.t_user tu where tu.usermail1=ur.email) and tm.status=1)) as count
        </cur_pos_type>
        <customer_user_info>
            <![CDATA[
SELECT c.customer_id, c.reg_status, e.user_id, e.email_activated, e.login, e.active, e.main_user
  FROM auction.customers c
  LEFT JOIN auction.employees_v e
    ON e.customer_id = c.customer_id
   AND e.iin = ?
 WHERE c.identification_number = ?]]>
        </customer_user_info>
        <supplier_user_info>
            <![CDATA[
SELECT s.supplier_id, s.reg_status, e.user_id, e.login, e.email_activated, e.active, e.main_user,
       COALESCE(s.nonresident, false) nonresident
  FROM auction.suppliers s
  LEFT JOIN auction.employees_v e
    ON e.supplier_id = s.supplier_id
   AND e.iin = ?
 WHERE s.identification_number = ?]]>
        </supplier_user_info>
        <admin_login>
            <![CDATA[
SELECT u.usermail1
  FROM ch_ksk.t_user u
 WHERE usermail1 like ? ||'%'
   AND mail1status=1]]>
        </admin_login>
        <all_cities>
            <![CDATA[
           select dc.id as id, dt.lang_text as text
           from ch_ksk.t_any_lang_text  dt, ch_ksk.t_city dc
           where dt.table_id=dc.id and dt.table_name='t_city'
            ]]>
        </all_cities>
        <all_street>
            <![CDATA[
           select ds.id as id,  tlt.lang_text||' '||tls.description as text
           from ch_ksk.t_street ds, ch_ksk.t_lang_street tls, ch_ksk.t_street_type dst, ch_ksk.t_any_lang_text tlt
            where ds.id=tls.t_street_id
              and ds.street_type_id=dst.id
              and tls.t_language_id=1
           and tlt.table_name='t_street_type'
           and tlt.table_id=dst.id
           and ds.t_city_id=?
            ]]>
        </all_street>
        <session>
            <get_session_id_by_userid>
                select max(session_id) from auction.sessions where active=true and user_id=?
            </get_session_id_by_userid>
            <get_by_token>
                <![CDATA[
SELECT session_id, user_id, active, start_date, end_date
  FROM auction.sessions
 WHERE auth_token = ?]]>
            </get_by_token>
            <insert>
                <![CDATA[
INSERT INTO auction.sessions(user_id, start_date, end_date, auth_token, user_agent, ip_address, active, created_by, creation_date, last_updated_by, last_updated_date)
     VALUES (?, now(), now() + interval '168 hour', ?, ?, ?, true, ?, now(), ?, now())]]>
            </insert>
            <deactivate_user_sessions>
                <![CDATA[
UPDATE auction.sessions
   SET active = false,
       last_updated_by = ?,
       last_updated_date = now()
 WHERE user_id = ?
   AND active]]>
            </deactivate_user_sessions>
            <set_session_id>
                <![CDATA[SELECT ch_ksk.f_set_var(?, ?)]]>
            </set_session_id>
            <get_session_id>
                <![CDATA[SELECT ch_ksk.f_get_var(?)]]>
            </get_session_id>
        </session>
        <onetime_code>
            <get_onetime_code>
                <![CDATA[SELECT user_id, code, active_from, active_to, email FROM ch_ksk.one_time_codes WHERE code = ?]]>
            </get_onetime_code>
            <insert>
                <![CDATA[INSERT INTO ch_ksk.one_time_codes(email, code, active_from, active_to) VALUES (lower(?), ?, ?, ?)]]>
            </insert>
            <delete>
                <![CDATA[DELETE FROM ch_ksk.one_time_codes WHERE code = ?]]>
            </delete>
        </onetime_code>
        <onetime_code_for_email>
            <get_onetime_code_email>
                <![CDATA[SELECT email, code, active_from, active_to FROM ch_ksk.one_time_codes WHERE code = ?]]>
            </get_onetime_code_email>
            <insert>
                <![CDATA[INSERT INTO ch_ksk.one_time_codes(user_id, code, active_from, active_to,email) VALUES (?, ?, ?, ?, lower(?))]]>
            </insert>
            <delete>
                <![CDATA[DELETE FROM ch_ksk.one_time_codes WHERE code = ?]]>
            </delete>
        </onetime_code_for_email>
        <check_serv_comp_by_iinbin>
            <![CDATA[
            select iin_bin from ch_ksk.t_company where iin_bin=? and status<>0
            ]]>
        </check_serv_comp_by_iinbin>
    </auth>
    <user>
  <get_user_name>
            <![CDATA[
            select  lastname||' '||firstname||coalesce(' '||middlename,'') as name  from ch_ksk.t_user where id=?
            ]]>
   </get_user_name>
        <get>
            <![CDATA[
SELECT id as user_id, usermail1 as login, password, usermail1 as email, 1 as person_id, 1 as supplier_id,1 as customer_id, 1 as phone_number, 1 as active, user_activated_to as end_active_date,
       false as main_user, 'user' user_position, null as sysadmin
  FROM ch_ksk.t_user
 WHERE id = ?]]>
        </get>
        <get_by_supplier_id>
            <![CDATA[
SELECT user_id, login, password, email, person_id, supplier_id, customer_id, phone_number, active, end_active_date,
       main_user, user_position, is_sysadmin sysadmin
  FROM auction.users
 WHERE supplier_id = ?]]>
        </get_by_supplier_id>
        <get_t_user_sn_pass>
            select sn_pass from ch_ksk.t_user where usermail1=lower(?)
        </get_t_user_sn_pass>
        <get_det_log>
            select ta.code as code from ch_ksk.one_time_codes ta where ta.email=lower(?) and ta.user_id=-1
        </get_det_log>
        <get_by_login_sn>
            <![CDATA[
SELECT tu.id as user_id, tu.usermail1 as login, (select tsn.fbpass from ch_ksk.t_user_sn_pass tsn where tsn.id=tu.sn_pass) as password, tu.usermail1 as email, 12 as person_id, 22 supplier_id,
        tu.mobile_phone phone_number, true as active, true as main_user, 'Директор' user_position
  FROM ch_ksk.t_user tu
 WHERE tu.usermail1 = trim(both ' ' from  ?)
            ]]>
        </get_by_login_sn>
        <get_by_login_sn>
            <![CDATA[
SELECT tu.id as user_id, tu.usermail1 as login, (select tsn.fbpass from ch_ksk.t_user_sn_pass tsn where tsn.id=tu.sn_pass) as password, tu.usermail1 as email, 12 as person_id, 22 supplier_id,
        tu.mobile_phone phone_number, true as active, true as main_user, 'Директор' user_position
  FROM ch_ksk.t_user tu
 WHERE tu.usermail1 = trim(both ' ' from  ?)
            ]]>
        </get_by_login_sn>
        <get_by_login>
            <![CDATA[
SELECT tu.id as user_id, tu.usermail1 as login, tu.password as password, tu.usermail1 as email, 12 as person_id, 22 supplier_id,
        tu.mobile_phone phone_number, true as active, true as main_user, 'Директор' user_position
  FROM ch_ksk.t_user tu
 WHERE tu.usermail1 = trim(both ' ' from  ?)
            ]]>
        </get_by_login>
        <get_user_iin>
            <![CDATA[
SELECT p.iin, u.customer_id, u.supplier_id
  FROM auction.users u
  JOIN auction.persons p
    ON p.person_id = u.person_id
 WHERE user_id = ?]]>
        </get_user_iin>
        <get_user_customer_bin>
            <![CDATA[
SELECT identification_number bin
  FROM auction.customers
 WHERE customer_id = ?]]>
        </get_user_customer_bin>
        <get_user_supplier_bin>
            <![CDATA[
SELECT identification_number bin
  FROM auction.suppliers
 WHERE supplier_id = ?]]>
        </get_user_supplier_bin>
        <user_exists>
            <![CDATA[SELECT 1 FROM auction.users u WHERE login = ?]]>
        </user_exists>
        <get_is_active_userid_by_login>
            <![CDATA[SELECT user_id, active FROM auction.users WHERE login = ?]]>
        </get_is_active_userid_by_login>
        <get_password_hash_by_id>
            <![CDATA[select password from ch_ksk.t_user where id=?]]>
        </get_password_hash_by_id>
        <get_password_hash_by_email>
            <![CDATA[select password from ch_ksk.t_user where usermail1=lower(?)]]>
        </get_password_hash_by_email>
        <get_password_hash_by_login>
            <![CDATA[SELECT password FROM auction.users WHERE login = ?]]>
        </get_password_hash_by_login>
        <email_not_activated_users_info_for_notif>
            <![CDATA[
SELECT u.user_id, u.email, concat_ws(' ', p.last_name, p.first_name, p.middle_name) full_name
  FROM auction.customers c
  JOIN auction.users u
    ON u.customer_id = c.customer_id
  JOIN auction.persons p
    ON p.person_id = u.person_id
 WHERE p.iin = ?
   AND c.identification_number = ?
   AND NOT COALESCE(u.email_activated, false)
UNION
SELECT u.user_id, u.email, concat_ws(' ', p.last_name, p.first_name, p.middle_name) full_name
  FROM auction.suppliers s
  JOIN auction.users u
    ON u.supplier_id = s.supplier_id
  JOIN auction.persons p
    ON p.person_id = u.person_id
 WHERE p.iin = ?
   AND s.identification_number = ?
   AND NOT COALESCE(u.email_activated, false)]]>
        </email_not_activated_users_info_for_notif>
        <findUserIdByEmail>
        <![CDATA[
                 select u.id from ch_ksk.t_user u where u.usermail1 = trim(both ' ' from  ?)]]>
        </findUserIdByEmail>
        <cust_user_info_for_email_notif>
            <![CDATA[
    select usermail1, lastname||' '||firstname||' '||coalesce(middlename,'') as full_name from ch_ksk.t_user where usermail1=lower(?)]]>
        </cust_user_info_for_email_notif>
        <sup_user_info_for_email_notif>
            <![CDATA[
SELECT u.user_id, u.email, concat_ws(' ', p.last_name, p.first_name, p.middle_name) full_name
  FROM auction.suppliers s
  JOIN auction.users u
    ON u.supplier_id = s.supplier_id
  JOIN auction.persons p
    ON p.person_id = u.person_id
 WHERE p.iin = ?
   AND s.identification_number = ?]]>
        </sup_user_info_for_email_notif>
        <get_main_user_emails_by_bin>
            <![CDATA[
SELECT email
  FROM auction.users
 WHERE main_user
 AND (supplier_id IN (SELECT supplier_id FROM auction.suppliers WHERE identification_number = ?)
    OR customer_id IN (SELECT customer_id FROM auction.customers WHERE identification_number = ?))]]>
        </get_main_user_emails_by_bin>
        <is_active>
            <![CDATA[SELECT mail1status FROM ch_ksk.t_user WHERE id = ?]]>
        </is_active>
        <is_main_user>
            <![CDATA[SELECT COALESCE(main_user, false) main_user FROM auction.users WHERE user_id = ?]]>
        </is_main_user>
        <insert_sn>
            <![CDATA[
            insert into ch_ksk.t_user_sn_pass (type, usermail1, fbpass)
            VALUES (?,lower(?),?)
            ]]>
        </insert_sn>
        <insert>
            <![CDATA[
insert into ch_ksk.t_user (usermail1,
  password,
  mail1status,
  firstname,
  lastname,
  middlename,
  birthday,
  iin,
  mobile_phone,
  home_phone,
  user_status_id,
  user_activated_to,
  sn_pass) VALUES (lower((select trim(?))),?,?,coalesce(?,''),coalesce(?,''),?,?,?,?,?,?,?, ?)]]>
        </insert>
        <update_sn_id>
           update
            ch_ksk.t_user
            set
            sn_pass=?
            where
            usermail1=lower(?)
        </update_sn_id>
        <get_ksk_by_user_id>
            select tk.id
            from ch_ksk.t_building_ksk tbk,
            ch_ksk.t_relation tr,
            ch_ksk.t_ksk tk,
            ch_ksk.t_flats tf,
            ch_ksk.t_building tb
            where tr.id = (select max(tr2.id) from ch_ksk.t_relation tr2 where tr2.t_user_id=?)
            and tr.t_flats_id =tf.id
            and tb.id=tf.t_building_id
            and tbk.t_building_id=tb.id
            and tk.id=tbk.t_ksk_id
            and tbk.status=1
            and tk.status=1
        </get_ksk_by_user_id>
        <get_ksk_by_user_params>
            select tk.id
            from ch_ksk.t_building_ksk tbk,
            ch_ksk.t_relation tr,
            ch_ksk.t_ksk tk,
            ch_ksk.t_flats tf,
            ch_ksk.t_building tb
            where tr.t_flats_id =tf.id
            and tb.id=tf.t_building_id
            and tbk.t_building_id=tb.id
            and tk.id=tbk.t_ksk_id
            and tbk.status=1
            and tk.status=1
            and tr.id = (select tr2.id from ch_ksk.t_relation tr2 , ch_ksk.t_building tb2, ch_ksk.t_flats tf2
                        where tr2.t_flats_id=tf2.id
                        and tf2.t_building_id=tb2.id
        </get_ksk_by_user_params>
        <get_rel_id_by_user_params>
            select tr2.id as id from ch_ksk.t_relation tr2 , ch_ksk.t_building tb2, ch_ksk.t_flats tf2
            where tr2.t_flats_id=tf2.id
            and tf2.t_building_id=tb2.id
        </get_rel_id_by_user_params>
		<update_relation>
        update
            ch_ksk.t_relation
            set
            status=2
            where
            id = (select max(tr2.id) from ch_ksk.t_relation tr2 where tr2.t_user_id=?)
        </update_relation>
        <activate_relation>
            update
            ch_ksk.t_relation
            set
            status= (select cast(? as int)),
            date_end = case when (select cast(? as int) = 4) then now() else null end
            where
            id= (select cast(? as int))
            and t_user_id= (select cast(? as int))
        </activate_relation>
        <insert_flat>
            <![CDATA[
            update
            ch_ksk.t_flats
            set
            area=null
            where
            -1111=(select ch_ksk.create_user_inf((select cast(? as int)),
            (select cast(? as int)),
            (select cast(? as int)),
            ?,
            (select cast(? as int)),
            ?,
            (select cast(? as int)),
            (select cast(? as int))))
            ]]>

        </insert_flat>
        <insert_trelation>
        <![CDATA[
        insert into ch_ksk.t_relation( date_start, t_user_id, t_flats_id, t_relation_type_id)
        values (now(),?,?,(select dr.id from ch_ksk.t_relation_type dr where dr.code=1))]]>
        </insert_trelation>
        <update>
            <![CDATA[
UPDATE ch_ksk.t_user
   SET firstname=?,
       lastname=?,
       mobile_phone=?
 WHERE id = ?]]>
        </update>
        <update_personal>
            <![CDATA[
UPDATE auction.users
   SET email = ?,
       phone_number = ?,
       user_position = ?,
       last_updated_date = now(),
       last_updated_by = ?
 WHERE user_id = ?]]>
        </update_personal>
        <disable_cust_main_user_flag>
            <![CDATA[
UPDATE auction.users
   SET main_user = false,
       last_updated_date = now(),
       last_updated_by = ?
 WHERE customer_id = ?]]>
        </disable_cust_main_user_flag>
        <disable_supp_main_user_flag>
            <![CDATA[
UPDATE auction.users
   SET main_user = false,
       last_updated_date = now(),
       last_updated_by = ?
 WHERE supplier_id = ?]]>
        </disable_supp_main_user_flag>
        <update_password>
            <![CDATA[
UPDATE ch_ksk.t_user
   SET password = ?
 WHERE usermail1 = ?]]>
        </update_password>
        <update_password_by_id>
            <![CDATA[
UPDATE ch_ksk.t_user
   SET password = ?
 WHERE id = ?]]>
        </update_password_by_id>
        <activate_email>
            <![CDATA[
UPDATE ch_ksk.t_user
   SET mail1status = 1,
       user_activated_to = now()
 WHERE usermail1 = ?]]>
        </activate_email>
            <supplier_email2>
                <![CDATA[
                     select tu_ksk.usermail1 from ch_ksk.t_relation tr,
                    ch_ksk.t_flats tf,
                    ch_ksk.t_building tb,
                    ch_ksk.t_building_ksk tbk,
                    ch_ksk.t_position tp,
                    ch_ksk.t_user tu_ksk
                where tr.t_flats_id =tf.id
                    and tf.t_building_id=tb.id
                    and tb.id=tbk.t_building_id
                    and tbk.status=1
                    and tbk.t_ksk_id=tp.t_ksk_id
                    and tp.date_end is null
		    and tu_ksk.id=tp.t_user_id
                    and tp.t_position_types_id=(select tpt.id from ch_ksk.t_position_types tpt where tpt.code='ds' and tpt.status=1)
					and tr.id=(select max(tr2.id) from ch_ksk.t_relation tr2 where tr2.t_user_id=?)
                ]]>
            </supplier_email2>
            <supplier_email>
            <![CDATA[
                  select tu_ksk.usermail1 from ch_ksk.t_relation tr,
                    ch_ksk.t_flats tf,
                    ch_ksk.t_building tb,
                    ch_ksk.t_building_ksk tbk,
                    ch_ksk.t_building_ksk_emps tk,
                    ch_ksk.t_position tp,
                    ch_ksk.t_user tu_ksk
                where tr.t_flats_id =tf.id
                    and tf.t_building_id=tb.id
                    and tb.id=tbk.t_building_id
                    and tbk.status=1
                    and tbk.id=tk.t_building_ksk_id
					and tp.id=tk.t_position_id
					and tu_ksk.id=tp.t_user_id
                    and tp.t_position_types_id=(select tpt.id from ch_ksk.t_position_types tpt where tpt.code='ds' and tpt.status=1)
					and tr.id=(select max(tr2.id) from ch_ksk.t_relation tr2 where tr2.t_user_id=?)
            ]]>
            </supplier_email>
            <supplier_email_by_rel_id>
                <![CDATA[
                      select tu_ksk.usermail1 from ch_ksk.t_relation tr,
                        ch_ksk.t_flats tf,
                        ch_ksk.t_building tb,
                        ch_ksk.t_building_ksk tbk,
                        ch_ksk.t_building_ksk_emps tk,
                        ch_ksk.t_position tp,
                        ch_ksk.t_user tu_ksk
                    where tr.t_flats_id =tf.id
                        and tf.t_building_id=tb.id
                        and tb.id=tbk.t_building_id
                        and tbk.status=1
                        and tbk.id=tk.t_building_ksk_id
                        and tp.id=tk.t_position_id
                        and tu_ksk.id=tp.t_user_id
                        and tp.t_position_types_id=(select tpt.id from ch_ksk.t_position_types tpt where tpt.code='ds' and tpt.status=1)
                        and tr.id=?
                ]]>
            </supplier_email_by_rel_id>
            <supplier_email_by_rel_id2>
                <![CDATA[
                        select tu_ksk.usermail1 from ch_ksk.t_relation tr,
                        ch_ksk.t_flats tf,
                        ch_ksk.t_building tb,
                        ch_ksk.t_building_ksk tbk,
                        ch_ksk.t_position tp,
                        ch_ksk.t_user tu_ksk
                    where tr.t_flats_id =tf.id
                        and tf.t_building_id=tb.id
                        and tb.id=tbk.t_building_id
                        and tbk.status=1
                        and tbk.t_ksk_id=tp.t_ksk_id
                        and tp.date_end is null
                and tu_ksk.id=tp.t_user_id
                        and tp.t_position_types_id=(select tpt.id from ch_ksk.t_position_types tpt where tpt.code='ds' and tpt.status=1)
                        and tr.id=?
                    ]]>
            </supplier_email_by_rel_id2>
			<ksk_email>
                <![CDATA[
                     select tu_ksk.usermail1 from ch_ksk.t_relation tr,
                        ch_ksk.t_flats tf,
                        ch_ksk.t_building tb,
                        ch_ksk.t_building_ksk tbk,
                        ch_ksk.t_ksk tk,
                        ch_ksk.t_position tp,
                        ch_ksk.t_user tu,
                        ch_ksk.t_user tu_ksk
                    where tr.t_flats_id =tf.id
                        and tf.t_building_id=tb.id
                        and tb.id=tbk.t_building_id
                        and tbk.status=1
                        and tbk.t_ksk_id=tk.id
                        and tp.t_ksk_id=tk.id
                        and tu_ksk.id=tp.t_user_id
                        and tp.t_position_types_id=(select tpt.id from ch_ksk.t_position_types tpt where tpt.code='ds' and tpt.status=1)
                        and tr.id=(select cast(? as int))
                        and tu.id=?
                        and tr.t_user_id=tu.id
                ]]>
            </ksk_email>
            <ksk_email_by_flat_id>
                <![CDATA[
                    select tu_ksk.usermail1 from ch_ksk.t_relation tr,
                        ch_ksk.t_flats tf,
                        ch_ksk.t_building tb,
                        ch_ksk.t_building_ksk tbk,
                        ch_ksk.t_ksk tk,
                        ch_ksk.t_position tp,
                        ch_ksk.t_user tu,
                        ch_ksk.t_user tu_ksk
                    where tr.t_flats_id =tf.id
                        and tf.t_building_id=tb.id
                        and tb.id=tbk.t_building_id
                        and tbk.status=1
                        and tbk.t_ksk_id=tk.id
                        and tp.t_ksk_id=tk.id
                        and tu_ksk.id=tp.t_user_id
                        and tp.t_position_types_id=(select tpt.id from ch_ksk.t_position_types tpt where tpt.code='ds' and tpt.status=1)
                        and tr.t_flats_id=(select cast(? as int))
                        and tu.id=?
                        and tr.t_user_id=tu.id
                        and tp.date_end is null
                    ]]>
            </ksk_email_by_flat_id>
            <supplier_address>
                <![CDATA[
                 select dc.description||' '||tlt.lang_text||' '||tls.description||' '||tb.building_num|| (select  coalesce( '/'||coalesce(tb.build_subunit,null),'' ) )||' кв.'||tf.flat_num|| (select  coalesce( '/'||coalesce(tf.flat_subunit,null),'' ) )
	from ch_ksk.t_relation tr,
            ch_ksk.t_flats tf,
            ch_ksk.t_building tb,
            ch_ksk.t_city dc,
            ch_ksk.t_street_type dst,
            ch_ksk.t_lang_street tls,
            ch_ksk.t_street ds,
            ch_ksk.t_any_lang_text tlt
        where tr.t_flats_id =tf.id
            and tf.t_building_id=tb.id
            and tb.t_street_id=ds.id
            and ds.street_type_id=dst.id
            and tls.t_street_id=ds.id
            and tls.t_language_id=1
            and ds.t_city_id=dc.id
            and tlt.table_name='t_street_type'
            and tlt.table_id=dst.id
            and tlt.t_language_id=tls.t_language_id
            and tr.id=(select max(tr2.id) from ch_ksk.t_relation tr2 where tr2.t_user_id=?)
            ]]>
            </supplier_address>
            <get_address_by_relid>
            <![CDATA[
                 select dc.description||' '||tlt.lang_text||' '||tls.description||' '||tb.building_num|| (select  coalesce( '/'||coalesce(tb.build_subunit,null),'' ) )||' кв.'||tf.flat_num|| (select  coalesce( '/'||coalesce(tf.flat_subunit,null),'' ) )
	from ch_ksk.t_relation tr,
            ch_ksk.t_flats tf,
            ch_ksk.t_building tb,
            ch_ksk.t_city dc,
            ch_ksk.t_street_type dst,
            ch_ksk.t_lang_street tls,
            ch_ksk.t_street ds,
            ch_ksk.t_any_lang_text tlt
        where tr.t_flats_id =tf.id
            and tf.t_building_id=tb.id
            and tb.t_street_id=ds.id
            and ds.street_type_id=dst.id
            and tls.t_street_id=ds.id
            and tls.t_language_id=1
            and ds.t_city_id=dc.id
            and tlt.table_name='t_street_type'
            and tlt.table_id=dst.id
            and tlt.t_language_id=tls.t_language_id
            and tr.id=?
            ]]>
           </get_address_by_relid>
    </user>
    <person>
        <get>
            <![CDATA[
SELECT person_id, first_name, last_name, middle_name, iin
  FROM auction.persons
 WHERE person_id = ?]]>
        </get>
        <get_id_by_iin>
            <![CDATA[SELECT person_id FROM auction.persons WHERE iin = ?]]>
        </get_id_by_iin>
        <insert>
            <![CDATA[
INSERT INTO auction.persons(first_name, last_name, middle_name, iin, creation_date, created_by, last_updated_date, last_updated_by)
     VALUES (?, ?, ?, ?, now(), ?, now(), ?)]]>
        </insert>
        <update>
            <![CDATA[
UPDATE auction.persons
   SET first_name = ?,
       last_name = ?,
       middle_name = ?,
       last_updated_date = now(),
       last_updated_by = ?
 WHERE person_id = ?]]>
        </update>
    </person>
    <supplier>
        <get>
            <![CDATA[
SELECT supplier_id, nonresident, is_legal_entity legal_entity, NOT is_legal_entity individual,
       identification_number, business_entity_type, business_entity_type_custom, rnn, name_ru, name_kz,
       state_reg_number, state_reg_date, state_reg_department, chief_full_name, chief_full_position,
       s.reg_status, s.country
  FROM auction.suppliers s
 WHERE s.supplier_id = ?]]>
        </get>
        <get_reg_status>
            <![CDATA[
SELECT reg_status
  FROM auction.suppliers
 WHERE supplier_id = ?]]>
        </get_reg_status>
        <get_bid_supplier>
            <![CDATA[
SELECT nonresident, is_legal_entity legal_entity, NOT is_legal_entity individual,
       identification_number, business_entity_type, business_entity_type_custom, rnn, name_ru, name_kz
  FROM auction.suppliers s
 WHERE s.supplier_id = ?]]>
        </get_bid_supplier>
        <get_bin>
            <![CDATA[SELECT identification_number FROM auction.suppliers WHERE supplier_id = ?]]>
        </get_bin>
        <get_name>
            <![CDATA[SELECT name_ru FROM auction.suppliers s WHERE s.supplier_id = ?]]>
        </get_name>
        <is_non_resident>
            <![CDATA[SELECT nonresident FROM auction.suppliers s WHERE s.supplier_id = ?]]>
        </is_non_resident>
        <is_individual>
            <![CDATA[SELECT NOT is_legal_entity individual FROM auction.suppliers s WHERE s.supplier_id = ?]]>
        </is_individual>
        <country>
            <![CDATA[SELECT country FROM auction.suppliers s WHERE s.supplier_id = ?]]>
        </country>
        <supplier_exists>
            <![CDATA[SELECT 1 FROM auction.suppliers WHERE identification_number = ?]]>
        </supplier_exists>
        <get_id_by_bin>
            <![CDATA[SELECT supplier_id FROM auction.suppliers WHERE identification_number = ?]]>
        </get_id_by_bin>
        <user_supplier>
            <![CDATA[
SELECT s.supplier_id, s.nonresident, s.is_legal_entity legal_entity, NOT s.is_legal_entity individual, s.identification_number, s.business_entity_type, s.business_entity_type_custom, s.rnn, s.name_ru, s.name_kz, s.state_reg_number, s.state_reg_date, s.state_reg_department, s.chief_full_name, s.chief_full_position, s.reg_status, s.country
  FROM auction.suppliers s
  JOIN auction.users u
    ON u.supplier_id = s.supplier_id
 WHERE u.user_id = ?]]>
        </user_supplier>
        <user_supplier_by_id>
            <![CDATA[
SELECT s.supplier_id, s.nonresident, s.is_legal_entity legal_entity, NOT s.is_legal_entity individual, s.identification_number, s.business_entity_type, s.business_entity_type_custom, s.rnn, s.name_ru, s.name_kz, s.state_reg_number, s.state_reg_date, s.state_reg_department, s.chief_full_name, s.chief_full_position, s.reg_status, s.country
  FROM auction.suppliers s
 WHERE s.supplier_id = ?]]>
        </user_supplier_by_id>
        <insert>
            <![CDATA[
INSERT INTO auction.suppliers(nonresident, is_legal_entity, country, identification_number, business_entity_type,
            business_entity_type_custom, rnn, name_ru, name_kz, reg_status,
            creation_date, created_by, last_updated_date, last_updated_by)
     VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, now(), ?, now(), ?)]]>
        </insert>
        <update>
            <![CDATA[
UPDATE auction.suppliers
   SET rnn = ?, name_ru = ?, name_kz = ?, state_reg_number = ?, state_reg_date = ?, state_reg_department = ?,
       chief_full_name = ?, chief_full_position = ?, business_entity_type = ?, business_entity_type_custom = ?,
       last_updated_date = now(), last_updated_by = ?
 WHERE supplier_id = ?]]>
        </update>
        <update_status>
            <![CDATA[
UPDATE auction.suppliers
   SET reg_status = ?,
       last_updated_date = now(),
       last_updated_by = ?
 WHERE supplier_id = ?]]>
        </update_status>
        <get_for_integra>
            <![CDATA[
            SELECT supplier_id, NULL customer_id, name_ru, name_kz, business_entity_type,
                   identification_number bin, rnn, state_reg_number, state_reg_date, state_reg_department,
                  chief_full_name, chief_full_position, case WHEN supplier_id IS NOT NULL THEN 1 ELSE 0 END is_supplier,
                  0 is_organizer, 0 is_customer, case WHEN is_legal_entity is TRUE THEN 1 ELSE 0 END is_legal_entity,
                  country resident_country, creation_date, product_service_desc, 0 send_award
            FROM auction.suppliers s
            WHERE reg_status = 'APPROVED' AND (last_sent IS NULL OR last_sent < last_updated_date)]]>
        </get_for_integra>
        <set_sent>
            <![CDATA[UPDATE auction.suppliers SET last_sent = now() WHERE supplier_id = ?]]>
        </set_sent>
        <get_empty_notification_setting>
            <![CDATA[
            SELECT s.supplier_id
            FROM auction.suppliers s
            WHERE s.supplier_id not in (SELECT supplier_id from auction.supplier_settings) ORDER BY supplier_id ]]>
        </get_empty_notification_setting>
    </supplier>
    <customer>
        <get>
            <![CDATA[
SELECT c.customer_id, c.is_organizer, c.identification_number, c.business_entity_type, c.rnn, c.name_ru, c.name_kz, c.state_reg_number, c.state_reg_date, c.state_reg_department, c.chief_full_name, c.chief_full_position, c.reg_status,
       c.head_org_identification_number, c.head_org_name_ru, c.head_org_name_kz, cs.item_code_list_type
  FROM auction.customers c
  LEFT JOIN auction.customer_settings cs
    ON c.customer_id = cs.customer_id
   AND cs.main
 WHERE c.customer_id = ?]]>
        </get>
        <get_reg_status>
            <![CDATA[
SELECT reg_status
  FROM auction.customers
 WHERE customer_id = ?]]>
        </get_reg_status>
        <user_customer>
            <![CDATA[
SELECT c.customer_id, c.is_organizer, c.identification_number, c.business_entity_type, c.rnn, c.name_ru, c.name_kz, c.state_reg_number, c.state_reg_date, c.state_reg_department, c.chief_full_name, c.chief_full_position, c.reg_status,
       c.head_org_identification_number, c.head_org_name_ru, c.head_org_name_kz, cs.item_code_list_type
  FROM auction.customers c
  JOIN auction.users u
    ON u.customer_id = c.customer_id
  LEFT JOIN auction.customer_settings cs
    ON c.customer_id = cs.customer_id
   AND cs.main
 WHERE user_id = ?]]>
        </user_customer>
        <get_bin>
            <![CDATA[SELECT identification_number FROM auction.customers WHERE customer_id = ?]]>
        </get_bin>
        <get_id_by_bin>
            <![CDATA[SELECT customer_id FROM auction.customers WHERE identification_number = ?]]>
        </get_id_by_bin>
        <insert>
            <![CDATA[
INSERT INTO auction.customers(is_organizer, identification_number, business_entity_type, rnn, name_ru,
            name_kz, state_reg_number, state_reg_date, state_reg_department,
            chief_full_name, chief_full_position, reg_status,
            head_org_identification_number, head_org_name_ru, head_org_name_kz,
            creation_date, created_by, last_updated_date, last_updated_by)
     VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, now(), ?, now(), ?)]]>
        </insert>
        <update>
            <![CDATA[
UPDATE auction.customers
   SET is_organizer = ?, identification_number = ?, business_entity_type = ?,
       rnn = ?, name_ru = ?, name_kz = ?, state_reg_number = ?, state_reg_date = ?,
       state_reg_department = ?, chief_full_name = ?, chief_full_position = ?,
       head_org_identification_number = ?, head_org_name_ru = ?, head_org_name_kz = ?,
       last_updated_date = now(), last_updated_by = ?
 WHERE customer_id = ?]]>
        </update>
        <customer_exists>
            <![CDATA[SELECT 1 FROM auction.customers WHERE identification_number = ?]]>
        </customer_exists>
        <update_reg_status>
            <![CDATA[
UPDATE auction.customers
   SET reg_status = ?,
       last_updated_by = ?,
       last_updated_date = now()
 WHERE customer_id = ?]]>
        </update_reg_status>
        <get_for_integra>
            <![CDATA[
SELECT NULL supplier_id, c.customer_id, name_ru, name_kz, business_entity_type,
      identification_number bin, rnn, state_reg_number, state_reg_date, state_reg_department,
      chief_full_name, chief_full_position, case WHEN c.customer_id IS NOT NULL THEN 1 ELSE 0 END is_customer,
      case WHEN c.customer_id IS NOT NULL THEN 1 ELSE 0 END is_organizer, 0 is_supplier, 1 is_legal_entity,
      'KZ' resident_country, c.creation_date, product_service_desc,
      CASE WHEN cs.integration_send_award IS NOT NULL THEN 1 ELSE 0 END send_award
 FROM auction.customers c
 JOIN auction.customer_settings cs
   ON c.customer_id = cs.customer_id
WHERE c.customer_id = ?
  AND (last_sent IS NULL OR last_sent < c.last_updated_date)]]>
        </get_for_integra>
        <set_sent>
            <![CDATA[UPDATE auction.customers SET last_sent = now() WHERE customer_id = ?]]>
        </set_sent>
    </customer>
    <customer_settings>
        <list>
            <![CDATA[
SELECT setting_id, name, main,
       rfq_enabled, rfq_award_method, rfq_foreign_currency_control,
       auction_enabled, auction_foreign_currency_control, auction_award_method,
       auction_duration, auction_ext_time_left, auction_ext_duration, auction_ext_number,
       tender_foreign_currency_control, tender_enabled,
       tender2_enabled, tender2_foreign_currency_control,
       item_code_list_type, integration_send_award, plans_enabled, customer_id
  FROM auction.customer_settings
 WHERE customer_id = ?]]>
        </list>
        <get>
            <![CDATA[
SELECT setting_id, name, main,
       rfq_enabled, rfq_award_method, rfq_foreign_currency_control,
       auction_enabled, auction_foreign_currency_control, auction_award_method,
       auction_duration, auction_ext_time_left, auction_ext_duration, auction_ext_number,
       tender_foreign_currency_control, tender_enabled,
       tender2_enabled, tender2_foreign_currency_control,
       item_code_list_type, plans_enabled, customer_id
  FROM auction.customer_settings
 WHERE setting_id = ?]]>
        </get>
        <get_main_id>
            <![CDATA[
SELECT setting_id
  FROM auction.customer_settings
 WHERE customer_id = ?
   AND main]]>
        </get_main_id>
        <get_main>
            <![CDATA[
SELECT setting_id, name, main,
       rfq_enabled, rfq_award_method, rfq_foreign_currency_control,
       auction_enabled, auction_foreign_currency_control, auction_award_method,
       auction_duration, auction_ext_time_left, auction_ext_duration, auction_ext_number,
       tender_foreign_currency_control, tender_enabled,
       tender2_enabled, tender2_foreign_currency_control,
       item_code_list_type, plans_enabled, customer_id
  FROM auction.customer_settings
 WHERE customer_id = ?
   AND main]]>
        </get_main>
        <get_auction_settings>
            <![CDATA[
SELECT auction_enabled, auction_foreign_currency_control, auction_award_method,
       auction_ext_time_left, auction_ext_duration, auction_ext_number, auction_duration
  FROM auction.customer_settings
 WHERE setting_id = ?]]>
        </get_auction_settings>
        <get_auction_duration>
            <![CDATA[
SELECT auction_duration
  FROM auction.customer_settings
 WHERE setting_id = ?]]>
        </get_auction_duration>
        <get_foreign_currency_control_enabled>
            <![CDATA[
SELECT rfq_foreign_currency_control, auction_foreign_currency_control,
       tender_foreign_currency_control, tender2_foreign_currency_control
  FROM auction.pd_neg_header n
  JOIN auction.customer_settings s
    ON s.setting_id = n.setting_id
 WHERE neg_id = ?]]>
        </get_foreign_currency_control_enabled>
        <get_neg_award_method>
            <![CDATA[
SELECT rfq_award_method, auction_award_method
  FROM auction.pd_neg_header n
  JOIN auction.customer_settings s
    ON s.setting_id = n.setting_id
 WHERE neg_id = ?]]>
        </get_neg_award_method>
        <insert>
            <![CDATA[
INSERT INTO auction.customer_settings(customer_id, name, main,
            rfq_enabled, rfq_award_method, rfq_foreign_currency_control,
            tender_enabled, tender_foreign_currency_control,
            auction_enabled, auction_foreign_currency_control, auction_award_method, auction_duration,
            auction_ext_time_left, auction_ext_duration, auction_ext_number,
            tender2_enabled, tender2_foreign_currency_control,
            item_code_list_type, plans_enabled, integration_send_award,
            created_by, creation_date, last_updated_by, last_updated_date)
   VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, now(), ?, now())]]>
        </insert>
        <update>
            <![CDATA[
UPDATE auction.customer_settings
   SET name = ?,
       rfq_enabled = ?,
       rfq_award_method = ?,
       rfq_foreign_currency_control = ?,
       tender_enabled = ?,
       tender_foreign_currency_control = ?,
       auction_enabled = ?,
       auction_foreign_currency_control = ?,
       auction_award_method = ?,
       auction_duration = ?,
       auction_ext_time_left = ?,
       auction_ext_duration = ?,
       auction_ext_number = ?,
       tender2_enabled = ?,
       tender2_foreign_currency_control = ?,
       plans_enabled = ?,
       item_code_list_type = ?,
       integration_send_award = ?,
       last_updated_date = now(),
       last_updated_by = ?
 WHERE setting_id = ?]]>
        </update>
        <make_main>
            <![CDATA[
UPDATE auction.customer_settings
   SET main = CASE setting_id WHEN ? THEN TRUE ELSE FALSE END,
       last_updated_date = now(),
       last_updated_by = ?
 WHERE customer_id = ?]]>
        </make_main>
        <plan_cols>
            <list_all>
                <![CDATA[
SELECT c.col_id, c.setting_id, cd.col_name, cd.col_type, cd.description, cd.is_system,
       c.required, c.display_in_form, c.display_in_template, c.editable, c.order_num
  FROM auction.md_plan_cols c
  JOIN auction.md_plan_col_defs cd
    ON c.col_id = cd.col_id
 WHERE setting_id = ?
 ORDER BY order_num]]>
            </list_all>
            <list>
                <![CDATA[
SELECT c.col_id, c.setting_id, cd.col_name, c.required, c.display_in_form, c.editable, c.order_num, c.display_in_form
  FROM auction.md_plan_cols c
  JOIN auction.md_plan_col_defs cd
    ON c.col_id = cd.col_id
 WHERE setting_id = ?
 ORDER BY order_num]]>
            </list>
            <init_cust_new_setting_plan_cols>
                <![CDATA[
INSERT INTO auction.md_plan_cols (col_id, setting_id, required, display_in_form, display_in_template, editable, order_num, creation_date, created_by, last_updated_date, last_updated_by)
SELECT col_id, ?, required, display_in_form, display_in_template, editable, col_id, now(), ?, now(), ?
  FROM auction.md_plan_col_defs
 ORDER BY col_id]]>
            </init_cust_new_setting_plan_cols>
            <update>
                <![CDATA[
UPDATE auction.md_plan_cols
   SET required = ?,
       display_in_form = ?,
       display_in_template = ?,
       editable = ?,
       order_num = ?,
       last_updated_date = now(),
       last_updated_by = ?
 WHERE col_id = ?
   AND setting_id = ?]]>
            </update>
        </plan_cols>
        <md_requirements>
            <list>
                <![CDATA[
SELECT requirement_id, setting_id, description, is_system, neg_type, req_type, applicable_for_stage1, applicable_for_stage2, created_by, creation_date, last_updated_date, last_updated_by
  FROM auction.md_neg_requirements
 WHERE setting_id = ?
   AND neg_type = ?
 ORDER BY is_system, description]]>
            </list>
            <foreign_curr_req_exists>
                <![CDATA[
SELECT 1
  FROM auction.md_neg_requirements
 WHERE setting_id = ?
   AND neg_type = ?
   AND req_type = 'FOREIGN_CURRENCY_CONTROL']]>
            </foreign_curr_req_exists>
            <exists>
                <![CDATA[
SELECT 1
  FROM auction.md_neg_requirements
 WHERE setting_id = ?
   AND neg_type = ?]]>
            </exists>
            <insert>
                <![CDATA[
INSERT INTO auction.md_neg_requirements(setting_id, neg_type, req_type, is_system,
            description, applicable_for_stage1, applicable_for_stage2,
            created_by, creation_date, last_updated_by, last_updated_date)
VALUES (?, ?, ?, ?, ?, ?, ?, ?, now(), ?, now())]]>
            </insert>
            <update>
                <![CDATA[
UPDATE auction.md_neg_requirements
   SET description = ?,
       applicable_for_stage1 = ?,
       applicable_for_stage2 = ?,
       last_updated_date = now(),
       last_updated_by = ?
 WHERE requirement_id = ?]]>
            </update>
            <delete>
                <![CDATA[
DELETE FROM auction.md_neg_requirements
 WHERE setting_id = ?
   AND neg_type = ?
   AND req_type = 'FOREIGN_CURRENCY_CONTROL']]>
            </delete>
        </md_requirements>
        <md_discounts>
            <list>
                <![CDATA[
SELECT discount_id, setting_id, description, is_system, neg_type, discount_type, discount_code,
       applicable_for_good, applicable_for_work, applicable_for_service, applicable_for_stage2, display_in_form
  FROM auction.md_neg_discounts
 WHERE setting_id = ?
   AND neg_type = ?
 ORDER BY is_system, description]]>
            </list>
            <insert>
                <![CDATA[
INSERT INTO auction.md_neg_discounts(setting_id, neg_type, is_system, description, applicable_for_good,
       applicable_for_work, applicable_for_service, applicable_for_stage2, discount_type, discount_code, display_in_form,
       created_by, creation_date, last_updated_by, last_updated_date)
VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, now(), ?, now())]]>
            </insert>
            <update>
                <![CDATA[
UPDATE auction.md_neg_discounts
   SET description = ?,
       applicable_for_good = ?,
       applicable_for_work = ?,
       applicable_for_service = ?,
       applicable_for_stage2 = ?,
       display_in_form = ?,
       last_updated_date = now(),
       last_updated_by = ?
 WHERE discount_id = ?]]>
            </update>
            <delete>
                <![CDATA[DELETE FROM auction.md_neg_discounts WHERE discount_id = ?]]>
            </delete>
            <md_discount_values>
                <list>
                    <![CDATA[
SELECT discount_val_id, discount_id, bool_value, number_from, number_to, discount,
       created_by, creation_date, last_updated_date, last_updated_by
  FROM auction.md_neg_discount_values
 WHERE discount_id = ?
 ORDER BY discount_id, bool_value, number_from, number_to]]>
                </list>
                <insert>
                    <![CDATA[
INSERT INTO auction.md_neg_discount_values(discount_id, bool_value, number_from, number_to, discount,
         created_by, creation_date, last_updated_by, last_updated_date)
VALUES (?, ?, ?, ?, ?, ?, now(), ?, now())]]>
                </insert>
                <update>
                    <![CDATA[
UPDATE auction.md_neg_discount_values
   SET bool_value = ?,
       number_from = ?,
       number_to = ?,
       discount = ?,
       last_updated_date = now(),
       last_updated_by = ?
 WHERE discount_val_id = ?]]>
                </update>
                <delete>
                    <![CDATA[DELETE FROM auction.md_neg_discount_values WHERE discount_id = ?]]>
                </delete>
            </md_discount_values>
        </md_discounts>
    </customer_settings>
    <supplier_settings>
        <list>
            <![CDATA[
            SELECT setting_id, supplier_id, name FROM auction.supplier_settings
            WHERE supplier_id = ?]]>
        </list>
        <insert>
            <![CDATA[
            INSERT INTO auction.supplier_settings(supplier_id, name, created_by,
            creation_date, last_updated_by, last_updated_date)
            VALUES(?,?,?,now(),?,now())]]>
        </insert>
        <update>
            <![CDATA[
            UPDATE auction.supplier_settings SET name=?, last_updated_by=?, last_updated_date=now()
            WHERE setting_id=?]]>
        </update>
        <delete>
            <![CDATA[
            DELETE FROM auction.supplier_settings WHERE setting_id=?]]>
        </delete>
        <get_main>
            <![CDATA[
            SELECT setting_id, supplier_id, name FROM auction.supplier_settings
            WHERE supplier_id = ? ORDER BY setting_id ASC LIMIT 1]]>
        </get_main>
        <neg_notifications>
            <list>
                <![CDATA[
                SELECT notification_id, setting_id, category, amount, created_by,
                creation_date, last_updated_by, last_updated_date FROM auction.sp_neg_notification
                WHERE setting_id = ? ORDER BY notification_id]]>
            </list>
            <exist>
                <![CDATA[
                SELECT 1 FROM auction.sp_neg_notification WHERE notification_id = ?]]>
            </exist>
            <insert>
                <![CDATA[
                INSERT INTO auction.sp_neg_notification(setting_id,category,amount,created_by,creation_date,
                last_updated_by, last_updated_date)
                VALUES(?,?,?,?,now(),?,now())]]>
            </insert>
            <update>
                <![CDATA[
                UPDATE auction.sp_neg_notification SET category=?, amount=?, last_updated_by=?, last_updated_date=now()
                WHERE notification_id=?]]>
            </update>
            <delete>
                <![CDATA[
                DELETE FROM auction.sp_neg_notification WHERE notification_id = ?]]>
            </delete>
        </neg_notifications>
    </supplier_settings>
    <addresses>
        <get_supplier>
            <![CDATA[
SELECT a.address_id, a.address_type, a.kato, a.city, a.address_line, a.phone_number, concat_ws(', ', k.region, k.county, k.district, town) kato_desc, a.email, a.country
  FROM auction.addresses a
  LEFT JOIN md.kato_codes k
    ON k.code = a.kato
 WHERE supplier_id = ?
 ORDER BY address_type, kato, city, address_line]]>
        </get_supplier>
        <get_supplier_for_integra>
            <![CDATA[
            SELECT s.identification_number, a.address_id, a.address_type,case WHEN a.country IS NOT NULL THEN a.country ELSE 'KZ' END country, a.city, a.kato, a.address_line, a.phone_number, s.supplier_id, '' customer_id, a.email
FROM auction.addresses a
  JOIN auction.suppliers s
  ON s.supplier_id = a.supplier_id
  LEFT JOIN md.kato_codes k
    ON k.code = a.kato
WHERE s.supplier_id = ?
ORDER BY address_type, kato, city, address_line]]>
        </get_supplier_for_integra>
        <get_customer>
            <![CDATA[
SELECT a.address_id, a.address_type, a.kato, a.city, a.address_line, a.phone_number, concat_ws(', ', k.region, k.county, k.district, town) kato_desc, a.email, a.country
  FROM auction.addresses a
  LEFT JOIN md.kato_codes k
    ON k.code = a.kato
 WHERE customer_id = ?
 ORDER BY address_type, kato, city, address_line]]>
        </get_customer>
        <get_customer_for_integra>
            <![CDATA[
            SELECT s.identification_number, a.address_id, a.address_type,case WHEN a.country IS NOT NULL THEN a.country ELSE 'KZ' END country, a.city, a.kato, a.address_line, a.phone_number, '' supplier_id, s.customer_id, a.email
FROM auction.addresses a
  JOIN auction.customers s
    ON s.customer_id = a.customer_id
  LEFT JOIN md.kato_codes k
    ON k.code = a.kato
WHERE s.customer_id = ?
ORDER BY address_type, kato, city, address_line]]>
        </get_customer_for_integra>
        <check_customer_legal_address>
            <![CDATA[
SELECT 1
  FROM auction.addresses
 WHERE address_type = 'LEGAL'
   AND customer_id = ?
 LIMIT 1]]>
        </check_customer_legal_address>
        <check_supplier_legal_address>
            <![CDATA[
SELECT 1
  FROM auction.addresses
 WHERE address_type = 'LEGAL'
   AND supplier_id = ?
 LIMIT 1]]>
        </check_supplier_legal_address>
        <insert>
            <![CDATA[
INSERT INTO auction.addresses(
       address_type, country, kato, city, address_line,
       phone_number, supplier_id, customer_id, email,
       creation_date, created_by, last_updated_date, last_updated_by)
VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, now(), ?, now(), ?)]]>
        </insert>
        <update>
            <![CDATA[
UPDATE auction.addresses
   SET address_type = ?, country = ?,  kato = ?, city = ?, address_line = ?,
       phone_number = ?, supplier_id = ?, customer_id = ?, email = ?,
       last_updated_by = ?, last_updated_date = now()
 WHERE address_id = ? ]]>
        </update>
    </addresses>
    <bank_accounts>
        <get_supplier>
            <![CDATA[
SELECT account_id, name, account, currency, active, main_account, bank_number
  FROM auction.bank_accounts
 WHERE supplier_id = ?
 ORDER BY name, account, currency]]>
        </get_supplier>
        <get_customer>
            <![CDATA[
SELECT account_id, name, account, currency, active, main_account, bank_number
  FROM auction.bank_accounts
 WHERE customer_id = ?
 ORDER BY name, account, currency]]>
        </get_customer>
        <check_customer_main_bank_account>
            <![CDATA[
SELECT 1
  FROM auction.bank_accounts
 WHERE customer_id = ?
   AND main_account
   AND active]]>
        </check_customer_main_bank_account>
        <check_supplier_main_bank_account>
            <![CDATA[
SELECT 1
  FROM auction.bank_accounts
 WHERE supplier_id = ?
   AND main_account
   AND active]]>
        </check_supplier_main_bank_account>
        <customer_acc_exists>
            <![CDATA[SELECT 1 from auction.bank_accounts WHERE customer_id = ? AND account = ?]]>
        </customer_acc_exists>
        <supplier_acc_exists>
            <![CDATA[SELECT 1 from auction.bank_accounts WHERE supplier_id = ? AND account = ?]]>
        </supplier_acc_exists>
        <switch_cust_main_acc>
            <![CDATA[
UPDATE auction.bank_accounts
   SET main_account = FALSE,
       last_updated_date = now(),
       last_updated_by = ?
 WHERE customer_id = ?]]>
        </switch_cust_main_acc>
        <switch_supp_main_acc>
            <![CDATA[
UPDATE auction.bank_accounts
   SET main_account = FALSE,
       last_updated_date = now(),
       last_updated_by = ?
 WHERE supplier_id = ?]]>
        </switch_supp_main_acc>
        <insert>
            <![CDATA[
INSERT INTO auction.bank_accounts(
       account, name, currency, main_account,
       supplier_id, customer_id, bank_number, active,
       creation_date, created_by, last_updated_date, last_updated_by)
VALUES (?, ?, ?, ?, ?, ?, ?, ?, now(), ?, now(), ?)]]>
        </insert>
        <update>
            <![CDATA[
UPDATE auction.bank_accounts
   SET account = ?, name = ?, currency = ?, main_account = ?,
       supplier_id = ?, customer_id = ?,  bank_number = ?, active = ?,
       last_updated_date = now(), last_updated_by = ?
 WHERE account_id = ?]]>
        </update>
    </bank_accounts>
    <employees>
        <get>
            <![CDATA[
SELECT u.id as user_id,
	case user_status_id when 1 then true when 0 then false end as active,
	u.firstname as first_name,
	u.lastname as last_name,
        u.middlename as middle_name,
        u.iin,
        u.usermail1 as email,
        u.mobile_phone as phone_number,
        (select max(session_id) from auction.sessions where active=true and user_id=u.id) as userSessionId,
        (select string_agg (dd.poscode, ',') from (
 with param as (select cast(u.id as bigint) as usr)
select pt.code as poscode
  from ch_ksk.t_ksk k,
           ch_ksk.t_position p,
           ch_ksk.t_position_types pt,
           param
     where k.id=p.t_ksk_id
       and p.t_position_types_id = pt.id
       and p.date_end is null
       and p.t_user_id=param.usr
       union
       select 'md' as poscode
            from ch_ksk.t_ksk tk, ch_ksk.t_moderators m, ch_ksk.t_moderator_ksk mk,param
            where  tk.status=1
            and tk.id = mk.t_ksk_id and m.id = mk.t_moderators_id and m.t_user_id = param.usr) as dd) as ksk_pos,

(select string_agg (dd.poscode, ',') from (
 with param as (select cast(u.id as bigint) as usr)
select pt.code as poscode
  from ch_ksk.t_company k,
           ch_ksk.t_comp_position p,
           ch_ksk.t_comp_position_type pt,
           param
     where k.id=p.comp_id
       and p.comp_pos_type_id = pt.id
       and p.date_end is null
       and p.t_user_id=param.usr
       union
       select 'md' as poscode
            from ch_ksk.t_company tk, ch_ksk.t_moderators m, ch_ksk.t_moderator_comp mk,param
            where  tk.status=1
            and tk.id = mk.t_comp_id and m.id = mk.t_moderators_id and m.t_user_id = param.usr) as dd
) as com_pos
  FROM ch_ksk.t_user u
 WHERE u.id=?
            ]]>
        </get>
        <get_supplier_employee>
            <![CDATA[
SELECT u.user_id, p.person_id, p.first_name, p.last_name, p.middle_name, p.iin, u.active, u.main_user, u.email, u.phone_number, u.end_active_date, u.user_position, u.is_sysadmin sysadmin
  FROM auction.users u
  JOIN auction.persons p
    ON p.person_id = u.person_id
 WHERE supplier_id = ?
 ORDER BY p.first_name, p.last_name, p.middle_name]]>
        </get_supplier_employee>
        <get_customer_employee>
            <![CDATA[
SELECT u.user_id, p.person_id, p.first_name, p.last_name, p.middle_name, p.iin, u.active, u.main_user, u.email, u.phone_number, u.end_active_date, u.user_position, u.is_sysadmin sysadmin, u.creation_date
  FROM auction.users u
  JOIN auction.persons p
    ON p.person_id = u.person_id
 WHERE customer_id = ?
 ORDER BY p.first_name, p.last_name, p.middle_name]]>
        </get_customer_employee>
        <get_supplier_main_user>
            <![CDATA[
SELECT u.user_id, p.person_id, p.first_name, p.last_name, p.middle_name, p.iin, u.active, u.main_user, u.email, u.phone_number, u.end_active_date, u.user_position, u.is_sysadmin sysadmin
  FROM auction.users u
  JOIN auction.persons p
    ON p.person_id = u.person_id
 WHERE supplier_id = ?
   AND main_user]]>
        </get_supplier_main_user>
        <get_customer_main_user>
            <![CDATA[
SELECT u.user_id, p.person_id, p.first_name, p.last_name, p.middle_name, p.iin, u.active, u.main_user,
       u.email, u.phone_number, u.end_active_date, u.user_position, u.is_sysadmin sysadmin
  FROM auction.users u
  JOIN auction.persons p
    ON p.person_id = u.person_id
 WHERE customer_id = ?
   AND main_user]]>
        </get_customer_main_user>
        <get_bid_author_employee>
            <![CDATA[
SELECT p.first_name, p.last_name, p.middle_name, u.email, u.phone_number, u.user_position
  FROM auction.users u
  JOIN auction.persons p
    ON p.person_id = u.person_id
 WHERE user_id = ?]]>
        </get_bid_author_employee>
        <neg_bids_supp_emps>
            <![CDATA[
SELECT u.user_id, p.person_id, p.first_name, p.last_name, p.middle_name, p.iin, u.active, u.main_user, u.email,
       u.phone_number, u.end_active_date, u.user_position, u.is_sysadmin sysadmin
  FROM auction.pd_bid_header b
  JOIN auction.users u
    ON u.user_id = b.created_by
  JOIN auction.persons p
    ON p.person_id = u.person_id
 WHERE b.neg_id = ?
   AND b.BID_STATUS IN ('AWARDED', 'ACTIVE', 'PARTIAL', 'REJECTED', 'FAILED')]]>
        </neg_bids_supp_emps>
        <tender2_stage1_bid_supp_emps>
            <![CDATA[
SELECT u.user_id, p.person_id, p.first_name, p.last_name, p.middle_name, p.iin, u.active, u.main_user,
       u.email, u.phone_number, u.end_active_date, u.user_position, u.is_sysadmin sysadmin
  FROM auction.pd_bid_header bh
  JOIN auction.users u
    ON u.user_id = bh.created_by
  JOIN auction.persons p
    ON p.person_id = u.person_id
 WHERE bh.neg_id = ?
   AND bh.bid_status = 'ACTIVE'
   AND (SELECT BOOL_OR(bl.bid_line_status = 'ACTIVE')
          FROM auction.pd_bid_lines bl
         WHERE bl.bid_id = bh.bid_id)]]>
        </tender2_stage1_bid_supp_emps>
        <all_active_bid_suppliers_emails>
            <![CDATA[
SELECT DISTINCT u.email, concat_ws(' ', p.first_name, p.last_name) full_name
  FROM auction.pd_bid_header b
  JOIN auction.users u
    ON b.created_by = u.user_id
  JOIN auction.persons p
    ON u.person_id = p.person_id
 WHERE b.neg_id = ?
   AND b.bid_status = 'ACTIVE'
   AND b.created_by != ?]]>
        </all_active_bid_suppliers_emails>
    </employees>
    <plans>
        <get>
            <![CDATA[
SELECT p.plan_id, p.plan_number, p.org_id, p.org_id customer_id, p.financial_year, p.item_code, p.item_code_desc, p.item_name_ru,
       p.item_name_kz, p.kz_content, p.item_short_desc_ru, p.item_short_desc_kz, p.item_long_desc_ru,
       p.item_long_desc_kz, p.purchase_location, p.purchase_type, p.purchase_method, p.shipping_location,
       p.incoterms2010, p.prepayment, p.uom_code, u.measure uom_measure, p.quantity, p.unit_price,
       p.amount_without_vat, p.amount_with_vat, p.note, p.purchase_priority, p.shipping_date, p.status,
       p.shipping_region, p.purchase_period, p.setting_id
  FROM auction.plans p
  LEFT JOIN md.uom_codes u
    ON p.uom_code = u.code
 WHERE plan_id = ?
   AND org_id = ?]]>
        </get>
        <get_neg_list>
            <![CDATA[
SELECT p.plan_id, p.plan_number, p.org_id, p.org_id customer_id, p.financial_year, p.item_code, p.item_code_desc, p.item_name_ru,
       p.item_name_kz, p.kz_content, p.item_short_desc_ru, p.item_short_desc_kz, p.item_long_desc_ru,
       p.item_long_desc_kz, p.purchase_location, p.purchase_type, p.purchase_method, p.shipping_location,
       p.incoterms2010, p.prepayment, p.uom_code, u.measure uom_measure, p.quantity, p.unit_price,
       p.amount_without_vat, p.amount_with_vat, p.note, p.purchase_priority, p.shipping_date, p.status,
       p.shipping_region, p.purchase_period, p.setting_id
  FROM auction.plans p
  JOIN auction.pd_neg_lines nl
    ON p.plan_id = nl.plan_id
  LEFT JOIN md.uom_codes u
    ON p.uom_code = u.code
 WHERE nl.neg_id = ?]]>
        </get_neg_list>
        <get_plan_status>
            <![CDATA[SELECT status FROM auction.plans WHERE plan_id = ?]]>
        </get_plan_status>
        <plan_number_exists>
            <![CDATA[SELECT 1 FROM auction.plans WHERE plan_number = ? AND org_id = ? AND financial_year = ?]]>
        </plan_number_exists>
        <item_code_exists>
            <![CDATA[SELECT 1 FROM md.plan_item_codes WHERE code_type = ? AND code = ?]]>
        </item_code_exists>
        <uom_code_exists>
            <![CDATA[SELECT 1 FROM md.uom_codes WHERE code = ?]]>
        </uom_code_exists>
        <valid_region_code>
            <![CDATA[SELECT 1 FROM auction.lookup_values WHERE lookup_type = 'REGIONS' AND language = 'RU' AND lookup_code = ?]]>
        </valid_region_code>
        <valid_purchase_priority>
            <![CDATA[SELECT 1 FROM auction.lookup_values WHERE lookup_type = 'PURCHASE_PRIORITY' AND language = 'RU' AND lookup_code = ?]]>
        </valid_purchase_priority>
        <region_codes>
            <![CDATA[SELECT lookup_code, lower(meaning) meaning FROM auction.lookup_values WHERE lookup_type = 'REGIONS' AND language = 'RU']]>
        </region_codes>
        <purchase_priorities>
            <![CDATA[SELECT lookup_code, lower(meaning) meaning FROM auction.lookup_values WHERE lookup_type = 'PURCHASE_PRIORITY' AND language = 'RU']]>
        </purchase_priorities>
        <insert>
            <![CDATA[
INSERT INTO auction.plans(plan_number, org_id, financial_year, item_code, item_code_desc, item_name_ru,
            item_name_kz, item_short_desc_ru, item_short_desc_kz, item_long_desc_ru, item_long_desc_kz,
            purchase_type, purchase_method, kz_content, purchase_location_kato, purchase_location,
            shipping_location, incoterms2010, shipping_date, prepayment, uom_code, quantity, unit_price,
            amount_without_vat, amount_with_vat, purchase_priority, note, item_code_list_type, setting_id,
            shipping_region, purchase_period, creation_date, created_by, last_updated_date, last_updated_by)
   VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, now(), ?, now(), ?)]]>
        </insert>
        <update>
            <![CDATA[
UPDATE auction.plans
   SET plan_number = ?,
       financial_year = ?,
       item_code = ?,
       item_code_desc = ?,
       item_name_ru = ?,
       item_name_kz = ?,
       item_short_desc_ru = ?,
       item_short_desc_kz = ?,
       item_long_desc_ru = ?,
       item_long_desc_kz = ?,
       purchase_type = ?,
       purchase_method = ?,
       kz_content = ?,
       purchase_location_kato = ?,
       purchase_location = ?,
       shipping_location = ?,
       incoterms2010 = ?,
       shipping_date = ?,
       prepayment = ?,
       uom_code = ?,
       quantity = ?,
       unit_price = ?,
       amount_without_vat = ?,
       amount_with_vat = ?,
       purchase_priority = ?,
       note = ?,
       shipping_region = ?,
       purchase_period = ?,
       last_updated_date = now(),
       last_updated_by = ?
 WHERE plan_id = ?]]>
        </update>
        <reset_neg_plans_award_statuses>
            <![CDATA[
UPDATE auction.plans
   SET status = 'PUBLISHED',
       last_updated_by = ?,
       last_updated_date = now()
 WHERE plan_id IN (SELECT nl.plan_id
                     FROM auction.pd_neg_lines nl
                    WHERE nl.neg_id = ?)]]>
        </reset_neg_plans_award_statuses>
        <approve>
            <![CDATA[
UPDATE auction.plans
   SET status = 'APPROVED',
       last_updated_by = ?,
       last_updated_date = now()
 WHERE plan_id = ?
   AND status = 'CREATED']]>
        </approve>
        <delete>
            <![CDATA[DELETE FROM auction.plans WHERE plan_id = ? AND status = 'CREATED']]>
        </delete>
        <update_import_file>
            <![CDATA[
UPDATE auction.plan_files
   SET status = ?,
       parse_log_file_id = ?,
       last_updated_date = now(),
       last_updated_by = ?
 WHERE plan_file_id = ?]]>
        </update_import_file>
        <update_published_neg_plans_status>
            <![CDATA[
UPDATE auction.plans
   SET status = 'PUBLISHED',
       last_updated_by = ?,
       last_updated_date = now()
 WHERE plan_id IN (SELECT nl.plan_id FROM auction.pd_neg_lines nl WHERE nl.neg_id = ?)]]>
        </update_published_neg_plans_status>
        <update_failed_neg_plans_status>
            <![CDATA[
UPDATE auction.plans
   SET status = 'NEG_FAILED',
       last_updated_by = ?,
       last_updated_date = now()
 WHERE plan_id IN (SELECT nl.plan_id
                     FROM auction.pd_neg_lines nl
                    WHERE nl.neg_id = ?
                      AND winner_supplier_id IS NULL
                      AND fail_reason IS NOT NULL)]]>
        </update_failed_neg_plans_status>
        <update_awarded_neg_plans_status>
            <![CDATA[
UPDATE auction.plans
   SET status = 'EXECUTED',
       last_updated_by = ?,
       last_updated_date = now()
 WHERE plan_id IN (SELECT nl.plan_id
                     FROM auction.pd_neg_lines nl
                    WHERE nl.neg_id = ?
                      AND winner_supplier_id IS NOT NULL
                      AND fail_reason IS NULL)]]>
        </update_awarded_neg_plans_status>
    </plans>
    <plan_file>
        <plan_file_list>
            <![CDATA[
SELECT pf.plan_file_id, pf.customer_id, pf.file_id, f.file_name, pg_size_pretty(f.file_size) file_size, pf.parse_log_file_id, pf.status, pf.creation_date, pf.created_by, pf.last_updated_date, pf.last_updated_by
  FROM auction.plan_files pf
  JOIN auction.files f
    ON pf.file_id = f.file_id
 WHERE customer_id = ?]]>
        </plan_file_list>
        <get_plan_file>
            <![CDATA[
SELECT pf.plan_file_id, pf.customer_id, pf.file_id, pf.parse_log_file_id, pf.status, pf.creation_date, pf.created_by, pf.last_updated_date, pf.last_updated_by
  FROM auction.plan_files pf
 WHERE plan_file_id = ?]]>
        </get_plan_file>
        <insert>
            <![CDATA[
INSERT INTO auction.plan_files(file_id, customer_id, status,
            created_by, creation_date, last_updated_by, last_updated_date)
VALUES (?, ?, 'PENDING', ?, now(), ?, now())]]>
        </insert>
        <delete>
            <![CDATA[DELETE FROM auction.plan_files WHERE plan_file_id = ?]]>
        </delete>
    </plan_file>
    <negotiations>
        <get_last_negs_with_status>
            <![CDATA[
SELECT n.neg_id recid, n.doc_number, n.title, n.neg_type, n.open_date, n.close_date, n.actual_close_date, n.unlock_date, n.publish_date, n.neg_status, concat_ws(' ', p.first_name, p.last_name) created_by,
       COUNT(DISTINCT b.bid_id) bid_count, COUNT(DISTINCT l.line_num) neg_line_cnt
  FROM auction.pd_neg_header n
  LEFT JOIN auction.pd_neg_lines l
    ON n.neg_id = l.neg_id
  LEFT JOIN auction.pd_bid_header b
    ON n.neg_id = b.neg_id
   AND b.bid_status NOT IN ('DRAFT', 'REPLACED', 'WITHDRAW')
  LEFT JOIN auction.users u
    ON u.user_id = n.created_by
  LEFT JOIN auction.persons p
    ON p.person_id = u.person_id
 WHERE n.customer_id = ?
   AND n.neg_status = ?
 GROUP BY n.neg_id, n.doc_number, n.title, n.neg_type, n.open_date, n.close_date, n.actual_close_date, n.unlock_date, n.publish_date, n.neg_status, p.first_name, p.last_name
 ORDER BY n.neg_id DESC
 LIMIT 10]]>
        </get_last_negs_with_status>
        <get_neg_with_status>
            <![CDATA[
SELECT neg_id recid, parent_neg_id, doc_number, title, title_kz, description, neg_type, category, neg_status, min_bid_limit_days, dumping_control_enabled,
       good_dumping_calc_method, good_dumping_threshold, work_dumping_calc_method, work_dumping_threshold, service_dumping_calc_method, service_dumping_threshold,
       open_date, close_date, actual_close_date, unlock_date, publish_date, award_date,
       cancel_date, cancel_desc, creation_date, created_by, last_updated_date, last_updated_by,
       customer_id, setting_id, auction_bid_step, auction_bid_step_type, stage,
       auction.neg_has_file(neg_id, 'NEG_PUBLISH_REPORT') has_neg_publish_report,
       auction.neg_has_file(neg_id, 'NEG_NEG_RESUME_REPORT_REPORT') has_neg_resume_report
  FROM auction.pd_neg_header
 WHERE neg_id = ?
   AND neg_status = ?]]>
        </get_neg_with_status>
        <get_neg_customer_id>
            <![CDATA[SELECT customer_id FROM auction.pd_neg_header WHERE neg_id = ?]]>
        </get_neg_customer_id>
        <get_neg_type>
            <![CDATA[SELECT neg_type FROM auction.pd_neg_header WHERE neg_id = ?]]>
        </get_neg_type>
        <get_neg_status>
            <![CDATA[SELECT neg_status FROM auction.pd_neg_header WHERE neg_id = ?]]>
        </get_neg_status>
        <is_draft_neg>
            <![CDATA[SELECT 1 FROM auction.pd_neg_header WHERE neg_id = ? AND neg_status = 'DRAFT']]>
        </is_draft_neg>
        <get_neg_stage>
            <![CDATA[SELECT stage FROM auction.pd_neg_header WHERE neg_id = ?]]>
        </get_neg_stage>
        <get_parent_neg_id>
            <![CDATA[SELECT parent_neg_id FROM auction.pd_neg_header WHERE neg_id = ?]]>
        </get_parent_neg_id>
        <get_neg_doc_number>
            <![CDATA[SELECT doc_number FROM auction.pd_neg_header WHERE neg_id = ?]]>
        </get_neg_doc_number>
        <get_neg_setting_id>
            <![CDATA[SELECT setting_id FROM auction.pd_neg_header WHERE neg_id = ?]]>
        </get_neg_setting_id>
        <get_seconds_left_to_close>
            <![CDATA[SELECT EXTRACT(EPOCH FROM close_date - now()) FROM auction.pd_neg_header WHERE neg_id = ?]]>
        </get_seconds_left_to_close>
        <get_extend_count>
            <![CDATA[SELECT COALESCE(auction_ext_cnt, 0) auction_ext_cnt FROM auction.pd_neg_header WHERE neg_id = ?]]>
        </get_extend_count>
        <get_customer>
            <![CDATA[
SELECT neg_id, parent_neg_id, doc_number, title, title_kz, description, neg_type, category, neg_status, min_bid_limit_days, dumping_control_enabled,
       good_dumping_calc_method, good_dumping_threshold, work_dumping_calc_method, work_dumping_threshold, service_dumping_calc_method, service_dumping_threshold,
       open_date, close_date, actual_close_date, unlock_date, publish_date, award_date,
       cancel_date, cancel_desc, creation_date, created_by, last_updated_date, last_updated_by,
       customer_id, setting_id, auction_bid_step, auction_bid_step_type, stage,
       auction.neg_has_file(neg_id, 'NEG_PUBLISH_REPORT') has_neg_publish_report,
       auction.neg_has_file(neg_id, 'NEG_RESUME_REPORT') has_neg_resume_report
  FROM auction.pd_neg_header
 WHERE neg_id = ?
   AND customer_id = ?]]>
        </get_customer>
        <get_admin>
            <![CDATA[
SELECT neg_id, parent_neg_id, doc_number, title, title_kz, description, neg_type, category, neg_status, min_bid_limit_days, dumping_control_enabled,
       good_dumping_calc_method, good_dumping_threshold, work_dumping_calc_method, work_dumping_threshold, service_dumping_calc_method, service_dumping_threshold,
       open_date, close_date, actual_close_date, unlock_date, publish_date, award_date,
       cancel_date, cancel_desc, creation_date, created_by, last_updated_date, last_updated_by,
       customer_id, setting_id, auction_bid_step, auction_bid_step_type, stage,
       auction.neg_has_file(neg_id, 'NEG_PUBLISH_REPORT') has_neg_publish_report,
       auction.neg_has_file(neg_id, 'NEG_RESUME_REPORT') has_neg_resume_report
  FROM auction.pd_neg_header
 WHERE neg_id = ?]]>
        </get_admin>
        <get_not_draft>
            <![CDATA[
SELECT neg_id, parent_neg_id, doc_number, title, title_kz, description, neg_type, category, neg_status, min_bid_limit_days, dumping_control_enabled,
       good_dumping_calc_method, good_dumping_threshold, work_dumping_calc_method, work_dumping_threshold, service_dumping_calc_method, service_dumping_threshold,
       open_date, close_date, actual_close_date, unlock_date, publish_date, award_date,
       cancel_date, cancel_desc, creation_date, created_by, last_updated_date, last_updated_by,
       customer_id, setting_id, auction_bid_step, auction_bid_step_type, stage,
       auction.neg_has_file(neg_id, 'NEG_PUBLISH_REPORT') has_neg_publish_report,
       auction.neg_has_file(neg_id, 'NEG_RESUME_REPORT') has_neg_resume_report
  FROM auction.pd_neg_header
 WHERE neg_id = ?
   AND neg_status != 'DRAFT'
   AND open_date <= now()]]>
        </get_not_draft>
        <get_bid_neg>
            <![CDATA[
SELECT n.neg_id, parent_neg_id, n.doc_number, n.title, n.title_kz, n.description, n.neg_type, n.category, n.neg_status, min_bid_limit_days, dumping_control_enabled,
       n.good_dumping_calc_method, n.good_dumping_threshold, n.work_dumping_calc_method, n.work_dumping_threshold, n.service_dumping_calc_method, n.service_dumping_threshold,
       n.open_date, n.close_date, n.actual_close_date, n.unlock_date, n.publish_date, n.award_date,
       n.cancel_date, n.cancel_desc, n.creation_date, n.created_by, n.last_updated_date, n.last_updated_by,
       n.customer_id, n.setting_id, auction_bid_step, auction_bid_step_type, n.stage,
       auction.neg_has_file(n.neg_id, 'NEG_PUBLISH_REPORT') has_neg_publish_report,
       auction.neg_has_file(n.neg_id, 'NEG_RESUME_REPORT') has_neg_resume_report
  FROM auction.pd_neg_header n
  JOIN auction.pd_bid_header b
    ON n.neg_id = b.neg_id
 WHERE b.bid_id = ?]]>
        </get_bid_neg>
        <is_published_neg>
            <![CDATA[
SELECT 1
  FROM auction.pd_neg_header
 WHERE neg_id = ?
   AND close_date >= now()
   AND neg_status = 'PUBLISHED']]>
        </is_published_neg>
        <is_tender2_stage1>
            <![CDATA[
SELECT 1
  FROM auction.pd_neg_header
 WHERE neg_id = ?
   AND neg_type = 'TENDER2'
   AND stage = 1]]>
        </is_tender2_stage1>
        <is_tender2_stage2>
            <![CDATA[
SELECT 1
  FROM auction.pd_neg_header
 WHERE neg_id = ?
   AND neg_type = 'TENDER2'
   AND stage = 2]]>
        </is_tender2_stage2>
        <get_for_publish_validation>
            <![CDATA[
SELECT neg_id, open_date, close_date, unlock_date
  FROM auction.pd_neg_header
 WHERE neg_id = ?]]>
        </get_for_publish_validation>
        <get_auction_data_for_publish_validation>
            <![CDATA[
SELECT neg_id, close_date, open_date, neg_type, auction_bid_step, auction_bid_step_type
  FROM auction.pd_neg_header
 WHERE neg_id = ?]]>
        </get_auction_data_for_publish_validation>
        <get_dumping_data_for_publish_validation>
            <![CDATA[
SELECT neg_id, COALESCE(dumping_control_enabled, false) dumping_control_enabled,
       good_dumping_calc_method, good_dumping_threshold,
       work_dumping_calc_method, work_dumping_threshold,
       service_dumping_calc_method, service_dumping_threshold
  FROM auction.pd_neg_header
 WHERE neg_id = ?]]>
        </get_dumping_data_for_publish_validation>
        <auto_award_list>
            <![CDATA[
SELECT n.neg_id, n.created_by
  FROM auction.pd_neg_header n
  JOIN auction.pd_neg_settings s
    ON s.neg_id = n.neg_id
 WHERE n.unlock_date <= now()
   AND n.neg_status = 'PUBLISHED'
   AND s.award_method = 'AUTO']]>
        </auto_award_list>
        <unlock_list>
            <![CDATA[
SELECT n.neg_id
  FROM auction.pd_neg_header n
  JOIN auction.pd_neg_settings s
    ON s.neg_id = n.neg_id
 WHERE n.unlock_date <= now()
   AND n.neg_status = 'PUBLISHED'
   AND s.award_method = 'SECRETARY']]>
        </unlock_list>
        <get_auc_bid_step_type>
            <![CDATA[SELECT auction_bid_step_type FROM auction.pd_neg_header WHERE neg_id = ?]]>
        </get_auc_bid_step_type>
        <get_auc_bid_step>
            <![CDATA[SELECT auction_bid_step FROM auction.pd_neg_header WHERE neg_id = ?]]>
        </get_auc_bid_step>
        <awarded_neg_line_exists>
            <![CDATA[
SELECT 1
  FROM auction.pd_neg_lines
 WHERE neg_id = ?
   AND winner_supplier_id IS NOT NULL
   AND fail_reason IS NULL]]>
        </awarded_neg_line_exists>
        <not_failed_neg_line_exists>
            <![CDATA[
SELECT 1
  FROM auction.pd_neg_lines
 WHERE neg_id = ?
   AND fail_reason IS NULL]]>
        </not_failed_neg_line_exists>
        <permitted_tender2_stage1_line_exists>
            <![CDATA[
SELECT 1
  FROM auction.pd_neg_lines
 WHERE neg_id = ?
   AND fail_reason IS NULL]]>
        </permitted_tender2_stage1_line_exists>
        <insert>
            <![CDATA[
INSERT INTO auction.pd_neg_header(neg_id, doc_number, customer_id, title, title_kz, neg_type, neg_status,
            setting_id, stage, creation_date, created_by, last_updated_date, last_updated_by)
VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, now(), ?, now(), ?)]]>
        </insert>
        <update>
            <![CDATA[
UPDATE auction.pd_neg_header
   SET title = ?,
       title_kz = ?,
       description = ?,
       category = ?,
       open_date = ?,
       close_date = ?,
       unlock_date = ?,
       actual_close_date = ?,
       min_bid_limit_days = ?,
       dumping_control_enabled = ?,
       good_dumping_calc_method = ?,
       good_dumping_threshold = ?,
       work_dumping_calc_method = ?,
       work_dumping_threshold = ?,
       service_dumping_calc_method = ?,
       service_dumping_threshold = ?,
       auction_bid_step = ?,
       auction_bid_step_type = ?,
       last_updated_date = now(),
       last_updated_by = ?
 WHERE neg_id = ?
   AND customer_id = ?]]>
        </update>
        <update_status>
            <![CDATA[
UPDATE auction.pd_neg_header
   SET neg_status = ?,
       last_updated_date = now(),
       last_updated_by = ?
 WHERE neg_id = ?]]>
        </update_status>
        <update_for_auction_extend>
            <![CDATA[
UPDATE auction.pd_neg_header
   SET auction_ext_cnt = auction_ext_cnt + 1,
       auction_last_ext_date = now(),
       close_date = close_date + (INTERVAL '1 min' * ?),
       actual_close_date = close_date + (INTERVAL '1 min' * ?),
       unlock_date = unlock_date + (INTERVAL '1 min' * ?)
 WHERE neg_id = ?]]>
        </update_for_auction_extend>
        <update_award_date>
            <![CDATA[
UPDATE auction.pd_neg_header
   SET award_date = now(),
       last_updated_by = ?,
       last_updated_date = now()
 WHERE neg_id = ?]]>
        </update_award_date>
        <update_actual_close_date>
            <![CDATA[
UPDATE auction.pd_neg_header
   SET actual_close_date = now(),
       last_updated_by = ?,
       last_updated_date = now()
 WHERE neg_id = ?]]>
        </update_actual_close_date>
        <delete>
            <![CDATA[DELETE FROM auction.pd_neg_header WHERE neg_id = ?]]>
        </delete>
        <copy_neg>
            <![CDATA[
INSERT INTO auction.pd_neg_header(parent_neg_id, doc_number, customer_id, title, title_kz, description,
       neg_type, category, neg_status, setting_id, stage, dumping_control_enabled,
       good_dumping_calc_method, good_dumping_threshold, work_dumping_calc_method, work_dumping_threshold,
       service_dumping_calc_method, service_dumping_threshold, min_bid_limit_days,
       auction_bid_step, auction_bid_step_type,
       creation_date, created_by, last_updated_date, last_updated_by)
SELECT neg_id, ?, customer_id, title, title_kz, description,
       neg_type, category, ?, setting_id, ?, dumping_control_enabled,
       good_dumping_calc_method, good_dumping_threshold, work_dumping_calc_method, work_dumping_threshold,
       service_dumping_calc_method, service_dumping_threshold, min_bid_limit_days,
       auction_bid_step, auction_bid_step_type,
       now(), ?, now(), ?
  FROM auction.pd_neg_header
 WHERE neg_id = ?]]>
        </copy_neg>
        <team>
            <list>
                <![CDATA[
SELECT t.neg_id, t.user_id, t.role_code, t.member_position, concat_ws(' ', p.last_name, p.first_name, p.middle_name) full_name
  FROM auction.pd_neg_team t
  JOIN auction.users u
    ON u.user_id = t.user_id
  JOIN auction.persons p
    ON p.person_id = u.person_id
 WHERE neg_id = ?]]>
            </list>
            <is_neg_owner_organizer>
                <![CDATA[
SELECT 1
  FROM auction.pd_neg_header nh
  JOIN auction.pd_neg_team nt
    ON nt.neg_id = nh.neg_id
   AND nt.user_id = nh.created_by
 WHERE nh.neg_id = ?
   AND nt.role_code = '005']]>
            </is_neg_owner_organizer>
            <exists>
                <![CDATA[SELECT 1 FROM auction.pd_neg_team WHERE neg_id = ? AND user_id = ?]]>
            </exists>
            <insert>
                <![CDATA[
INSERT INTO auction.pd_neg_team(neg_id, user_id, member_position, role_code,
            creation_date, created_by, last_updated_date, last_updated_by)
VALUES (?, ?, ?, ?, now(), ?, now(), ?)]]>
            </insert>
            <copy_team>
                <![CDATA[
INSERT INTO auction.pd_neg_team(neg_id, user_id, role_code, member_position, creation_date, created_by, last_updated_date, last_updated_by)
SELECT ?, user_id, role_code, member_position, now(), ?, now(), ?
  FROM auction.pd_neg_team
 WHERE neg_id = ?]]>
            </copy_team>
            <update>
                <![CDATA[
UPDATE auction.pd_neg_team
   SET member_position = ?,
       role_code = ?,
       last_updated_by = ?,
       last_updated_date = now()
 WHERE neg_id = ?
   AND user_id = ?]]>
            </update>
            <delete>
                <![CDATA[DELETE FROM auction.pd_neg_team WHERE neg_id = ? AND user_id = ?]]>
            </delete>
            <delete_neg_team>
                <![CDATA[DELETE FROM auction.pd_neg_team WHERE neg_id = ?]]>
            </delete_neg_team>
        </team>
        <lines>
            <get_neg_lines>
                <![CDATA[
SELECT l.neg_id, l.plan_id, l.plan_number, l.line_num, l.quantity, l.uom_code, u.measure uom_desc, l.financial_year,
       l.item_code, l.item_code_desc, l.item_name_ru, l.item_name_kz, l.item_short_desc_ru, l.item_short_desc_kz,
       l.item_long_desc_ru, l.item_long_desc_kz, l.kz_content, l.purchase_type, l.purchase_location_kato,
       l.purchase_location, l.purchase_period, l.shipping_location, l.incoterms2010, l.prepayment, l.amount_without_vat,
       l.amount_with_vat, l.purchase_priority, l.note, l.shipping_date, l.item_code_list_type, l.unit_price,
       l.winner_supplier_id, l.bid_count, l.fail_reason, COALESCE(l.fail_reason, 'AWARDED') award_reason,
       l.shipping_region, l.discounts_confirmed, l.creation_date, l.created_by, l.last_updated_date, l.last_updated_by
  FROM auction.pd_neg_lines l
  JOIN md.uom_codes u
    ON u.code = l.uom_code
 WHERE neg_id = ?
 ORDER BY l.line_num]]>
            </get_neg_lines>
            <get_neg_line_unit_prices>
                <![CDATA[
SELECT line_num, unit_price
  FROM auction.pd_neg_lines
 WHERE neg_id = ?]]>
            </get_neg_line_unit_prices>
            <get_neg_lines_min_unit_price>
                <![CDATA[SELECT MIN(unit_price) FROM auction.pd_neg_lines WHERE neg_id = ?]]>
            </get_neg_lines_min_unit_price>
            <get_bid_neg_lines>
                <![CDATA[
SELECT l.neg_id, l.plan_id, l.plan_number, l.line_num, l.quantity, l.uom_code, u.measure uom_desc, l.financial_year,
       l.item_code, l.item_code_desc, l.item_name_ru, l.item_name_kz, l.item_short_desc_ru, l.item_short_desc_kz,
       l.item_long_desc_ru, l.item_long_desc_kz, l.kz_content, l.purchase_type, l.purchase_location_kato,
       l.purchase_location, l.purchase_period, l.shipping_location, l.incoterms2010, l.prepayment, l.amount_without_vat,
       l.amount_with_vat, l.purchase_priority, l.note, l.shipping_date, l.item_code_list_type, l.unit_price,
       l.winner_supplier_id, l.bid_count, l.fail_reason, COALESCE(l.fail_reason, 'AWARDED') award_reason,
       l.shipping_region, l.discounts_confirmed, l.creation_date, l.created_by, l.last_updated_date, l.last_updated_by
  FROM auction.pd_neg_lines l
  JOIN md.uom_codes u
    ON u.code = l.uom_code
 WHERE neg_id = ?
   AND line_num IN (SELECT line_num FROM auction.pd_bid_lines WHERE bid_id = ?)
 ORDER BY l.line_num]]>
            </get_bid_neg_lines>
            <get_neg_line_nums>
                <![CDATA[SELECT line_num FROM auction.pd_neg_lines WHERE neg_id = ?]]>
            </get_neg_line_nums>
            <get_not_failed_neg_line_nums>
                <![CDATA[
SELECT line_num
  FROM auction.pd_neg_lines nl
 WHERE neg_id = ?
   AND fail_reason IS NULL]]>
            </get_not_failed_neg_line_nums>
            <get_purchase_method>
                <![CDATA[
SELECT nl.purchase_type
  FROM auction.pd_neg_lines nl
 WHERE nl.neg_id = ?
   AND nl.line_num = ?]]>
            </get_purchase_method>
            <exists>
                <![CDATA[SELECT 1 FROM auction.pd_neg_lines WHERE neg_id = ? AND plan_id = ?]]>
            </exists>
            <max_line_num>
                <![CDATA[
SELECT COALESCE(MAX(line_num), 0) line_num
  FROM auction.pd_neg_lines
 WHERE neg_id = ? ]]>
            </max_line_num>
            <discounts_confirmed>
                <![CDATA[
SELECT discounts_confirmed
  FROM auction.pd_neg_lines
 WHERE neg_id = (SELECT neg_id FROM auction.pd_bid_header WHERE bid_id = ?)
   AND line_num = ?]]>
            </discounts_confirmed>
            <neg_line_total_and_permitted_bid_count>
                <![CDATA[
SELECT COUNT(bid_id) total_bid_count,
       COUNT(bid_id) FILTER(WHERE permitted) permitted_bid_count
  FROM (SELECT bh.bid_id, BOOL_AND(COALESCE(bp.permitted, false)) permitted
          FROM auction.pd_bid_header bh
          JOIN auction.pd_bid_lines bl
            ON bl.bid_id = bh.bid_id
          JOIN auction.pd_bid_permissions bp
            ON bp.bid_id = bh.bid_id
           AND bp.bid_line_num = bl.line_num
         WHERE bh.neg_id = ?
           AND bl.line_num = ?
           AND bh.bid_status = 'ACTIVE'
         GROUP BY bh.bid_id) t]]>
            </neg_line_total_and_permitted_bid_count>
            <price_based_neg_line_bid_ranks>
                <![CDATA[
SELECT bh.supplier_id,
       bh.bid_id,
       -- bid with lowest price wins. if bid prices are equal then earliest sent bid wins
       ROW_NUMBER() OVER (ORDER BY bl.bid_price *
                                   COALESCE(bh.unlock_exchange_rate, 1), -- convert price
                                   bh.publish_date -- break tie by publish date
                                   ) bid_rank
  FROM auction.pd_bid_header bh
  JOIN auction.pd_bid_lines bl
    ON bl.bid_id = bh.bid_id
 WHERE bh.neg_id = ?
   AND bl.line_num = ?
   AND bh.bid_status = 'ACTIVE'
   AND (SELECT BOOL_AND(COALESCE(bp.permitted, false))
          FROM auction.pd_bid_permissions bp
         WHERE bp.bid_id = bh.bid_id
           AND bp.bid_line_num = bl.line_num)]]>
            </price_based_neg_line_bid_ranks>
            <discounted_price_based_neg_line_bid_ranks>
                <![CDATA[
SELECT bh.supplier_id,
       bh.bid_id,
       -- there may be ties in bid ranks
       RANK() OVER (ORDER BY bl.bid_price
                                   * COALESCE(bh.unlock_exchange_rate, 1) -- convert price
                                   * (1 - COALESCE(discount, 0) / 100) -- apply discount
                                   ) bid_rank
  FROM auction.pd_bid_header bh
  JOIN auction.pd_bid_lines bl
    ON bl.bid_id = bh.bid_id
 WHERE bh.neg_id = ?
   AND bl.line_num = ?
   AND bh.bid_status = 'ACTIVE'
   AND (SELECT bool_and(COALESCE(bp.permitted, false))
          FROM auction.pd_bid_permissions bp
         WHERE bp.bid_id = bh.bid_id
           AND bp.bid_line_num = bl.line_num)]]>
            </discounted_price_based_neg_line_bid_ranks>
            <insert>
                <![CDATA[
INSERT INTO auction.pd_neg_lines(neg_id, plan_id, plan_number, line_num, financial_year,
            item_code, item_code_desc, item_name_ru, item_name_kz, item_short_desc_ru, item_short_desc_kz,
            item_long_desc_ru, item_long_desc_kz, kz_content, purchase_type, purchase_location_kato,
            purchase_location, shipping_location, incoterms2010, prepayment, quantity, amount_without_vat,
            amount_with_vat, purchase_priority, note, shipping_date, uom_code, item_code_list_type,
            unit_price, shipping_region, purchase_period,
            creation_date, created_by, last_updated_date, last_updated_by)
     SELECT ?, plan_id, plan_number, ?, financial_year,
            item_code, item_code_desc, item_name_ru, item_name_kz, item_short_desc_ru, item_short_desc_kz,
            item_long_desc_ru, item_long_desc_kz, kz_content, purchase_type, purchase_location_kato,
            purchase_location, shipping_location, incoterms2010, prepayment, quantity, amount_without_vat,
            amount_with_vat, purchase_priority, note, shipping_date, uom_code, item_code_list_type,
            unit_price, shipping_region, purchase_period,
            now(), ?, now(), ?
       FROM auction.plans
      WHERE plan_id = ?]]>
            </insert>
            <copy_not_failed_lines>
                <![CDATA[
INSERT INTO auction.pd_neg_lines(neg_id, plan_id, plan_number, line_num, financial_year,
       item_code, item_code_desc, item_name_ru, item_name_kz, item_short_desc_ru, item_short_desc_kz,
       item_long_desc_ru, item_long_desc_kz, purchase_type, purchase_location_kato, purchase_location,
       shipping_location, incoterms2010, prepayment, quantity, amount_without_vat,
       amount_with_vat, purchase_priority, note, shipping_date, uom_code, item_code_list_type,
       unit_price, shipping_region, purchase_period,
       creation_date, created_by, last_updated_date, last_updated_by)
SELECT ?, plan_id, plan_number, line_num, financial_year, item_code, item_code_desc, item_name_ru,
       item_name_kz, item_short_desc_ru, item_short_desc_kz, item_long_desc_ru, item_long_desc_kz, purchase_type,
       purchase_location_kato, purchase_location, shipping_location, incoterms2010, prepayment,
       quantity, amount_without_vat, amount_with_vat, purchase_priority, note, shipping_date, uom_code,
       item_code_list_type, unit_price, shipping_region, purchase_period,
       now(), ?, now(), ?
  FROM auction.pd_neg_lines
 WHERE neg_id = ?
   AND fail_reason IS NULL]]>
            </copy_not_failed_lines>
            <reset_awards>
                <![CDATA[
UPDATE auction.pd_neg_lines nl
   SET winner_supplier_id = NULL,
       fail_reason = NULL,
       last_updated_date = now(),
       last_updated_by = ?
 WHERE neg_id = ?]]>
            </reset_awards>
            <finalize_neg_lines>
                <![CDATA[
UPDATE auction.pd_neg_lines
   SET winner_supplier_id = ?,
       fail_reason = ?,
       last_updated_date = now(),
       last_updated_by = ?
 WHERE neg_id = ?
   AND line_num = ?]]>
            </finalize_neg_lines>
            <update_neg_line_bid_count>
                <![CDATA[
UPDATE auction.pd_neg_lines
   SET bid_count = t.cnt
  FROM (SELECT COUNT(bl.line_num) cnt,
               nl.line_num
          FROM auction.pd_neg_lines nl
          LEFT JOIN auction.pd_bid_header bh
            ON nl.neg_id = bh.neg_id
           AND bh.bid_status = 'ACTIVE'
          LEFT JOIN auction.pd_bid_lines bl
            ON bl.bid_id = bh.bid_id
           AND bl.line_num = nl.line_num
           AND (COALESCE(bl.bid_price, 0) > 0 OR COALESCE(bl.participate_tender2, false))
         WHERE nl.neg_id = ?
         GROUP BY nl.line_num) t
 WHERE auction.pd_neg_lines.neg_id = ?
   AND auction.pd_neg_lines.line_num = t.line_num]]>
            </update_neg_line_bid_count>
            <confirm_neg_line_discounts>
                <![CDATA[
UPDATE auction.pd_neg_lines
   SET discounts_confirmed = true,
       last_updated_date = now(),
       last_updated_by = ?
 WHERE neg_id = ?
   AND line_num = ?]]>
            </confirm_neg_line_discounts>
            <delete>
                <![CDATA[DELETE FROM auction.pd_neg_lines WHERE neg_id = ? AND plan_id = ?]]>
            </delete>
            <renumber_lines>
                <![CDATA[
UPDATE auction.pd_neg_lines
   SET line_num = ?
 WHERE neg_id = ?
   AND line_num = ?]]>
            </renumber_lines>
            <delete_neg_lines>
                <![CDATA[DELETE FROM auction.pd_neg_lines WHERE neg_id = ?]]>
            </delete_neg_lines>
            <list_for_integra>
                <![CDATA[
					SELECT neg_id, line_num, item_code_list_type, item_code, item_name_ru, item_name_kz, item_short_desc_ru, item_short_desc_kz, purchase_type, uom_code, quantity, unit_price, amount_without_vat, prepayment, shipping_date, purchase_location_kato, purchase_location, shipping_region, NULL status
					  FROM auction.pd_neg_lines
					 WHERE neg_id = ?]]>
            </list_for_integra>
        </lines>
        <get_for_integra>
            <![CDATA[SELECT neg_id, doc_number, c.identification_number customer_identification_number, c.name_ru customer_name_ru, c.name_kz customer_name_kz, c.identification_number org_identification_number, c.name_ru org_name_ru, c.name_kz org_name_kz, title, title_kz, description, neg_type, CASE WHEN category is null THEN '' ELSE category[1] END category, neg_status, open_date, close_date, unlock_date, publish_date, award_date, n.customer_id
					  FROM auction.pd_neg_header n
					   JOIN auction.customers c
						ON n.customer_id = c.customer_id
					 WHERE (n.last_sent IS NULL OR n.last_sent < n.last_updated_date) and n.neg_status != 'DRAFT']]>
        </get_for_integra>
        <set_sent>
            <![CDATA[UPDATE auction.pd_neg_header SET last_sent = now() WHERE neg_id = ?]]>
        </set_sent>
        <set_notification_available>
            <![CDATA[UPDATE auction.pd_neg_header SET notification_sent = FALSE WHERE neg_id = ?]]>
        </set_notification_available>
        <set_notification_sent>
            <![CDATA[UPDATE auction.pd_neg_header SET notification_sent = TRUE WHERE neg_id = ?]]>
        </set_notification_sent>
        <get_for_notification>
            <![CDATA[
SELECT neg_id, title, title_kz, description, neg_type, category, neg_status, open_date, close_date,
       actual_close_date, unlock_date, publish_date, award_date,
       cancel_date, cancel_desc, creation_date, created_by, last_updated_date, last_updated_by,
       customer_id, setting_id, auction_bid_step, auction_bid_step_type, stage
  FROM auction.pd_neg_header
 WHERE notification_sent is FALSE]]>
        </get_for_notification>
    </negotiations>
    <neg_settings>
        <get>
            <![CDATA[
SELECT neg_id, award_method, foreign_currency_control, auction_duration,
       auction_ext_time_left, auction_ext_duration, auction_ext_number,
       created_by, creation_date, last_updated_date, last_updated_by
  FROM auction.pd_neg_settings
 WHERE neg_id = ?]]>
        </get>
        <get_award_method>
            <![CDATA[SELECT award_method FROM auction.pd_neg_settings WHERE neg_id = ?]]>
        </get_award_method>
        <get_auction_duration>
            <![CDATA[SELECT auction_duration FROM auction.pd_neg_settings WHERE neg_id = ?]]>
        </get_auction_duration>
        <get_foreign_currency_control>
            <![CDATA[SELECT foreign_currency_control FROM auction.pd_neg_settings WHERE neg_id = ?]]>
        </get_foreign_currency_control>
        <insert>
            <![CDATA[
INSERT INTO auction.pd_neg_settings(
            neg_id, award_method, foreign_currency_control, auction_duration,
            auction_ext_time_left, auction_ext_duration, auction_ext_number,
            created_by, creation_date, last_updated_date, last_updated_by)
    VALUES (?, ?, ?, ?, ?, ?, ?, ?, now(), now(), ?)]]>
        </insert>
        <delete>
            <![CDATA[DELETE FROM auction.pd_neg_settings WHERE neg_id = ?]]>
        </delete>
        <neg_requirements>
            <list>
                <![CDATA[
SELECT neg_id, requirement_id, description, is_system, req_type, applicable_for_stage1,
       applicable_for_stage2, created_by, creation_date, last_updated_date, last_updated_by
  FROM auction.pd_neg_requirements
 WHERE neg_id = ?]]>
            </list>
            <get_foreign_currency_control_id>
                <![CDATA[
SELECT requirement_id
  FROM auction.pd_neg_requirements
 WHERE neg_id = ?
   AND req_type = 'FOREIGN_CURRENCY_CONTROL']]>
            </get_foreign_currency_control_id>
            <get_dumping_control_id>
                <![CDATA[
SELECT requirement_id
  FROM auction.pd_neg_requirements
 WHERE neg_id = ?
   AND req_type = 'DUMPING_CONTROL']]>
            </get_dumping_control_id>
            <insert>
                <![CDATA[
INSERT INTO auction.pd_neg_requirements(
            neg_id, requirement_id, description, is_system, req_type, applicable_for_stage1,
            applicable_for_stage2, created_by, creation_date, last_updated_date, last_updated_by)
    VALUES (?, ?, ?, ?, ?, ?, ?, ?, now(), now(), ?)]]>
            </insert>
            <delete>
                <![CDATA[DELETE FROM auction.pd_neg_requirements WHERE neg_id = ?]]>
            </delete>
        </neg_requirements>
        <neg_discounts>
            <get_neg_discounts>
                <![CDATA[
SELECT neg_id, discount_id, description, is_system, applicable_for_good, applicable_for_work,
       applicable_for_service, applicable_for_stage2, discount_type, discount_code, display_in_form
  FROM auction.pd_neg_discounts
 WHERE neg_id = ?
 ORDER BY description]]>
            </get_neg_discounts>
            <insert>
                <![CDATA[
INSERT INTO auction.pd_neg_discounts(
            neg_id, discount_id, description, is_system, applicable_for_good,
            applicable_for_work, applicable_for_service, applicable_for_stage2,
            discount_type, discount_code, display_in_form,
            created_by, creation_date, last_updated_date, last_updated_by)
    VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, now(), now(), ?)]]>
            </insert>
            <delete>
                <![CDATA[DELETE FROM auction.pd_neg_discounts WHERE neg_id = ?]]>
            </delete>
            <neg_discount_vals>
                <list>
                    <![CDATA[
SELECT neg_id, discount_val_id, discount_id, bool_value, number_from, number_to, discount,
       created_by, creation_date, last_updated_date, last_updated_by
  FROM auction.pd_neg_discount_values
 WHERE neg_id = ?]]>
                </list>
                <insert>
                    <![CDATA[
INSERT INTO auction.pd_neg_discount_values(
            neg_id, discount_val_id, discount_id, bool_value, number_from, number_to, discount,
            created_by, creation_date, last_updated_date, last_updated_by)
    VALUES (?, ?, ?, ?, ?, ?, ?, ?, now(), now(), ?)]]>
                </insert>
                <delete>
                    <![CDATA[DELETE FROM auction.pd_neg_discount_values WHERE neg_id = ?]]>
                </delete>
            </neg_discount_vals>
        </neg_discounts>
    </neg_settings>
    <bids>
        <get>
            <![CDATA[
SELECT bid_id, neg_id, supplier_id, bid_status, bid_limit_days, bid_comments,
       publish_date, cancel_date, cancel_desc, currency_code, sent_exchange_rate, unlock_exchange_rate, replaced_bid_id,
       auction.bid_has_file(bid_id, 'BID_REPORT') has_bid_report,
       auction.bid_has_file(bid_id, 'BID_PARTICIPATION_APPL') has_bid_part_report
  FROM auction.pd_bid_header
 WHERE bid_id = ?
   AND supplier_id = ?]]>
        </get>
        <is_draft_bid>
            <![CDATA[SELECT 1 FROM auction.pd_bid_header WHERE bid_id = ? AND bid_status = 'DRAFT']]>
        </is_draft_bid>
        <get_bid_neg_id>
            <![CDATA[SELECT neg_id FROM auction.pd_bid_header WHERE bid_id = ?]]>
        </get_bid_neg_id>
        <get_bid_publish_date>
            <![CDATA[SELECT publish_date FROM auction.pd_bid_header WHERE bid_id = ?]]>
        </get_bid_publish_date>
        <get_bid_status>
            <![CDATA[SELECT bid_status FROM auction.pd_bid_header WHERE bid_id = ?]]>
        </get_bid_status>
        <get_bid_currency_code>
            <![CDATA[SELECT currency_code FROM auction.pd_bid_header WHERE bid_id = ?]]>
        </get_bid_currency_code>
        <get_neg_bid_ids>
            <![CDATA[SELECT bid_id, supplier_id FROM auction.pd_bid_header WHERE neg_id = ?]]>
        </get_neg_bid_ids>
        <get_neg_bids>
            <![CDATA[
SELECT bh.bid_id, bh.neg_id, bh.supplier_id, bh.bid_status, bh.bid_limit_days, bh.bid_comments,
       bh.publish_date, bh.cancel_date, bh.cancel_desc, bh.currency_code, bh.sent_exchange_rate,
       bh.unlock_exchange_rate, bh.replaced_bid_id, true has_bid_report, created_by
  FROM auction.pd_bid_header bh
 WHERE neg_id = ?
   AND bh.bid_status IN ('AWARDED', 'ACTIVE', 'PARTIAL', 'REJECTED', 'FAILED', 'REPLACED', 'WITHDRAW')]]>
        </get_neg_bids>
        <get_active_foreign_currency_bids>
            <![CDATA[
SELECT bid_id, currency_code
  FROM auction.pd_bid_header
 WHERE neg_id = ?
   AND bid_status = 'ACTIVE'
   AND currency_code != ?]]>
        </get_active_foreign_currency_bids>
        <get_neg_and_bid_line_prices>
            <![CDATA[
SELECT bl.line_num, bl.bid_price, nl.unit_price
  FROM auction.pd_bid_header bh
  JOIN auction.pd_bid_lines bl
    ON bl.bid_id = bh.bid_id
  JOIN auction.pd_neg_lines nl
    ON nl.line_num = bl.line_num
   AND nl.neg_id = bh.neg_id
 WHERE bh.bid_id = ?]]>
        </get_neg_and_bid_line_prices>
        <get_neg_active_bids_award_statuses>
            <![CDATA[
SELECT bid_id,
       BOOL_OR(COALESCE(rank, 0) = 1) won_some_lines, -- won at least one line
       BOOL_AND(COALESCE(rank, 0) = 1) won_all_lines
  FROM auction.pd_bid_lines
 WHERE bid_id IN (SELECT bh.bid_id FROM auction.pd_bid_header bh
                  WHERE bh.neg_id = ?
                    AND bh.bid_status = 'ACTIVE')
 GROUP BY bid_id]]>
        </get_neg_active_bids_award_statuses>
        <get_tender2_stage1_permitted_bid_id>
            <![CDATA[
SELECT bid_id
  FROM auction.pd_bid_header bh
 WHERE supplier_id = ?
   AND bh.neg_id = ?
   AND bh.bid_status = 'ACTIVE'
   AND (SELECT BOOL_OR(bl.bid_line_status = 'ACTIVE')
          FROM auction.pd_bid_lines bl
         WHERE bl.bid_id = bh.bid_id)]]>
        </get_tender2_stage1_permitted_bid_id>
        <get_neg_lines_unit_and_bid_lines_mean_prices>
            <![CDATA[
SELECT b.bid_id,
       bl.line_num,
       nl.purchase_type,
       nl.unit_price,
       AVG(bl.bid_price * COALESCE(b.unlock_exchange_rate, 1)) OVER(PARTITION BY nl.line_num) mean_price,
       bl.bid_price * COALESCE(b.unlock_exchange_rate, 1) bid_price
  FROM auction.pd_neg_header n
  JOIN auction.pd_bid_header b
    ON n.neg_id = b.neg_id
  JOIN auction.pd_neg_lines nl
    ON n.neg_id = nl.neg_id
  JOIN auction.pd_bid_lines bl
    ON bl.bid_id = b.bid_id
   AND bl.line_num = nl.line_num
 WHERE n.neg_id = ?
   AND bid_status = 'ACTIVE' ]]>
        </get_neg_lines_unit_and_bid_lines_mean_prices>
        <get_last_with_status>
            <![CDATA[
SELECT bh.bid_id recid, bh.neg_id, bh.supplier_id, bh.bid_status, bh.publish_date,
       nh.doc_number, nh.title, nh.neg_type, nh.open_date, nh.close_date, nh.actual_close_date,
       concat_ws(' ', p.first_name, p.last_name) created_by
  FROM auction.pd_bid_header bh
  JOIN auction.pd_neg_header nh
    ON bh.neg_id = nh.neg_id
  LEFT JOIN auction.users u
    ON u.user_id = bh.created_by
  LEFT JOIN auction.persons p
    ON p.person_id = u.person_id
 WHERE bh.supplier_id = ?
   AND bh.bid_status = ?
 ORDER BY bh.bid_id DESC
 LIMIT 10]]>
        </get_last_with_status>
        <get_published_tender2_stage2_negs>
            <![CDATA[
SELECT n.neg_id recid, n.doc_number, n.title, n.neg_type, n.open_date, n.close_date
  FROM auction.pd_neg_header n
  JOIN auction.pd_bid_header bh
    ON bh.neg_id = n.parent_neg_id
 WHERE supplier_id = ?
   AND bh.bid_status = 'ACTIVE'
   AND n.neg_status = 'PUBLISHED'
   AND now() BETWEEN n.open_date AND n.close_date
   AND n.neg_id NOT IN
       (SELECT neg_id
          FROM auction.pd_bid_header
         WHERE supplier_id = bh.supplier_id
           AND bid_status IN ('DRAFT', 'ACTIVE'))
   AND (SELECT BOOL_OR(bl.bid_line_status = 'ACTIVE')
          FROM auction.pd_bid_lines bl
         WHERE bl.bid_id = bh.bid_id)]]>
        </get_published_tender2_stage2_negs>
        <get_salesroom_best_prices>
            <![CDATA[
SELECT bl.line_num, MIN(bl.bid_price * COALESCE(c.rate, 1)) best_price
  FROM auction.pd_bid_header b
  JOIN auction.pd_bid_lines bl
    ON bl.bid_id = b.bid_id
  LEFT JOIN auction.curr_exchange_rates_v c
    ON from_currency = ?
   AND c.to_currency = b.currency_code
 WHERE b.neg_id = ?
   AND b.bid_status = 'ACTIVE'
 GROUP BY bl.line_num]]>
        </get_salesroom_best_prices>
        <get_all_suppliers_rank>
            <![CDATA[
SELECT bl.line_num, b.supplier_id,
       rank() over (PARTITION BY bl.line_num
                    ORDER BY bl.bid_price * COALESCE(c.rate, 1) ASC NULLS LAST) as rank
  FROM auction.pd_bid_header b
  JOIN auction.pd_bid_lines bl
    ON bl.bid_id = b.bid_id
  LEFT JOIN auction.curr_exchange_rates_v c
    ON c.from_currency = ?
   AND c.to_currency = b.currency_code
 WHERE b.neg_id = ?
   AND b.bid_status = 'ACTIVE']]>
        </get_all_suppliers_rank>
        <get_supplier_ranks>
            <![CDATA[
SELECT t.line_num, rank
  FROM (SELECT bl.line_num, b.supplier_id,
               rank() over (PARTITION BY bl.line_num
                            ORDER BY bl.bid_price * COALESCE(c.rate, 1) ASC NULLS LAST) as rank
          FROM auction.pd_bid_header b
          JOIN auction.pd_bid_lines bl
            ON bl.bid_id = b.bid_id
          LEFT JOIN auction.curr_exchange_rates_v c
            ON c.from_currency = ?
           AND c.to_currency = b.currency_code
         WHERE b.neg_id = ?
           AND bl.bid_price IS NOT NULL
           AND b.bid_status = 'ACTIVE') as t
 WHERE supplier_id = ?]]>
        </get_supplier_ranks>
        <get_all_salesroom_bids>
            <![CDATA[
SELECT bl.line_num, MIN(bl.bid_price * COALESCE(c.rate, 1)) best_price
  FROM auction.pd_bid_header b
  JOIN auction.pd_bid_lines bl
    ON bl.bid_id = b.bid_id
  LEFT JOIN auction.curr_exchange_rates_v c
    ON from_currency = ?
   AND c.to_currency = b.currency_code
 WHERE b.neg_id = ?
   AND b.bid_status = 'ACTIVE'
   AND bl.bid_price IS NOT NULL
 GROUP BY bl.line_num]]>
        </get_all_salesroom_bids>
        <get_supp_last_salesroom_bids>
            <![CDATA[
SELECT bl.line_num, bl.quantity, bl.bid_price * COALESCE(c.rate, 1) bid_price
  FROM auction.pd_bid_header b
  JOIN auction.pd_bid_lines bl
    ON b.bid_id = bl.bid_id
  LEFT JOIN auction.curr_exchange_rates_v c
    ON from_currency = ?
   AND c.to_currency = b.currency_code
 WHERE b.neg_id = ?
   AND b.supplier_id = ?
   AND b.bid_status = 'ACTIVE']]>
        </get_supp_last_salesroom_bids>
        <get_supplier_active_bid_id>
            <![CDATA[
SELECT bid_id
  FROM auction.pd_bid_header
 WHERE neg_id = ?
   AND supplier_id = ?
   AND bid_status NOT IN ('WITHDRAW', 'REPLACED')]]>
        </get_supplier_active_bid_id>
        <active_supplier_bid_exists>
            <![CDATA[
SELECT 1
  FROM auction.pd_bid_header
 WHERE neg_id = ?
   AND supplier_id = ?
   AND bid_status NOT IN ('WITHDRAW', 'REPLACED')]]>
        </active_supplier_bid_exists>
        <get_replaced_bid_id>
            <![CDATA[SELECT replaced_bid_id FROM auction.pd_bid_header WHERE bid_id = ?]]>
        </get_replaced_bid_id>
        <get_replacing_bid_id>
            <![CDATA[SELECT bid_id FROM auction.pd_bid_header WHERE replaced_bid_id = ?]]>
        </get_replacing_bid_id>
        <is_bid_replaced>
            <![CDATA[SELECT 1 FROM auction.pd_bid_header WHERE replaced_bid_id = ?]]>
        </is_bid_replaced>
        <insert>
            <![CDATA[
INSERT INTO auction.pd_bid_header(neg_id, supplier_id, bid_status, currency_code,
            creation_date, created_by, last_updated_date, last_updated_by)
VALUES (?, ?, ?, ?, now(), ?, now(), ?)]]>
        </insert>
        <copy_bid_for_replace>
            <![CDATA[
INSERT INTO auction.pd_bid_header(replaced_bid_id, neg_id, supplier_id, currency_code, sent_exchange_rate,
            bid_limit_days, bid_comments, bid_status, creation_date, last_updated_date, last_updated_by, created_by)
SELECT bid_id, neg_id, supplier_id, currency_code, sent_exchange_rate,
       bid_limit_days, bid_comments, 'DRAFT', now(), now(), ?, ?
  FROM auction.pd_bid_header
 WHERE bid_id = ?]]>
        </copy_bid_for_replace>
        <update>
            <![CDATA[
UPDATE auction.pd_bid_header
   SET bid_limit_days = ?,
       bid_comments = ?,
       last_updated_by = ?,
       last_updated_date = now()
 WHERE bid_id = ?
   AND supplier_id = ?]]>
        </update>
        <update_bid_status>
            <![CDATA[
UPDATE auction.pd_bid_header
   SET bid_status = ?,
       last_updated_date = now(),
       last_updated_by = ?
 WHERE bid_id = ?]]>
        </update_bid_status>
        <update_all_bids_unlock_exchange_rates>
            <![CDATA[
UPDATE auction.pd_bid_header
   SET unlock_exchange_rate = c.rate
  FROM (SELECT rate, to_currency
          FROM auction.curr_exchange_rates_v
         WHERE from_currency = ?) c
 WHERE neg_id = ?
   AND c.to_currency = pd_bid_header.currency_code]]>
        </update_all_bids_unlock_exchange_rates>
        <update_bid_unlock_exchange_rate>
            <![CDATA[UPDATE auction.pd_bid_header SET unlock_exchange_rate = ? WHERE bid_id = ?]]>
        </update_bid_unlock_exchange_rate>
        <update_currency>
            <![CDATA[
UPDATE auction.pd_bid_header
   SET currency_code = ?,
       last_updated_by = ?,
       last_updated_date = now()
 WHERE bid_id = ?]]>
        </update_currency>
        <update_bid_exchange_rate>
            <![CDATA[
UPDATE auction.pd_bid_header
   SET sent_exchange_rate = ?,
       unlock_exchange_rate = ?,
       last_updated_by = ?,
       last_updated_date = now()
 WHERE bid_id = ?
   AND bid_status = 'DRAFT']]>
        </update_bid_exchange_rate>
        <update_bid_for_publish>
            <![CDATA[
UPDATE auction.pd_bid_header
   SET bid_status = ?,
       publish_date = now(),
       sent_exchange_rate = ?,
       unlock_exchange_rate = ?,
       last_updated_by = ?,
       last_updated_date = now()
 WHERE bid_id = ?
   AND bid_status = 'DRAFT']]>
        </update_bid_for_publish>
        <delete>
            <![CDATA[DELETE FROM auction.pd_bid_header WHERE bid_id = ?]]>
        </delete>
        <auction_current_best_prices>
            <![CDATA[
SELECT nl.line_num,
       MIN(COALESCE(bl.bid_price, nl.unit_price) * COALESCE(c.rate, 1)) best_price
  FROM auction.pd_neg_header n
  JOIN auction.pd_neg_lines nl
    ON n.neg_id = nl.neg_id
  LEFT JOIN auction.pd_bid_header b
    ON n.neg_id = b.neg_id
   AND b.bid_status = 'ACTIVE'
  LEFT JOIN auction.pd_bid_lines bl
    ON b.bid_id = bl.bid_id
   AND bl.line_num = nl.line_num
  LEFT JOIN auction.curr_exchange_rates_v c
    ON from_currency = ?
   AND c.to_currency = b.currency_code
 WHERE n.neg_id = ?
 GROUP BY nl.line_num]]>
        </auction_current_best_prices>
        <auction_line_current_best_price>
            <![CDATA[
SELECT MIN(COALESCE(bl.bid_price, nl.unit_price) * COALESCE(c.rate, 1)) best_price
  FROM auction.pd_neg_header n
  JOIN auction.pd_neg_lines nl
    ON n.neg_id = nl.neg_id
  LEFT JOIN auction.pd_bid_header b
    ON n.neg_id = b.neg_id
   AND b.bid_status = 'ACTIVE'
  LEFT JOIN auction.pd_bid_lines bl
    ON b.bid_id = bl.bid_id
   AND bl.line_num = nl.line_num
  LEFT JOIN auction.curr_exchange_rates_v c
    ON from_currency = ?
   AND c.to_currency = b.currency_code
 WHERE n.neg_id = ?
   AND nl.line_num = ?]]>
        </auction_line_current_best_price>
        <reset_award_statuses>
            <![CDATA[
UPDATE auction.pd_bid_header
   SET bid_status = 'ACTIVE',
       last_updated_date = now(),
       last_updated_by = ?
 WHERE neg_id = ?
   AND bid_status IN ('AWARDED', 'PARTIAL', 'REJECTED', 'FAILED')]]>
        </reset_award_statuses>
        <lines>
            <get>
                <![CDATA[
SELECT bid_id, line_num, bid_price, participate_tender2, quantity, discount, quantity * bid_price total_price, quantity * bid_price * (1 - discount / 100) total_discount_price
  FROM auction.pd_bid_lines
 WHERE bid_id = ?]]>
            </get>
            <get_bid_line_prices>
                <![CDATA[
SELECT line_num, bid_price
  FROM auction.pd_bid_lines
 WHERE bid_id = ?]]>
            </get_bid_line_prices>
            <insert>
                <![CDATA[
INSERT INTO auction.pd_bid_lines(bid_id, line_num, bid_price, quantity, bid_line_status,
             creation_date, created_by, last_updated_date, last_updated_by)
 SELECT ?, line_num, NULL, quantity, ?, now(), ?, now(), ?
   FROM auction.pd_neg_lines
  WHERE neg_id = ?]]>
            </insert>
            <copy_bid_lines_for_replace>
                <![CDATA[
INSERT INTO auction.pd_bid_lines(bid_id, line_num, bid_price, quantity, bid_line_status, participate_tender2,
            creation_date, created_by, last_updated_date, last_updated_by)
SELECT ?, nl.line_num, bl.bid_price, COALESCE(bl.quantity, nl.quantity), 'DRAFT', participate_tender2,
       now(), ?, now(), ?
  FROM auction.pd_bid_header bh
  JOIN auction.pd_neg_lines nl
    ON nl.neg_id = bh.neg_id
  LEFT JOIN auction.pd_bid_lines bl
    ON bl.bid_id = bh.bid_id
   AND bl.line_num = nl.line_num
 WHERE bh.bid_id = ?]]>
            </copy_bid_lines_for_replace>
            <copy_bid_lines_for_tender2_stage2>
                <![CDATA[
INSERT INTO auction.pd_bid_lines(
       bid_id, line_num, bid_price, quantity, bid_line_status,
       creation_date, created_by, last_updated_date, last_updated_by)
SELECT ?, line_num, NULL, quantity, ?, now(), ?, now(), ?
  FROM auction.pd_bid_lines
 WHERE bid_id = ?
   AND bid_line_status = 'ACTIVE']]>
            </copy_bid_lines_for_tender2_stage2>
            <update>
                <![CDATA[
UPDATE auction.pd_bid_lines
   SET bid_price = ?,
       participate_tender2 = ?,
       last_updated_by = ?,
       last_updated_date = now()
 WHERE bid_id = ?
   AND line_num = ?]]>
            </update>
            <update_bid_lines_statuses>
                <![CDATA[
UPDATE auction.pd_bid_lines
   SET bid_line_status = ?,
       last_updated_by = ?,
       last_updated_date = now()
 WHERE bid_id = ?]]>
            </update_bid_lines_statuses>
            <update_participating_bid_lines_statuses>
                <![CDATA[
UPDATE auction.pd_bid_lines
   SET bid_line_status = ?,
       last_updated_by = ?,
       last_updated_date = now()
 WHERE bid_id = ?
   AND (COALESCE(bid_price, 0) > 0 OR COALESCE(participate_tender2, false))]]>
            </update_participating_bid_lines_statuses>
            <update_bid_line_discount>
                <![CDATA[
UPDATE auction.pd_bid_lines
   SET discount = ?,
       discount_confirmed = ?
 WHERE bid_id = ?
   AND line_num = ?]]>
            </update_bid_line_discount>
            <fail_bid_lines>
                <![CDATA[
UPDATE auction.pd_bid_lines
   SET bid_line_status = ?,
       rank = null,
       last_updated_date = now(),
       last_updated_by = ?
 WHERE bid_id IN (SELECT bid_id
                   FROM auction.pd_bid_header bh
                  WHERE neg_id = ?
                    AND bh.bid_status = 'ACTIVE')
   AND line_num = ?]]>
            </fail_bid_lines>
            <update_rejected_bid_line_statuses>
                <![CDATA[
UPDATE auction.pd_bid_lines
   SET bid_line_status = 'REJECTED'
 WHERE (bid_id, line_num) IN
        (SELECT bh.bid_id, bl.line_num
          FROM auction.pd_bid_header bh
          JOIN auction.pd_bid_lines bl
            ON bl.bid_id = bh.bid_id
          JOIN auction.pd_bid_permissions bp
            ON bp.bid_id = bh.bid_id
           AND bp.bid_line_num = bl.line_num
         WHERE bh.neg_id = ?
           AND bh.bid_status = 'ACTIVE'
         GROUP BY bh.bid_id, bl.line_num
        HAVING NOT BOOL_AND(COALESCE(bp.permitted, false)))]]>
            </update_rejected_bid_line_statuses>
            <rank_bid_line>
                <![CDATA[
UPDATE auction.pd_bid_lines
   SET bid_line_status = ?,
       rank = ?,
       last_updated_date = now(),
       last_updated_by = ?
 WHERE bid_id = ?
   AND line_num = ?]]>
            </rank_bid_line>
            <reset_award_statuses_and_ranks>
                <![CDATA[
UPDATE auction.pd_bid_lines
   SET bid_line_status = 'ACTIVE',
       rank = null,
       last_updated_date = now(),
       last_updated_by = ?
 WHERE bid_id IN (SELECT bid_id FROM auction.pd_bid_header
                   WHERE neg_id = ?
                     AND bid_status IN ('ACTIVE', 'AWARDED', 'PARTIAL', 'REJECTED', 'FAILED'))]]>
            </reset_award_statuses_and_ranks>
            <delete>
                <![CDATA[DELETE FROM auction.pd_bid_lines WHERE bid_id = ?]]>
            </delete>
            <delete_not_participated_bid_lines>
                <![CDATA[
DELETE FROM auction.pd_bid_lines
 WHERE bid_id IN (SELECT bid_id FROM auction.pd_bid_header WHERE neg_id = ?)
   AND COALESCE(bid_price, 0) = 0]]>
            </delete_not_participated_bid_lines>
            <delete_tender2_not_participated_bid_lines>
                <![CDATA[
DELETE FROM auction.pd_bid_lines
 WHERE bid_id IN (SELECT bid_id FROM auction.pd_bid_header WHERE neg_id = ?)
   AND NOT COALESCE(participate_tender2, false)]]>
            </delete_tender2_not_participated_bid_lines>
        </lines>
    </bids>
    <bid_perms>
        <get_all_bid_lines_permissions>
            <![CDATA[
SELECT bp.bid_id, bp.bid_line_num, bp.requirement_id, bp.permitted, bp.reject_reason, bp.is_system,
       r.description
  FROM auction.pd_bid_permissions bp
  JOIN auction.pd_bid_header b
    ON b.bid_id = bp.bid_id
  JOIN auction.pd_neg_requirements r
    ON r.neg_id = b.neg_id
   AND bp.requirement_id = r.requirement_id
 WHERE b.neg_id = ?
   AND b.BID_STATUS IN ('AWARDED', 'ACTIVE', 'PARTIAL', 'REJECTED', 'FAILED')]]>
        </get_all_bid_lines_permissions>
        <get_neg_bid_supplier>
            <![CDATA[
SELECT s.name_ru, b.supplier_id, b.bid_id
  FROM auction.pd_bid_header b
  JOIN auction.suppliers s
    ON s.supplier_id = b.supplier_id
 WHERE b.neg_id = ?
   AND b.BID_STATUS IN ('AWARDED', 'ACTIVE', 'PARTIAL', 'REJECTED', 'FAILED')]]>
        </get_neg_bid_supplier>
        <get_neg_invalid_permission_bid_lines>
            <![CDATA[
SELECT bp.bid_line_num
  FROM auction.pd_bid_header b
  JOIN auction.pd_bid_permissions bp
    ON b.bid_id = bp.bid_id
 WHERE b.neg_id = ?
   AND b.bid_status = 'ACTIVE'
   AND ((COALESCE(permitted, false) AND reject_reason IS NOT NULL)
        OR (NOT COALESCE(permitted, false) AND reject_reason IS NULL))
 GROUP BY bp.bid_line_num]]>
        </get_neg_invalid_permission_bid_lines>
        <insert>
            <![CDATA[
INSERT INTO auction.pd_bid_permissions (bid_id, bid_line_num, requirement_id, permitted, is_system,
            created_by, creation_date, last_updated_date, last_updated_by)
SELECT b.bid_id, bl.line_num, r.requirement_id, ?, is_system, ?, now(), now(), ?
  FROM auction.pd_bid_header b
  JOIN auction.pd_bid_lines bl
    ON bl.bid_id = b.bid_id
  JOIN auction.pd_neg_requirements r
    ON r.neg_id = b.neg_id
 WHERE b.neg_id = ?
   AND b.BID_STATUS = 'ACTIVE'
 ORDER BY b.bid_id, bl.line_num, r.requirement_id]]>
        </insert>
        <insert_tender2_stage1>
            <![CDATA[
INSERT INTO auction.pd_bid_permissions (bid_id, bid_line_num, requirement_id, is_system, created_by, creation_date, last_updated_date, last_updated_by)
SELECT b.bid_id, bl.line_num, r.requirement_id, is_system, ?, now(), now(), ?
  FROM auction.pd_bid_header b
  JOIN auction.pd_bid_lines bl
    ON bl.bid_id = b.bid_id
  JOIN auction.pd_neg_requirements r
    ON r.neg_id = b.neg_id
 WHERE b.neg_id = ?
   AND b.BID_STATUS = 'ACTIVE'
   AND COALESCE(r.applicable_for_stage1, false)
   AND COALESCE(r.req_type, 'CUSTOM') NOT IN ('FOREIGN_CURRENCY_CONTROL', 'DUMPING_CONTROL')
 ORDER BY b.bid_id, bl.line_num, r.requirement_id]]>
        </insert_tender2_stage1>
        <insert_tender2_stage2>
            <![CDATA[
INSERT INTO auction.pd_bid_permissions (bid_id, bid_line_num, requirement_id, is_system, created_by, creation_date, last_updated_date, last_updated_by)
SELECT b.bid_id, bl.line_num, r.requirement_id, is_system, ?, now(), now(), ?
  FROM auction.pd_bid_header b
  JOIN auction.pd_bid_lines bl
    ON bl.bid_id = b.bid_id
  JOIN auction.pd_neg_requirements r
    ON r.neg_id = b.neg_id
 WHERE b.neg_id = ?
   AND b.BID_STATUS = 'ACTIVE'
   AND (COALESCE(r.applicable_for_stage2, false)
    OR COALESCE(r.req_type, 'CUSTOM') IN ('FOREIGN_CURRENCY_CONTROL', 'DUMPING_CONTROL'))
 ORDER BY b.bid_id, bl.line_num, r.requirement_id]]>
        </insert_tender2_stage2>
        <update>
            <![CDATA[
UPDATE auction.pd_bid_permissions
   SET permitted = ?,
       reject_reason = ?,
       last_updated_date = now(),
       last_updated_by = ?
 WHERE bid_id = ?
   AND bid_line_num = ?
   AND requirement_id = ?]]>
        </update>
        <update_func_currency_bids_perms>
            <![CDATA[
UPDATE auction.pd_bid_permissions
   SET permitted = true
  FROM (SELECT b.bid_id, bl.line_num
          FROM auction.pd_bid_header b
          JOIN auction.pd_bid_lines bl
            ON bl.bid_id = b.bid_id
         WHERE b.neg_id = ?
           AND bid_status = 'ACTIVE'
           AND currency_code = ?) bl
 WHERE requirement_id = ?
   AND pd_bid_permissions.bid_id = bl.bid_id
   AND bid_line_num = bl.line_num]]>
        </update_func_currency_bids_perms>
        <update_foreign_currency_bid_line_perm>
            <![CDATA[
UPDATE auction.pd_bid_permissions
   SET permitted = ?,
       reject_reason = ?
 WHERE bid_id = ?
   AND bid_line_num = ?
   AND requirement_id = ?]]>
        </update_foreign_currency_bid_line_perm>
    </bid_perms>
    <bid_discount>
        <get_bid_discounts>
            <![CDATA[
SELECT bid_id, bid_line_num, discount_id, bool_value, number_value, created_by, creation_date, last_updated_date, last_updated_by
  FROM auction.pd_bid_discounts
 WHERE bid_id = ?
 ORDER BY bid_id, bid_line_num, discount_id]]>
        </get_bid_discounts>
        <get_bid_discounts_orig>
            <![CDATA[
SELECT bid_id, bid_line_num, discount_id, bool_value, bool_value_orig, number_value_orig, number_value, correction_reason, created_by, creation_date, last_updated_date, last_updated_by
  FROM auction.pd_bid_discounts
 WHERE bid_id = ?
 ORDER BY bid_id, bid_line_num, discount_id]]>
        </get_bid_discounts_orig>
        <get_bid_line_discounts>
            <![CDATA[
SELECT bid_id, bid_line_num, discount_id, bool_value, bool_value_orig, number_value_orig, number_value, correction_reason, created_by, creation_date, last_updated_date, last_updated_by
  FROM auction.pd_bid_discounts
 WHERE bid_id = ?
   AND bid_line_num = ?
 ORDER BY bid_id, bid_line_num, discount_id]]>
        </get_bid_line_discounts>
        <get_bid_line_total_discount>
            <![CDATA[
SELECT SUM(discount) discount
  FROM (SELECT COALESCE(ndv.discount, 0) discount
          FROM auction.pd_bid_header bh
          JOIN auction.pd_bid_discounts bd
            ON bh.bid_id = bd.bid_id
          JOIN auction.pd_neg_discounts nd
            ON bd.discount_id = nd.discount_id
           AND bh.neg_id = nd.neg_id
          LEFT JOIN auction.pd_neg_discount_values ndv
            ON ndv.discount_id = nd.discount_id
           AND ndv.neg_id = nd.neg_id
           AND ndv.bool_value = bd.bool_value
         WHERE nd.discount_type = 'YES_NO'
           AND bh.bid_id = ?
           AND bd.bid_line_num = ?

         UNION ALL

        SELECT COALESCE(ndv.discount, 0) discount
          FROM auction.pd_bid_header bh
          JOIN auction.pd_bid_discounts bd
            ON bh.bid_id = bd.bid_id
          JOIN auction.pd_neg_discounts nd
            ON bd.discount_id = nd.discount_id
           AND bh.neg_id = nd.neg_id
          LEFT JOIN auction.pd_neg_discount_values ndv
            ON ndv.discount_id = nd.discount_id
           AND ndv.neg_id = nd.neg_id
           AND bd.number_value >= number_from
           AND bd.number_value < COALESCE(number_to, 9999999999999)
         WHERE nd.discount_type = 'NUMBER_RANGE'
           AND bh.bid_id = ?
           AND bd.bid_line_num = ?) t]]>
        </get_bid_line_total_discount>
        <get_bid_lines_total_discount>
            <![CDATA[
SELECT bid_line_num, SUM(discount) discount
  FROM (SELECT bd.bid_line_num,
               COALESCE(ndv.discount, 0) discount
          FROM auction.pd_bid_header bh
          JOIN auction.pd_bid_discounts bd
            ON bh.bid_id = bd.bid_id
          JOIN auction.pd_neg_discounts nd
            ON bd.discount_id = nd.discount_id
           AND bh.neg_id = nd.neg_id
          LEFT JOIN auction.pd_neg_discount_values ndv
            ON ndv.discount_id = nd.discount_id
           AND ndv.neg_id = nd.neg_id
           AND ndv.bool_value = bd.bool_value
         WHERE nd.discount_type = 'YES_NO'
           AND bh.bid_id = ?

         UNION ALL

        SELECT bd.bid_line_num,
               COALESCE(ndv.discount, 0) discount
          FROM auction.pd_bid_header bh
          JOIN auction.pd_bid_discounts bd
            ON bh.bid_id = bd.bid_id
          JOIN auction.pd_neg_discounts nd
            ON bd.discount_id = nd.discount_id
           AND bh.neg_id = nd.neg_id
          LEFT JOIN auction.pd_neg_discount_values ndv
            ON ndv.discount_id = nd.discount_id
           AND ndv.neg_id = nd.neg_id
           AND bd.number_value >= number_from
           AND bd.number_value < COALESCE(number_to, 9999999999999)
         WHERE nd.discount_type = 'NUMBER_RANGE'
           AND bh.bid_id = ?) t
 GROUP BY bid_line_num]]>
        </get_bid_lines_total_discount>
        <is_neg_line_bids_all_discounts_confirmed>
            <![CDATA[
SELECT BOOL_AND(COALESCE(bl.discount_confirmed, false))
  FROM auction.pd_bid_header b
  JOIN auction.pd_bid_lines bl
    ON b.bid_id = bl.bid_id
 WHERE b.neg_id = ?
   AND bl.line_num = ?
   AND b.bid_status = 'ACTIVE']]>
        </is_neg_line_bids_all_discounts_confirmed>
        <get_neg_all_not_confirmed_bid_discount_lines>
            <![CDATA[
SELECT bl.line_num
  FROM auction.pd_bid_header b
  JOIN auction.pd_bid_lines bl
    ON b.bid_id = bl.bid_id
 WHERE b.neg_id = ?
   AND b.bid_status = 'ACTIVE'
 GROUP BY bl.line_num
HAVING NOT BOOL_AND(COALESCE(bl.discount_confirmed, false))]]>
        </get_neg_all_not_confirmed_bid_discount_lines>
        <insert>
            <![CDATA[
INSERT INTO auction.pd_bid_discounts (bid_id, bid_line_num, discount_id, created_by, creation_date, last_updated_date, last_updated_by)
SELECT bl.bid_id, bl.line_num, discount_id, ?, now(), now(), ?
  FROM auction.pd_bid_lines bl
  JOIN auction.pd_neg_lines nl
    ON bl.line_num = nl.line_num
  JOIN auction.pd_neg_discounts d
    ON d.neg_id = nl.neg_id
 WHERE bl.bid_id = ?
   AND nl.neg_id = ?
   AND COALESCE(d.display_in_form, false)
   AND ((nl.purchase_type = 'GOOD' AND d.applicable_for_good) OR
        (nl.purchase_type = 'WORK' AND d.applicable_for_work) OR
        (nl.purchase_type = 'SERVICE' AND d.applicable_for_service))]]>
        </insert>
        <copy_bid_discounts>
            <![CDATA[
INSERT INTO auction.pd_bid_discounts (bid_id, bid_line_num, discount_id,
       bool_value, bool_value_orig, number_value, number_value_orig,
       created_by, creation_date, last_updated_date, last_updated_by)
SELECT ?, bd.bid_line_num, bd.discount_id,
       bd.bool_value, bd.bool_value, bd.number_value, bd.number_value,
       ?, now(), now(), ?
  FROM auction.pd_bid_lines bl
  JOIN auction.pd_bid_discounts bd
    ON bl.bid_id = bd.bid_id
   AND bl.line_num = bd.bid_line_num
 WHERE bl.bid_id = ?]]>
        </copy_bid_discounts>
        <copy_bid_active_discounts>
            <![CDATA[
INSERT INTO auction.pd_bid_discounts (bid_id, bid_line_num, discount_id,
       bool_value, bool_value_orig, number_value, number_value_orig,
       created_by, creation_date, last_updated_date, last_updated_by)
SELECT ?, bd.bid_line_num, bd.discount_id,
       bd.bool_value, bd.bool_value, bd.number_value, bd.number_value,
       ?, now(), now(), ?
  FROM auction.pd_bid_lines bl
  JOIN auction.pd_bid_discounts bd
    ON bl.bid_id = bd.bid_id
   AND bl.line_num = bd.bid_line_num
 WHERE bl.bid_id = ?
   AND bl.bid_line_status = 'ACTIVE']]>
        </copy_bid_active_discounts>
        <update>
            <![CDATA[
UPDATE auction.pd_bid_discounts
   SET bool_value = ?,
       bool_value_orig = ?,
       number_value  = ?,
       number_value_orig = ?,
       last_updated_date = now(),
       last_updated_by = ?
 WHERE bid_id = ?
   AND bid_line_num = ?
   AND discount_id = ?]]>
        </update>
        <update_bid_line_total_discount>
            <![CDATA[
UPDATE auction.pd_bid_lines
      SET discount = ?
WHERE bid_id = ?
  AND line_num = ?
  AND (COALESCE(bid_price, 0) > 0 OR COALESCE(participate_tender2, false))]]>
        </update_bid_line_total_discount>
        <correction>
            <![CDATA[
UPDATE auction.pd_bid_discounts
     SET bool_value = ?,
         number_value  = ?,
         correction_reason = ?,
         last_updated_date = now(),
         last_updated_by = ?
   WHERE bid_id = ?
     AND bid_line_num = ?
     AND discount_id = ?]]>
        </correction>
        <confirm_bid_discount>
            <![CDATA[
UPDATE auction.pd_bid_lines
   SET discount_confirmed = true,
       last_updated_date = now(),
       last_updated_by = ?
 WHERE bid_id = ?
   AND line_num = ?]]>
        </confirm_bid_discount>
        <delete>
            <![CDATA[DELETE FROM auction.pd_bid_discounts WHERE bid_id = ?]]>
        </delete>
        <delete_not_participated_bid_line_discounts>
            <![CDATA[
DELETE FROM auction.pd_bid_discounts
 WHERE (bid_id, bid_line_num) IN
       (SELECT b.bid_id, bl.line_num
      FROM auction.pd_bid_header b
      JOIN auction.pd_bid_lines bl
        ON b.bid_id = bl.bid_id
     WHERE b.neg_id = ?
       AND COALESCE(bid_price, 0) = 0)]]>
        </delete_not_participated_bid_line_discounts>
        <delete_tender2_not_participated_bid_line_discounts>
            <![CDATA[
DELETE FROM auction.pd_bid_discounts
 WHERE (bid_id, bid_line_num) IN
       (SELECT b.bid_id, bl.line_num
          FROM auction.pd_bid_header b
          JOIN auction.pd_bid_lines bl
            ON b.bid_id = bl.bid_id
         WHERE b.neg_id = ?
           AND NOT COALESCE(bl.participate_tender2, false))]]>
        </delete_tender2_not_participated_bid_line_discounts>
        <bid_line_discount_boolean_value>
            <![CDATA[
SELECT bool_value
  FROM auction.pd_bid_discounts
 WHERE bid_id = ?
   AND bid_line_num = ?
   AND discount_id = ?]]>
        </bid_line_discount_boolean_value>
        <bid_line_discount_number_value>
            <![CDATA[
SELECT number_value
  FROM auction.pd_bid_discounts
 WHERE bid_id = ?
   AND bid_line_num = ?
   AND discount_id = ?]]>
        </bid_line_discount_number_value>
        <get_domestic_producer_of_goods_discount_id>
            <![CDATA[
SELECT discount_id
  FROM auction.pd_neg_discounts
 WHERE discount_code = 'DOMESTIC_PRODUCER'
   AND neg_id = ?]]>
        </get_domestic_producer_of_goods_discount_id>
        <get_work_service_local_content_discount_id>
            <![CDATA[
SELECT discount_id
  FROM auction.pd_neg_discounts
 WHERE discount_code = 'WORK_SERVICE_LOCAL_CONTENT'
   AND neg_id = ?]]>
        </get_work_service_local_content_discount_id>
        <get_experience_discount_id>
            <![CDATA[
SELECT discount_id
  FROM auction.pd_neg_discounts
 WHERE discount_code = 'EXPERIENCE'
   AND neg_id = ?]]>
        </get_experience_discount_id>
    </bid_discount>
    <bill_plan>
        <get_customer_bill_plan>
            <![CDATA[
SELECT bill_plan_id, plan_type, customer_id, supplier_id, effective_from, effective_to
  FROM auction.bill_plans
 WHERE customer_id = ?
   AND now() BETWEEN effective_from AND COALESCE(effective_to, now() + interval '1 day')]]>
        </get_customer_bill_plan>
        <get_supplier_bill_plan>
            <![CDATA[
SELECT bill_plan_id, plan_type, customer_id, supplier_id, effective_from, effective_to
  FROM auction.bill_plans
 WHERE supplier_id = ?
   AND now() BETWEEN effective_from AND COALESCE(effective_to, now() + interval '1 day')]]>
        </get_supplier_bill_plan>
        <insert>
            <![CDATA[
INSERT INTO auction.bill_plans(plan_type, customer_id, supplier_id, effective_from, effective_to,
           created_by, creation_date, last_updated_date, last_updated_by)
    VALUES (?, ?, ?, ?, ?, ?, now(), now(), ?)]]>
        </insert>
    </bill_plan>
    <bill>
        <get_customer_bills_for_period>
            <![CDATA[
SELECT bills_for_period_id, row_number() OVER(ORDER BY date_from) bill_number,
       customer_id, supplier_id, date_from, date_to,
       period_price, description
  FROM auction.bills_for_period
 WHERE customer_id = ?
   AND date_from >= ?
   AND date_to <= ?]]>
        </get_customer_bills_for_period>
        <get_supplier_bills_for_period>
            <![CDATA[
SELECT bills_for_period_id, row_number() OVER(ORDER BY date_from) bill_number,
       customer_id, supplier_id, date_from, date_to,
       period_price, description
  FROM auction.bills_for_period
 WHERE supplier_id = ?
   AND date_from >= ?
   AND date_to <= ?]]>
        </get_supplier_bills_for_period>
        <get_customer_bills>
            <![CDATA[
SELECT b.bill_id, b.neg_id, b.bid_id, b.price, bill_date
  FROM auction.bills b
  JOIN auction.pd_neg_header n
    ON b.neg_id = n.neg_id
 WHERE n.customer_id = ?
   AND b.bill_date BETWEEN ? AND ?]]>
        </get_customer_bills>
        <get_supplier_bills>
            <![CDATA[
SELECT b.bill_id, b.neg_id, b.bid_id, b.price, bill_date
  FROM auction.bills b
  JOIN auction.pd_bid_header bd
    ON b.bid_id = bd.bid_id
 WHERE bd.supplier_id = ?
   AND b.bill_date BETWEEN ? AND ?]]>
        </get_supplier_bills>
        <detail>
            <get_bill_details>
                <![CDATA[
SELECT bill_detail_id, bill_id, line_num, price
  FROM auction.bill_details
 WHERE bill_id = ?]]>
            </get_bill_details>
        </detail>
    </bill>
    <payment>
        <get_customer_payments>
            <![CDATA[
SELECT payment_id, row_number() OVER(ORDER BY payment_date) payment_number,
       customer_id, supplier_id, amount, payment_date, description
  FROM auction.payments
 WHERE customer_id = ?
   AND payment_date BETWEEN ? AND ?]]>
        </get_customer_payments>
        <get_supplier_payments>
            <![CDATA[
SELECT payment_id, row_number() OVER(ORDER BY payment_date) payment_number,
       customer_id, supplier_id, amount, payment_date, description
  FROM auction.payments
 WHERE supplier_id = ?
   AND payment_date BETWEEN ? AND ?]]>
        </get_supplier_payments>
    </payment>
    <load>
        <insert_kato>
            <![CDATA[INSERT INTO md.kato_codes(code, region, county, district, town) VALUES (?, ?, ?, ?, ?)]]>
        </insert_kato>
        <insert_uom>
            <![CDATA[INSERT INTO md.uom_codes(code, measure) VALUES (?, ?)]]>
        </insert_uom>
        <insert_enstru>
            <![CDATA[INSERT INTO md.plan_item_codes(code_type, code) VALUES ('enstru', ?)]]>
        </insert_enstru>
        <insert_skp>
            <![CDATA[INSERT INTO md.plan_item_codes(code_type, code) VALUES ('skp', ?)]]>
        </insert_skp>
        <insert_kpved>
            <![CDATA[INSERT INTO md.plan_item_codes(code_type, code) VALUES ('kpved', ?)]]>
        </insert_kpved>
        <list_all_plans>
            <![CDATA[
SELECT p.plan_id, p.plan_number, p.org_id, p.financial_year, p.item_code, p.item_code_desc, p.item_name_ru,
       p.item_name_kz, p.kz_content, p.item_short_desc_ru, p.item_short_desc_kz, p.item_long_desc_ru,
       p.item_long_desc_kz, p.purchase_location, p.purchase_type, p.purchase_method, p.shipping_location,
       p.incoterms2010, p.prepayment, p.uom_code, p.quantity, p.unit_price, p.amount_without_vat,
       p.amount_with_vat, p.note, p.purchase_priority, p.shipping_date, p.status, p.shipping_region, p.purchase_period,
       p.setting_id
  FROM auction.plans p]]>
        </list_all_plans>
        <list_all_negs>
            <![CDATA[
SELECT neg_id, parent_neg_id, doc_number, title, title_kz, description, neg_type, category, neg_status,
       min_bid_limit_days, dumping_control_enabled, good_dumping_calc_method, good_dumping_threshold,
       work_dumping_calc_method, work_dumping_threshold, service_dumping_calc_method, service_dumping_threshold,
       open_date, close_date, actual_close_date, unlock_date, publish_date, award_date,
       cancel_date, cancel_desc, creation_date, created_by, last_updated_date, last_updated_by,
       customer_id, setting_id, auction_bid_step, auction_bid_step_type, stage,
       auction.neg_has_file(neg_id, 'NEG_PUBLISH_REPORT') has_neg_publish_report,
       auction.neg_has_file(neg_id, 'NEG_RESUME_REPORT') has_neg_resume_report
  FROM auction.pd_neg_header]]>
        </list_all_negs>
        <list_all_bids>
            <![CDATA[
SELECT bid_id, neg_id, supplier_id, bid_status, bid_limit_days, bid_comments,
       publish_date, cancel_date, cancel_desc, currency_code, sent_exchange_rate, unlock_exchange_rate,
       replaced_bid_id, auction.bid_has_file(bid_id, 'BID_REPORT') has_bid_report,
       auction.bid_has_file(bid_id, 'BID_PARTICIPATION_APPL') has_bid_part_report
  FROM auction.pd_bid_header]]>
        </list_all_bids>
        <list_all_suppliers>
            <![CDATA[
SELECT supplier_id, nonresident, is_legal_entity legal_entity, NOT is_legal_entity is_individual,
       identification_number, business_entity_type, business_entity_type_custom,
       rnn, name_ru, name_kz, state_reg_number, state_reg_date, state_reg_department,
       chief_full_name, chief_full_position, reg_status, country
  FROM auction.suppliers]]>
        </list_all_suppliers>
        <list_all_customers>
            <![CDATA[
SELECT c.customer_id, c.is_organizer, c.identification_number, c.business_entity_type, c.rnn, c.name_ru, c.name_kz,
       c.state_reg_number, c.state_reg_date, c.state_reg_department, c.chief_full_name, c.chief_full_position,
       c.reg_status, c.head_org_identification_number, c.head_org_name_ru, c.head_org_name_kz
  FROM auction.customers c]]>
        </list_all_customers>
    </load>
</sql>